//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Reports.BillingFacadeServiceClient {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://Wipro.NxG.HIS", ConfigurationName="BillingFacadeServiceClient.BillingFacadeServiceContract")]
    public interface BillingFacadeServiceContract {
        
        [System.ServiceModel.OperationContractAttribute(Action="GetBillDetails", ReplyAction="http://Wipro.NxG.HIS/BillingFacadeServiceContract/GetBillDetailsResponse")]
        void GetBillDetails();
        
        [System.ServiceModel.OperationContractAttribute(Action="GetBillDetails", ReplyAction="http://Wipro.NxG.HIS/BillingFacadeServiceContract/GetBillDetailsResponse")]
        System.Threading.Tasks.Task GetBillDetailsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="CalucalteOPBill", ReplyAction="http://Wipro.NxG.HIS/BillingFacadeServiceContract/CalucalteOPBillResponse")]
        System.Data.DataSet CalucalteOPBill(System.Data.DataSet ds, int InputWorkStationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="CalucalteOPBill", ReplyAction="http://Wipro.NxG.HIS/BillingFacadeServiceContract/CalucalteOPBillResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> CalucalteOPBillAsync(System.Data.DataSet ds, int InputWorkStationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="CalucalteOPBillNew", ReplyAction="http://Wipro.NxG.HIS/BillingFacadeServiceContract/CalucalteOPBillNewResponse")]
        Reports.BillingFacadeServiceClient.CalucalteOPBillNewResponse CalucalteOPBillNew(Reports.BillingFacadeServiceClient.CalucalteOPBillNewRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="CalucalteOPBillNew", ReplyAction="http://Wipro.NxG.HIS/BillingFacadeServiceContract/CalucalteOPBillNewResponse")]
        System.Threading.Tasks.Task<Reports.BillingFacadeServiceClient.CalucalteOPBillNewResponse> CalucalteOPBillNewAsync(Reports.BillingFacadeServiceClient.CalucalteOPBillNewRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="CalucalteIPBill", ReplyAction="http://Wipro.NxG.HIS/BillingFacadeServiceContract/CalucalteIPBillResponse")]
        System.Data.DataSet CalucalteIPBill(
                    int intTariffID, 
                    int intDefTariffID, 
                    int intEBedType, 
                    bool blnIsServiceTax, 
                    long lngIPID, 
                    string strRegCode, 
                    int intPatientFeeType, 
                    int intBillType, 
                    int intLoacationID, 
                    string strAdmitDateTime, 
                    string strDischargeDateTime, 
                    int intTableID, 
                    string strFilter, 
                    int intLetterID, 
                    int intGradeID, 
                    int intCompanyID, 
                    int intUserId, 
                    int intWorkStationId, 
                    int intError, 
                    bool IsDischarged, 
                    bool IsOPPackage, 
                    bool IsIntrimBill, 
                    string strSessionID, 
                    int intPatientID, 
                    int intPatientType, 
                    int intDefaultSpecId);
        
        [System.ServiceModel.OperationContractAttribute(Action="CalucalteIPBill", ReplyAction="http://Wipro.NxG.HIS/BillingFacadeServiceContract/CalucalteIPBillResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> CalucalteIPBillAsync(
                    int intTariffID, 
                    int intDefTariffID, 
                    int intEBedType, 
                    bool blnIsServiceTax, 
                    long lngIPID, 
                    string strRegCode, 
                    int intPatientFeeType, 
                    int intBillType, 
                    int intLoacationID, 
                    string strAdmitDateTime, 
                    string strDischargeDateTime, 
                    int intTableID, 
                    string strFilter, 
                    int intLetterID, 
                    int intGradeID, 
                    int intCompanyID, 
                    int intUserId, 
                    int intWorkStationId, 
                    int intError, 
                    bool IsDischarged, 
                    bool IsOPPackage, 
                    bool IsIntrimBill, 
                    string strSessionID, 
                    int intPatientID, 
                    int intPatientType, 
                    int intDefaultSpecId);
        
        [System.ServiceModel.OperationContractAttribute(Action="CalucalteIPBillForPayout", ReplyAction="http://Wipro.NxG.HIS/BillingFacadeServiceContract/CalucalteIPBillForPayOutRespons" +
            "e")]
        System.Data.DataSet CalucalteIPBillForPayOut(
                    int intTariffID, 
                    int intDefTariffID, 
                    int intEBedType, 
                    bool blnIsServiceTax, 
                    long lngIPID, 
                    string strRegCode, 
                    int intPatientFeeType, 
                    int intBillType, 
                    int intLoacationID, 
                    string strAdmitDateTime, 
                    string strDischargeDateTime, 
                    int intTableID, 
                    string strFilter, 
                    int intLetterID, 
                    int intGradeID, 
                    int intCompanyID, 
                    int intUserId, 
                    int intWorkStationId, 
                    int intError, 
                    bool IsDischarged, 
                    bool IsOPPackage, 
                    bool IsIntrimBill, 
                    string strSessionID, 
                    int intPatientID, 
                    int intPatientType, 
                    int intDefaultSpecId, 
                    string fromDate, 
                    string toDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="CalucalteIPBillForPayout", ReplyAction="http://Wipro.NxG.HIS/BillingFacadeServiceContract/CalucalteIPBillForPayOutRespons" +
            "e")]
        System.Threading.Tasks.Task<System.Data.DataSet> CalucalteIPBillForPayOutAsync(
                    int intTariffID, 
                    int intDefTariffID, 
                    int intEBedType, 
                    bool blnIsServiceTax, 
                    long lngIPID, 
                    string strRegCode, 
                    int intPatientFeeType, 
                    int intBillType, 
                    int intLoacationID, 
                    string strAdmitDateTime, 
                    string strDischargeDateTime, 
                    int intTableID, 
                    string strFilter, 
                    int intLetterID, 
                    int intGradeID, 
                    int intCompanyID, 
                    int intUserId, 
                    int intWorkStationId, 
                    int intError, 
                    bool IsDischarged, 
                    bool IsOPPackage, 
                    bool IsIntrimBill, 
                    string strSessionID, 
                    int intPatientID, 
                    int intPatientType, 
                    int intDefaultSpecId, 
                    string fromDate, 
                    string toDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="CalculateBillExclusion", ReplyAction="http://Wipro.NxG.HIS/BillingFacadeServiceContract/CalculateBillExclusionResponse")]
        System.Data.DataSet CalculateBillExclusion(
                    int intTariffID, 
                    int intDefTariffID, 
                    int intEBedType, 
                    bool blnIsServiceTax, 
                    long lngIPID, 
                    string strRegCode, 
                    int intPatientFeeType, 
                    int intBillType, 
                    int intLoacationID, 
                    string strAdmitDateTime, 
                    string strDischargeDateTime, 
                    int intTableID, 
                    string strFilter, 
                    int intLetterID, 
                    int intGradeID, 
                    int intCompanyID, 
                    int intUserId, 
                    int intWorkStationId, 
                    int intError, 
                    bool IsDischarged, 
                    bool IsOPPackage, 
                    bool IsIntrimBill, 
                    string strSessionID, 
                    int intPatientID, 
                    int intPatientType, 
                    int intDefaultSpecId, 
                    long BillID);
        
        [System.ServiceModel.OperationContractAttribute(Action="CalculateBillExclusion", ReplyAction="http://Wipro.NxG.HIS/BillingFacadeServiceContract/CalculateBillExclusionResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> CalculateBillExclusionAsync(
                    int intTariffID, 
                    int intDefTariffID, 
                    int intEBedType, 
                    bool blnIsServiceTax, 
                    long lngIPID, 
                    string strRegCode, 
                    int intPatientFeeType, 
                    int intBillType, 
                    int intLoacationID, 
                    string strAdmitDateTime, 
                    string strDischargeDateTime, 
                    int intTableID, 
                    string strFilter, 
                    int intLetterID, 
                    int intGradeID, 
                    int intCompanyID, 
                    int intUserId, 
                    int intWorkStationId, 
                    int intError, 
                    bool IsDischarged, 
                    bool IsOPPackage, 
                    bool IsIntrimBill, 
                    string strSessionID, 
                    int intPatientID, 
                    int intPatientType, 
                    int intDefaultSpecId, 
                    long BillID);
        
        [System.ServiceModel.OperationContractAttribute(Action="CalucalteDiscount", ReplyAction="http://Wipro.NxG.HIS/BillingFacadeServiceContract/CalucalteDiscountResponse")]
        System.Data.DataSet CalucalteDiscount();
        
        [System.ServiceModel.OperationContractAttribute(Action="CalucalteDiscount", ReplyAction="http://Wipro.NxG.HIS/BillingFacadeServiceContract/CalucalteDiscountResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> CalucalteDiscountAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="CalucalteIPBillExcludeBedRentals", ReplyAction="http://Wipro.NxG.HIS/BillingFacadeServiceContract/CalucalteIPBillExcludeBedRental" +
            "sResponse")]
        System.Data.DataSet CalucalteIPBillExcludeBedRentals(
                    int intTariffID, 
                    int intDefTariffID, 
                    int intEBedType, 
                    bool blnIsServiceTax, 
                    long lngIPID, 
                    string strRegCode, 
                    int intPatientFeeType, 
                    int intBillType, 
                    int intLoacationID, 
                    string strAdmitDateTime, 
                    string strDischargeDateTime, 
                    int intTableID, 
                    string strFilter, 
                    int intLetterID, 
                    int intGradeID, 
                    int intCompanyID, 
                    int intUserId, 
                    int intWorkStationId, 
                    int intError, 
                    bool IsDischarged, 
                    bool IsOPPackage, 
                    bool IsIntrimBill, 
                    string strSessionID, 
                    int intPatientID, 
                    int intPatientType, 
                    int intDefaultSpecId, 
                    int intExcludeBedRentalDays, 
                    int intEmployeeType);
        
        [System.ServiceModel.OperationContractAttribute(Action="CalucalteIPBillExcludeBedRentals", ReplyAction="http://Wipro.NxG.HIS/BillingFacadeServiceContract/CalucalteIPBillExcludeBedRental" +
            "sResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> CalucalteIPBillExcludeBedRentalsAsync(
                    int intTariffID, 
                    int intDefTariffID, 
                    int intEBedType, 
                    bool blnIsServiceTax, 
                    long lngIPID, 
                    string strRegCode, 
                    int intPatientFeeType, 
                    int intBillType, 
                    int intLoacationID, 
                    string strAdmitDateTime, 
                    string strDischargeDateTime, 
                    int intTableID, 
                    string strFilter, 
                    int intLetterID, 
                    int intGradeID, 
                    int intCompanyID, 
                    int intUserId, 
                    int intWorkStationId, 
                    int intError, 
                    bool IsDischarged, 
                    bool IsOPPackage, 
                    bool IsIntrimBill, 
                    string strSessionID, 
                    int intPatientID, 
                    int intPatientType, 
                    int intDefaultSpecId, 
                    int intExcludeBedRentalDays, 
                    int intEmployeeType);
        
        [System.ServiceModel.OperationContractAttribute(Action="CalucalteIPBillExcludeBedRentalsNew", ReplyAction="http://Wipro.NxG.HIS/BillingFacadeServiceContract/CalucalteIPBillExcludeBedRental" +
            "sNewResponse")]
        System.Data.DataSet CalucalteIPBillExcludeBedRentalsNew(
                    int intTariffID, 
                    int intDefTariffID, 
                    int intEBedType, 
                    bool blnIsServiceTax, 
                    long lngIPID, 
                    string strRegCode, 
                    int intPatientFeeType, 
                    int intBillType, 
                    int intLoacationID, 
                    string strAdmitDateTime, 
                    string strDischargeDateTime, 
                    int intTableID, 
                    string strFilter, 
                    int intLetterID, 
                    int intGradeID, 
                    int intCompanyID, 
                    int intUserId, 
                    int intWorkStationId, 
                    int intError, 
                    bool IsDischarged, 
                    bool IsOPPackage, 
                    bool IsIntrimBill, 
                    string strSessionID, 
                    int intPatientID, 
                    int intPatientType, 
                    int intDefaultSpecId, 
                    int intExcludeBedRentalDays, 
                    int intEmployeeType, 
                    int DeductStartingBedRental);
        
        [System.ServiceModel.OperationContractAttribute(Action="CalucalteIPBillExcludeBedRentalsNew", ReplyAction="http://Wipro.NxG.HIS/BillingFacadeServiceContract/CalucalteIPBillExcludeBedRental" +
            "sNewResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> CalucalteIPBillExcludeBedRentalsNewAsync(
                    int intTariffID, 
                    int intDefTariffID, 
                    int intEBedType, 
                    bool blnIsServiceTax, 
                    long lngIPID, 
                    string strRegCode, 
                    int intPatientFeeType, 
                    int intBillType, 
                    int intLoacationID, 
                    string strAdmitDateTime, 
                    string strDischargeDateTime, 
                    int intTableID, 
                    string strFilter, 
                    int intLetterID, 
                    int intGradeID, 
                    int intCompanyID, 
                    int intUserId, 
                    int intWorkStationId, 
                    int intError, 
                    bool IsDischarged, 
                    bool IsOPPackage, 
                    bool IsIntrimBill, 
                    string strSessionID, 
                    int intPatientID, 
                    int intPatientType, 
                    int intDefaultSpecId, 
                    int intExcludeBedRentalDays, 
                    int intEmployeeType, 
                    int DeductStartingBedRental);
        
        [System.ServiceModel.OperationContractAttribute(Action="CalucalteIPBillExcludeBedRentalsNew_Perf", ReplyAction="http://Wipro.NxG.HIS/BillingFacadeServiceContract/CalucalteIPBillExcludeBedRental" +
            "sNew_PerfResponse")]
        System.Data.DataSet CalucalteIPBillExcludeBedRentalsNew_Perf(
                    int intTariffID, 
                    int intDefTariffID, 
                    int intEBedType, 
                    bool blnIsServiceTax, 
                    long lngIPID, 
                    string strRegCode, 
                    int intPatientFeeType, 
                    int intBillType, 
                    int intLoacationID, 
                    string strAdmitDateTime, 
                    string strDischargeDateTime, 
                    int intTableID, 
                    string strFilter, 
                    int intLetterID, 
                    int intGradeID, 
                    int intCompanyID, 
                    int intUserId, 
                    int intWorkStationId, 
                    int intError, 
                    bool IsDischarged, 
                    bool IsOPPackage, 
                    bool IsIntrimBill, 
                    string strSessionID, 
                    int intPatientID, 
                    int intPatientType, 
                    int intDefaultSpecId, 
                    int intExcludeBedRentalDays, 
                    int intEmployeeType, 
                    int DeductStartingBedRental);
        
        [System.ServiceModel.OperationContractAttribute(Action="CalucalteIPBillExcludeBedRentalsNew_Perf", ReplyAction="http://Wipro.NxG.HIS/BillingFacadeServiceContract/CalucalteIPBillExcludeBedRental" +
            "sNew_PerfResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> CalucalteIPBillExcludeBedRentalsNew_PerfAsync(
                    int intTariffID, 
                    int intDefTariffID, 
                    int intEBedType, 
                    bool blnIsServiceTax, 
                    long lngIPID, 
                    string strRegCode, 
                    int intPatientFeeType, 
                    int intBillType, 
                    int intLoacationID, 
                    string strAdmitDateTime, 
                    string strDischargeDateTime, 
                    int intTableID, 
                    string strFilter, 
                    int intLetterID, 
                    int intGradeID, 
                    int intCompanyID, 
                    int intUserId, 
                    int intWorkStationId, 
                    int intError, 
                    bool IsDischarged, 
                    bool IsOPPackage, 
                    bool IsIntrimBill, 
                    string strSessionID, 
                    int intPatientID, 
                    int intPatientType, 
                    int intDefaultSpecId, 
                    int intExcludeBedRentalDays, 
                    int intEmployeeType, 
                    int DeductStartingBedRental);
        
        [System.ServiceModel.OperationContractAttribute(Action="CalucalteInterimBill", ReplyAction="http://Wipro.NxG.HIS/BillingFacadeServiceContract/CalucalteInterimBillResponse")]
        System.Data.DataSet CalucalteInterimBill(
                    int intTariffID, 
                    int intDefTariffID, 
                    int intEBedType, 
                    bool blnIsServiceTax, 
                    long lngIPID, 
                    string strRegCode, 
                    int intPatientFeeType, 
                    int intBillType, 
                    int intLoacationID, 
                    string strAdmitDateTime, 
                    string strDischargeDateTime, 
                    int intTableID, 
                    string strFilter, 
                    int intLetterID, 
                    int intGradeID, 
                    int intCompanyID, 
                    int intUserId, 
                    int intWorkStationId, 
                    int intError, 
                    bool IsDischarged, 
                    bool IsOPPackage, 
                    bool IsIntrimBill, 
                    string strSessionID, 
                    int intPatientID, 
                    int intPatientType, 
                    int intDefaultSpecId, 
                    int intExcludeBedRentalDays, 
                    int intEmployeeType, 
                    int DeductStartingBedRental, 
                    string fromdate, 
                    string todate);
        
        [System.ServiceModel.OperationContractAttribute(Action="CalucalteInterimBill", ReplyAction="http://Wipro.NxG.HIS/BillingFacadeServiceContract/CalucalteInterimBillResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> CalucalteInterimBillAsync(
                    int intTariffID, 
                    int intDefTariffID, 
                    int intEBedType, 
                    bool blnIsServiceTax, 
                    long lngIPID, 
                    string strRegCode, 
                    int intPatientFeeType, 
                    int intBillType, 
                    int intLoacationID, 
                    string strAdmitDateTime, 
                    string strDischargeDateTime, 
                    int intTableID, 
                    string strFilter, 
                    int intLetterID, 
                    int intGradeID, 
                    int intCompanyID, 
                    int intUserId, 
                    int intWorkStationId, 
                    int intError, 
                    bool IsDischarged, 
                    bool IsOPPackage, 
                    bool IsIntrimBill, 
                    string strSessionID, 
                    int intPatientID, 
                    int intPatientType, 
                    int intDefaultSpecId, 
                    int intExcludeBedRentalDays, 
                    int intEmployeeType, 
                    int DeductStartingBedRental, 
                    string fromdate, 
                    string todate);
        
        [System.ServiceModel.OperationContractAttribute(Action="CalucalteIPBillMODA", ReplyAction="http://Wipro.NxG.HIS/BillingFacadeServiceContract/CalucalteIPBillMODAResponse")]
        System.Data.DataSet CalucalteIPBillMODA(
                    int intTariffID, 
                    int intDefTariffID, 
                    int intEBedType, 
                    bool blnIsServiceTax, 
                    long lngIPID, 
                    string strRegCode, 
                    int intPatientFeeType, 
                    int intBillType, 
                    int intLoacationID, 
                    string strAdmitDateTime, 
                    string strDischargeDateTime, 
                    int intTableID, 
                    string strFilter, 
                    int intLetterID, 
                    int intGradeID, 
                    int intCompanyID, 
                    int intUserId, 
                    int intWorkStationId, 
                    int intError, 
                    bool IsDischarged, 
                    bool IsOPPackage, 
                    bool IsIntrimBill, 
                    string strSessionID, 
                    int intPatientID, 
                    int intPatientType, 
                    int intDefaultSpecId);
        
        [System.ServiceModel.OperationContractAttribute(Action="CalucalteIPBillMODA", ReplyAction="http://Wipro.NxG.HIS/BillingFacadeServiceContract/CalucalteIPBillMODAResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> CalucalteIPBillMODAAsync(
                    int intTariffID, 
                    int intDefTariffID, 
                    int intEBedType, 
                    bool blnIsServiceTax, 
                    long lngIPID, 
                    string strRegCode, 
                    int intPatientFeeType, 
                    int intBillType, 
                    int intLoacationID, 
                    string strAdmitDateTime, 
                    string strDischargeDateTime, 
                    int intTableID, 
                    string strFilter, 
                    int intLetterID, 
                    int intGradeID, 
                    int intCompanyID, 
                    int intUserId, 
                    int intWorkStationId, 
                    int intError, 
                    bool IsDischarged, 
                    bool IsOPPackage, 
                    bool IsIntrimBill, 
                    string strSessionID, 
                    int intPatientID, 
                    int intPatientType, 
                    int intDefaultSpecId);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CalucalteOPBillNew", WrapperNamespace="http://Wipro.NxG.HIS", IsWrapped=true)]
    public partial class CalucalteOPBillNewRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://Wipro.NxG.HIS", Order=0)]
        public System.Data.DataSet ds;
        
        public CalucalteOPBillNewRequest() {
        }
        
        public CalucalteOPBillNewRequest(System.Data.DataSet ds) {
            this.ds = ds;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CalucalteOPBillNewResponse", WrapperNamespace="http://Wipro.NxG.HIS", IsWrapped=true)]
    public partial class CalucalteOPBillNewResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://Wipro.NxG.HIS", Order=0)]
        public System.Data.DataSet CalucalteOPBillNewResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://Wipro.NxG.HIS", Order=1)]
        public string strValue;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://Wipro.NxG.HIS", Order=2)]
        public string StrClinical;
        
        public CalucalteOPBillNewResponse() {
        }
        
        public CalucalteOPBillNewResponse(System.Data.DataSet CalucalteOPBillNewResult, string strValue, string StrClinical) {
            this.CalucalteOPBillNewResult = CalucalteOPBillNewResult;
            this.strValue = strValue;
            this.StrClinical = StrClinical;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface BillingFacadeServiceContractChannel : Reports.BillingFacadeServiceClient.BillingFacadeServiceContract, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BillingFacadeServiceContractClient : System.ServiceModel.ClientBase<Reports.BillingFacadeServiceClient.BillingFacadeServiceContract>, Reports.BillingFacadeServiceClient.BillingFacadeServiceContract {
        
        public BillingFacadeServiceContractClient() {
        }
        
        public BillingFacadeServiceContractClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public BillingFacadeServiceContractClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BillingFacadeServiceContractClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BillingFacadeServiceContractClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void GetBillDetails() {
            base.Channel.GetBillDetails();
        }
        
        public System.Threading.Tasks.Task GetBillDetailsAsync() {
            return base.Channel.GetBillDetailsAsync();
        }
        
        public System.Data.DataSet CalucalteOPBill(System.Data.DataSet ds, int InputWorkStationId) {
            return base.Channel.CalucalteOPBill(ds, InputWorkStationId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> CalucalteOPBillAsync(System.Data.DataSet ds, int InputWorkStationId) {
            return base.Channel.CalucalteOPBillAsync(ds, InputWorkStationId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Reports.BillingFacadeServiceClient.CalucalteOPBillNewResponse Reports.BillingFacadeServiceClient.BillingFacadeServiceContract.CalucalteOPBillNew(Reports.BillingFacadeServiceClient.CalucalteOPBillNewRequest request) {
            return base.Channel.CalucalteOPBillNew(request);
        }
        
        public System.Data.DataSet CalucalteOPBillNew(System.Data.DataSet ds, out string strValue, out string StrClinical) {
            Reports.BillingFacadeServiceClient.CalucalteOPBillNewRequest inValue = new Reports.BillingFacadeServiceClient.CalucalteOPBillNewRequest();
            inValue.ds = ds;
            Reports.BillingFacadeServiceClient.CalucalteOPBillNewResponse retVal = ((Reports.BillingFacadeServiceClient.BillingFacadeServiceContract)(this)).CalucalteOPBillNew(inValue);
            strValue = retVal.strValue;
            StrClinical = retVal.StrClinical;
            return retVal.CalucalteOPBillNewResult;
        }
        
        public System.Threading.Tasks.Task<Reports.BillingFacadeServiceClient.CalucalteOPBillNewResponse> CalucalteOPBillNewAsync(Reports.BillingFacadeServiceClient.CalucalteOPBillNewRequest request) {
            return base.Channel.CalucalteOPBillNewAsync(request);
        }
        
        public System.Data.DataSet CalucalteIPBill(
                    int intTariffID, 
                    int intDefTariffID, 
                    int intEBedType, 
                    bool blnIsServiceTax, 
                    long lngIPID, 
                    string strRegCode, 
                    int intPatientFeeType, 
                    int intBillType, 
                    int intLoacationID, 
                    string strAdmitDateTime, 
                    string strDischargeDateTime, 
                    int intTableID, 
                    string strFilter, 
                    int intLetterID, 
                    int intGradeID, 
                    int intCompanyID, 
                    int intUserId, 
                    int intWorkStationId, 
                    int intError, 
                    bool IsDischarged, 
                    bool IsOPPackage, 
                    bool IsIntrimBill, 
                    string strSessionID, 
                    int intPatientID, 
                    int intPatientType, 
                    int intDefaultSpecId) {
            return base.Channel.CalucalteIPBill(intTariffID, intDefTariffID, intEBedType, blnIsServiceTax, lngIPID, strRegCode, intPatientFeeType, intBillType, intLoacationID, strAdmitDateTime, strDischargeDateTime, intTableID, strFilter, intLetterID, intGradeID, intCompanyID, intUserId, intWorkStationId, intError, IsDischarged, IsOPPackage, IsIntrimBill, strSessionID, intPatientID, intPatientType, intDefaultSpecId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> CalucalteIPBillAsync(
                    int intTariffID, 
                    int intDefTariffID, 
                    int intEBedType, 
                    bool blnIsServiceTax, 
                    long lngIPID, 
                    string strRegCode, 
                    int intPatientFeeType, 
                    int intBillType, 
                    int intLoacationID, 
                    string strAdmitDateTime, 
                    string strDischargeDateTime, 
                    int intTableID, 
                    string strFilter, 
                    int intLetterID, 
                    int intGradeID, 
                    int intCompanyID, 
                    int intUserId, 
                    int intWorkStationId, 
                    int intError, 
                    bool IsDischarged, 
                    bool IsOPPackage, 
                    bool IsIntrimBill, 
                    string strSessionID, 
                    int intPatientID, 
                    int intPatientType, 
                    int intDefaultSpecId) {
            return base.Channel.CalucalteIPBillAsync(intTariffID, intDefTariffID, intEBedType, blnIsServiceTax, lngIPID, strRegCode, intPatientFeeType, intBillType, intLoacationID, strAdmitDateTime, strDischargeDateTime, intTableID, strFilter, intLetterID, intGradeID, intCompanyID, intUserId, intWorkStationId, intError, IsDischarged, IsOPPackage, IsIntrimBill, strSessionID, intPatientID, intPatientType, intDefaultSpecId);
        }
        
        public System.Data.DataSet CalucalteIPBillForPayOut(
                    int intTariffID, 
                    int intDefTariffID, 
                    int intEBedType, 
                    bool blnIsServiceTax, 
                    long lngIPID, 
                    string strRegCode, 
                    int intPatientFeeType, 
                    int intBillType, 
                    int intLoacationID, 
                    string strAdmitDateTime, 
                    string strDischargeDateTime, 
                    int intTableID, 
                    string strFilter, 
                    int intLetterID, 
                    int intGradeID, 
                    int intCompanyID, 
                    int intUserId, 
                    int intWorkStationId, 
                    int intError, 
                    bool IsDischarged, 
                    bool IsOPPackage, 
                    bool IsIntrimBill, 
                    string strSessionID, 
                    int intPatientID, 
                    int intPatientType, 
                    int intDefaultSpecId, 
                    string fromDate, 
                    string toDate) {
            return base.Channel.CalucalteIPBillForPayOut(intTariffID, intDefTariffID, intEBedType, blnIsServiceTax, lngIPID, strRegCode, intPatientFeeType, intBillType, intLoacationID, strAdmitDateTime, strDischargeDateTime, intTableID, strFilter, intLetterID, intGradeID, intCompanyID, intUserId, intWorkStationId, intError, IsDischarged, IsOPPackage, IsIntrimBill, strSessionID, intPatientID, intPatientType, intDefaultSpecId, fromDate, toDate);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> CalucalteIPBillForPayOutAsync(
                    int intTariffID, 
                    int intDefTariffID, 
                    int intEBedType, 
                    bool blnIsServiceTax, 
                    long lngIPID, 
                    string strRegCode, 
                    int intPatientFeeType, 
                    int intBillType, 
                    int intLoacationID, 
                    string strAdmitDateTime, 
                    string strDischargeDateTime, 
                    int intTableID, 
                    string strFilter, 
                    int intLetterID, 
                    int intGradeID, 
                    int intCompanyID, 
                    int intUserId, 
                    int intWorkStationId, 
                    int intError, 
                    bool IsDischarged, 
                    bool IsOPPackage, 
                    bool IsIntrimBill, 
                    string strSessionID, 
                    int intPatientID, 
                    int intPatientType, 
                    int intDefaultSpecId, 
                    string fromDate, 
                    string toDate) {
            return base.Channel.CalucalteIPBillForPayOutAsync(intTariffID, intDefTariffID, intEBedType, blnIsServiceTax, lngIPID, strRegCode, intPatientFeeType, intBillType, intLoacationID, strAdmitDateTime, strDischargeDateTime, intTableID, strFilter, intLetterID, intGradeID, intCompanyID, intUserId, intWorkStationId, intError, IsDischarged, IsOPPackage, IsIntrimBill, strSessionID, intPatientID, intPatientType, intDefaultSpecId, fromDate, toDate);
        }
        
        public System.Data.DataSet CalculateBillExclusion(
                    int intTariffID, 
                    int intDefTariffID, 
                    int intEBedType, 
                    bool blnIsServiceTax, 
                    long lngIPID, 
                    string strRegCode, 
                    int intPatientFeeType, 
                    int intBillType, 
                    int intLoacationID, 
                    string strAdmitDateTime, 
                    string strDischargeDateTime, 
                    int intTableID, 
                    string strFilter, 
                    int intLetterID, 
                    int intGradeID, 
                    int intCompanyID, 
                    int intUserId, 
                    int intWorkStationId, 
                    int intError, 
                    bool IsDischarged, 
                    bool IsOPPackage, 
                    bool IsIntrimBill, 
                    string strSessionID, 
                    int intPatientID, 
                    int intPatientType, 
                    int intDefaultSpecId, 
                    long BillID) {
            return base.Channel.CalculateBillExclusion(intTariffID, intDefTariffID, intEBedType, blnIsServiceTax, lngIPID, strRegCode, intPatientFeeType, intBillType, intLoacationID, strAdmitDateTime, strDischargeDateTime, intTableID, strFilter, intLetterID, intGradeID, intCompanyID, intUserId, intWorkStationId, intError, IsDischarged, IsOPPackage, IsIntrimBill, strSessionID, intPatientID, intPatientType, intDefaultSpecId, BillID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> CalculateBillExclusionAsync(
                    int intTariffID, 
                    int intDefTariffID, 
                    int intEBedType, 
                    bool blnIsServiceTax, 
                    long lngIPID, 
                    string strRegCode, 
                    int intPatientFeeType, 
                    int intBillType, 
                    int intLoacationID, 
                    string strAdmitDateTime, 
                    string strDischargeDateTime, 
                    int intTableID, 
                    string strFilter, 
                    int intLetterID, 
                    int intGradeID, 
                    int intCompanyID, 
                    int intUserId, 
                    int intWorkStationId, 
                    int intError, 
                    bool IsDischarged, 
                    bool IsOPPackage, 
                    bool IsIntrimBill, 
                    string strSessionID, 
                    int intPatientID, 
                    int intPatientType, 
                    int intDefaultSpecId, 
                    long BillID) {
            return base.Channel.CalculateBillExclusionAsync(intTariffID, intDefTariffID, intEBedType, blnIsServiceTax, lngIPID, strRegCode, intPatientFeeType, intBillType, intLoacationID, strAdmitDateTime, strDischargeDateTime, intTableID, strFilter, intLetterID, intGradeID, intCompanyID, intUserId, intWorkStationId, intError, IsDischarged, IsOPPackage, IsIntrimBill, strSessionID, intPatientID, intPatientType, intDefaultSpecId, BillID);
        }
        
        public System.Data.DataSet CalucalteDiscount() {
            return base.Channel.CalucalteDiscount();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> CalucalteDiscountAsync() {
            return base.Channel.CalucalteDiscountAsync();
        }
        
        public System.Data.DataSet CalucalteIPBillExcludeBedRentals(
                    int intTariffID, 
                    int intDefTariffID, 
                    int intEBedType, 
                    bool blnIsServiceTax, 
                    long lngIPID, 
                    string strRegCode, 
                    int intPatientFeeType, 
                    int intBillType, 
                    int intLoacationID, 
                    string strAdmitDateTime, 
                    string strDischargeDateTime, 
                    int intTableID, 
                    string strFilter, 
                    int intLetterID, 
                    int intGradeID, 
                    int intCompanyID, 
                    int intUserId, 
                    int intWorkStationId, 
                    int intError, 
                    bool IsDischarged, 
                    bool IsOPPackage, 
                    bool IsIntrimBill, 
                    string strSessionID, 
                    int intPatientID, 
                    int intPatientType, 
                    int intDefaultSpecId, 
                    int intExcludeBedRentalDays, 
                    int intEmployeeType) {
            return base.Channel.CalucalteIPBillExcludeBedRentals(intTariffID, intDefTariffID, intEBedType, blnIsServiceTax, lngIPID, strRegCode, intPatientFeeType, intBillType, intLoacationID, strAdmitDateTime, strDischargeDateTime, intTableID, strFilter, intLetterID, intGradeID, intCompanyID, intUserId, intWorkStationId, intError, IsDischarged, IsOPPackage, IsIntrimBill, strSessionID, intPatientID, intPatientType, intDefaultSpecId, intExcludeBedRentalDays, intEmployeeType);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> CalucalteIPBillExcludeBedRentalsAsync(
                    int intTariffID, 
                    int intDefTariffID, 
                    int intEBedType, 
                    bool blnIsServiceTax, 
                    long lngIPID, 
                    string strRegCode, 
                    int intPatientFeeType, 
                    int intBillType, 
                    int intLoacationID, 
                    string strAdmitDateTime, 
                    string strDischargeDateTime, 
                    int intTableID, 
                    string strFilter, 
                    int intLetterID, 
                    int intGradeID, 
                    int intCompanyID, 
                    int intUserId, 
                    int intWorkStationId, 
                    int intError, 
                    bool IsDischarged, 
                    bool IsOPPackage, 
                    bool IsIntrimBill, 
                    string strSessionID, 
                    int intPatientID, 
                    int intPatientType, 
                    int intDefaultSpecId, 
                    int intExcludeBedRentalDays, 
                    int intEmployeeType) {
            return base.Channel.CalucalteIPBillExcludeBedRentalsAsync(intTariffID, intDefTariffID, intEBedType, blnIsServiceTax, lngIPID, strRegCode, intPatientFeeType, intBillType, intLoacationID, strAdmitDateTime, strDischargeDateTime, intTableID, strFilter, intLetterID, intGradeID, intCompanyID, intUserId, intWorkStationId, intError, IsDischarged, IsOPPackage, IsIntrimBill, strSessionID, intPatientID, intPatientType, intDefaultSpecId, intExcludeBedRentalDays, intEmployeeType);
        }
        
        public System.Data.DataSet CalucalteIPBillExcludeBedRentalsNew(
                    int intTariffID, 
                    int intDefTariffID, 
                    int intEBedType, 
                    bool blnIsServiceTax, 
                    long lngIPID, 
                    string strRegCode, 
                    int intPatientFeeType, 
                    int intBillType, 
                    int intLoacationID, 
                    string strAdmitDateTime, 
                    string strDischargeDateTime, 
                    int intTableID, 
                    string strFilter, 
                    int intLetterID, 
                    int intGradeID, 
                    int intCompanyID, 
                    int intUserId, 
                    int intWorkStationId, 
                    int intError, 
                    bool IsDischarged, 
                    bool IsOPPackage, 
                    bool IsIntrimBill, 
                    string strSessionID, 
                    int intPatientID, 
                    int intPatientType, 
                    int intDefaultSpecId, 
                    int intExcludeBedRentalDays, 
                    int intEmployeeType, 
                    int DeductStartingBedRental) {
            return base.Channel.CalucalteIPBillExcludeBedRentalsNew(intTariffID, intDefTariffID, intEBedType, blnIsServiceTax, lngIPID, strRegCode, intPatientFeeType, intBillType, intLoacationID, strAdmitDateTime, strDischargeDateTime, intTableID, strFilter, intLetterID, intGradeID, intCompanyID, intUserId, intWorkStationId, intError, IsDischarged, IsOPPackage, IsIntrimBill, strSessionID, intPatientID, intPatientType, intDefaultSpecId, intExcludeBedRentalDays, intEmployeeType, DeductStartingBedRental);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> CalucalteIPBillExcludeBedRentalsNewAsync(
                    int intTariffID, 
                    int intDefTariffID, 
                    int intEBedType, 
                    bool blnIsServiceTax, 
                    long lngIPID, 
                    string strRegCode, 
                    int intPatientFeeType, 
                    int intBillType, 
                    int intLoacationID, 
                    string strAdmitDateTime, 
                    string strDischargeDateTime, 
                    int intTableID, 
                    string strFilter, 
                    int intLetterID, 
                    int intGradeID, 
                    int intCompanyID, 
                    int intUserId, 
                    int intWorkStationId, 
                    int intError, 
                    bool IsDischarged, 
                    bool IsOPPackage, 
                    bool IsIntrimBill, 
                    string strSessionID, 
                    int intPatientID, 
                    int intPatientType, 
                    int intDefaultSpecId, 
                    int intExcludeBedRentalDays, 
                    int intEmployeeType, 
                    int DeductStartingBedRental) {
            return base.Channel.CalucalteIPBillExcludeBedRentalsNewAsync(intTariffID, intDefTariffID, intEBedType, blnIsServiceTax, lngIPID, strRegCode, intPatientFeeType, intBillType, intLoacationID, strAdmitDateTime, strDischargeDateTime, intTableID, strFilter, intLetterID, intGradeID, intCompanyID, intUserId, intWorkStationId, intError, IsDischarged, IsOPPackage, IsIntrimBill, strSessionID, intPatientID, intPatientType, intDefaultSpecId, intExcludeBedRentalDays, intEmployeeType, DeductStartingBedRental);
        }
        
        public System.Data.DataSet CalucalteIPBillExcludeBedRentalsNew_Perf(
                    int intTariffID, 
                    int intDefTariffID, 
                    int intEBedType, 
                    bool blnIsServiceTax, 
                    long lngIPID, 
                    string strRegCode, 
                    int intPatientFeeType, 
                    int intBillType, 
                    int intLoacationID, 
                    string strAdmitDateTime, 
                    string strDischargeDateTime, 
                    int intTableID, 
                    string strFilter, 
                    int intLetterID, 
                    int intGradeID, 
                    int intCompanyID, 
                    int intUserId, 
                    int intWorkStationId, 
                    int intError, 
                    bool IsDischarged, 
                    bool IsOPPackage, 
                    bool IsIntrimBill, 
                    string strSessionID, 
                    int intPatientID, 
                    int intPatientType, 
                    int intDefaultSpecId, 
                    int intExcludeBedRentalDays, 
                    int intEmployeeType, 
                    int DeductStartingBedRental) {
            return base.Channel.CalucalteIPBillExcludeBedRentalsNew_Perf(intTariffID, intDefTariffID, intEBedType, blnIsServiceTax, lngIPID, strRegCode, intPatientFeeType, intBillType, intLoacationID, strAdmitDateTime, strDischargeDateTime, intTableID, strFilter, intLetterID, intGradeID, intCompanyID, intUserId, intWorkStationId, intError, IsDischarged, IsOPPackage, IsIntrimBill, strSessionID, intPatientID, intPatientType, intDefaultSpecId, intExcludeBedRentalDays, intEmployeeType, DeductStartingBedRental);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> CalucalteIPBillExcludeBedRentalsNew_PerfAsync(
                    int intTariffID, 
                    int intDefTariffID, 
                    int intEBedType, 
                    bool blnIsServiceTax, 
                    long lngIPID, 
                    string strRegCode, 
                    int intPatientFeeType, 
                    int intBillType, 
                    int intLoacationID, 
                    string strAdmitDateTime, 
                    string strDischargeDateTime, 
                    int intTableID, 
                    string strFilter, 
                    int intLetterID, 
                    int intGradeID, 
                    int intCompanyID, 
                    int intUserId, 
                    int intWorkStationId, 
                    int intError, 
                    bool IsDischarged, 
                    bool IsOPPackage, 
                    bool IsIntrimBill, 
                    string strSessionID, 
                    int intPatientID, 
                    int intPatientType, 
                    int intDefaultSpecId, 
                    int intExcludeBedRentalDays, 
                    int intEmployeeType, 
                    int DeductStartingBedRental) {
            return base.Channel.CalucalteIPBillExcludeBedRentalsNew_PerfAsync(intTariffID, intDefTariffID, intEBedType, blnIsServiceTax, lngIPID, strRegCode, intPatientFeeType, intBillType, intLoacationID, strAdmitDateTime, strDischargeDateTime, intTableID, strFilter, intLetterID, intGradeID, intCompanyID, intUserId, intWorkStationId, intError, IsDischarged, IsOPPackage, IsIntrimBill, strSessionID, intPatientID, intPatientType, intDefaultSpecId, intExcludeBedRentalDays, intEmployeeType, DeductStartingBedRental);
        }
        
        public System.Data.DataSet CalucalteInterimBill(
                    int intTariffID, 
                    int intDefTariffID, 
                    int intEBedType, 
                    bool blnIsServiceTax, 
                    long lngIPID, 
                    string strRegCode, 
                    int intPatientFeeType, 
                    int intBillType, 
                    int intLoacationID, 
                    string strAdmitDateTime, 
                    string strDischargeDateTime, 
                    int intTableID, 
                    string strFilter, 
                    int intLetterID, 
                    int intGradeID, 
                    int intCompanyID, 
                    int intUserId, 
                    int intWorkStationId, 
                    int intError, 
                    bool IsDischarged, 
                    bool IsOPPackage, 
                    bool IsIntrimBill, 
                    string strSessionID, 
                    int intPatientID, 
                    int intPatientType, 
                    int intDefaultSpecId, 
                    int intExcludeBedRentalDays, 
                    int intEmployeeType, 
                    int DeductStartingBedRental, 
                    string fromdate, 
                    string todate) {
            return base.Channel.CalucalteInterimBill(intTariffID, intDefTariffID, intEBedType, blnIsServiceTax, lngIPID, strRegCode, intPatientFeeType, intBillType, intLoacationID, strAdmitDateTime, strDischargeDateTime, intTableID, strFilter, intLetterID, intGradeID, intCompanyID, intUserId, intWorkStationId, intError, IsDischarged, IsOPPackage, IsIntrimBill, strSessionID, intPatientID, intPatientType, intDefaultSpecId, intExcludeBedRentalDays, intEmployeeType, DeductStartingBedRental, fromdate, todate);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> CalucalteInterimBillAsync(
                    int intTariffID, 
                    int intDefTariffID, 
                    int intEBedType, 
                    bool blnIsServiceTax, 
                    long lngIPID, 
                    string strRegCode, 
                    int intPatientFeeType, 
                    int intBillType, 
                    int intLoacationID, 
                    string strAdmitDateTime, 
                    string strDischargeDateTime, 
                    int intTableID, 
                    string strFilter, 
                    int intLetterID, 
                    int intGradeID, 
                    int intCompanyID, 
                    int intUserId, 
                    int intWorkStationId, 
                    int intError, 
                    bool IsDischarged, 
                    bool IsOPPackage, 
                    bool IsIntrimBill, 
                    string strSessionID, 
                    int intPatientID, 
                    int intPatientType, 
                    int intDefaultSpecId, 
                    int intExcludeBedRentalDays, 
                    int intEmployeeType, 
                    int DeductStartingBedRental, 
                    string fromdate, 
                    string todate) {
            return base.Channel.CalucalteInterimBillAsync(intTariffID, intDefTariffID, intEBedType, blnIsServiceTax, lngIPID, strRegCode, intPatientFeeType, intBillType, intLoacationID, strAdmitDateTime, strDischargeDateTime, intTableID, strFilter, intLetterID, intGradeID, intCompanyID, intUserId, intWorkStationId, intError, IsDischarged, IsOPPackage, IsIntrimBill, strSessionID, intPatientID, intPatientType, intDefaultSpecId, intExcludeBedRentalDays, intEmployeeType, DeductStartingBedRental, fromdate, todate);
        }
        
        public System.Data.DataSet CalucalteIPBillMODA(
                    int intTariffID, 
                    int intDefTariffID, 
                    int intEBedType, 
                    bool blnIsServiceTax, 
                    long lngIPID, 
                    string strRegCode, 
                    int intPatientFeeType, 
                    int intBillType, 
                    int intLoacationID, 
                    string strAdmitDateTime, 
                    string strDischargeDateTime, 
                    int intTableID, 
                    string strFilter, 
                    int intLetterID, 
                    int intGradeID, 
                    int intCompanyID, 
                    int intUserId, 
                    int intWorkStationId, 
                    int intError, 
                    bool IsDischarged, 
                    bool IsOPPackage, 
                    bool IsIntrimBill, 
                    string strSessionID, 
                    int intPatientID, 
                    int intPatientType, 
                    int intDefaultSpecId) {
            return base.Channel.CalucalteIPBillMODA(intTariffID, intDefTariffID, intEBedType, blnIsServiceTax, lngIPID, strRegCode, intPatientFeeType, intBillType, intLoacationID, strAdmitDateTime, strDischargeDateTime, intTableID, strFilter, intLetterID, intGradeID, intCompanyID, intUserId, intWorkStationId, intError, IsDischarged, IsOPPackage, IsIntrimBill, strSessionID, intPatientID, intPatientType, intDefaultSpecId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> CalucalteIPBillMODAAsync(
                    int intTariffID, 
                    int intDefTariffID, 
                    int intEBedType, 
                    bool blnIsServiceTax, 
                    long lngIPID, 
                    string strRegCode, 
                    int intPatientFeeType, 
                    int intBillType, 
                    int intLoacationID, 
                    string strAdmitDateTime, 
                    string strDischargeDateTime, 
                    int intTableID, 
                    string strFilter, 
                    int intLetterID, 
                    int intGradeID, 
                    int intCompanyID, 
                    int intUserId, 
                    int intWorkStationId, 
                    int intError, 
                    bool IsDischarged, 
                    bool IsOPPackage, 
                    bool IsIntrimBill, 
                    string strSessionID, 
                    int intPatientID, 
                    int intPatientType, 
                    int intDefaultSpecId) {
            return base.Channel.CalucalteIPBillMODAAsync(intTariffID, intDefTariffID, intEBedType, blnIsServiceTax, lngIPID, strRegCode, intPatientFeeType, intBillType, intLoacationID, strAdmitDateTime, strDischargeDateTime, intTableID, strFilter, intLetterID, intGradeID, intCompanyID, intUserId, intWorkStationId, intError, IsDischarged, IsOPPackage, IsIntrimBill, strSessionID, intPatientID, intPatientType, intDefaultSpecId);
        }
    }
}
