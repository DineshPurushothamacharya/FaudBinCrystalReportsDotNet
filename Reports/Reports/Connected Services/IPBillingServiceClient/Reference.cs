//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Reports.IPBillingServiceClient {
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3761.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
    public partial class NextGenCustomException : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string errorCodeField;
        
        private string errorDetailsField;
        
        private string errorMessageField;
        
        private string errorSourceField;
        
        private string errorStackTraceField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=0)]
        public string ErrorCode {
            get {
                return this.errorCodeField;
            }
            set {
                this.errorCodeField = value;
                this.RaisePropertyChanged("ErrorCode");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=1)]
        public string ErrorDetails {
            get {
                return this.errorDetailsField;
            }
            set {
                this.errorDetailsField = value;
                this.RaisePropertyChanged("ErrorDetails");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=2)]
        public string ErrorMessage {
            get {
                return this.errorMessageField;
            }
            set {
                this.errorMessageField = value;
                this.RaisePropertyChanged("ErrorMessage");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=3)]
        public string ErrorSource {
            get {
                return this.errorSourceField;
            }
            set {
                this.errorSourceField = value;
                this.RaisePropertyChanged("ErrorSource");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=4)]
        public string ErrorStackTrace {
            get {
                return this.errorStackTraceField;
            }
            set {
                this.errorStackTraceField = value;
                this.RaisePropertyChanged("ErrorStackTrace");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://Wipro.NxG.HIS", ConfigurationName="IPBillingServiceClient.IPBillingServiceContract")]
    public interface IPBillingServiceContract {
        
        [System.ServiceModel.OperationContractAttribute(Action="GetInpatientDiscountData", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetInpatientDiscountDataResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/GetInpatientDiscountDataNextGenCust" +
            "omExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetInpatientDiscountData(string strType, int intAdmissionID, int intUserID, int intWorStationID, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetInpatientDiscountData", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetInpatientDiscountDataResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetInpatientDiscountDataAsync(string strType, int intAdmissionID, int intUserID, int intWorStationID, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetPackageInfoDetails", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetPackageInfoDetailsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/GetPackageInfoDetailsNextGenCustomE" +
            "xceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetPackageInfoDetails(string strAdmissionNM, string strTBL, int intUserID, int intWorStationID, int intHospitalID);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetPackageInfoDetails", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetPackageInfoDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetPackageInfoDetailsAsync(string strAdmissionNM, string strTBL, int intUserID, int intWorStationID, int intHospitalID);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetPackageList", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetPackageListResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/GetPackageListNextGenCustomExceptio" +
            "nFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetPackageList(int intPackageID, string strTBL, int intLanguageID, int intUserID, int intWorStationID, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetPackageList", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetPackageListResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetPackageListAsync(int intPackageID, string strTBL, int intLanguageID, int intUserID, int intWorStationID, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="SavePatientPackageorders", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/SavePatientPackageordersResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/SavePatientPackageordersNextGenCust" +
            "omExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void SavePatientPackageorders(int intAdmissionNo, int intCompanyID, System.Data.DataTable dtPkgDtl, int intUserID, int intWorkStationID, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="SavePatientPackageorders", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/SavePatientPackageordersResponse")]
        System.Threading.Tasks.Task SavePatientPackageordersAsync(int intAdmissionNo, int intCompanyID, System.Data.DataTable dtPkgDtl, int intUserID, int intWorkStationID, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="DeletePatientPackageorders", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/DeletePatientPackageordersResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/DeletePatientPackageordersNextGenCu" +
            "stomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void DeletePatientPackageorders(int intIPID, int intUserID, int intWorkStationID, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="DeletePatientPackageorders", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/DeletePatientPackageordersResponse")]
        System.Threading.Tasks.Task DeletePatientPackageordersAsync(int intIPID, int intUserID, int intWorkStationID, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="SaveBillClearenceStatus", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/SaveBillClearenceStatusResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/SaveBillClearenceStatusNextGenCusto" +
            "mExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int SaveBillClearenceStatus(int ScheduleID, byte Isverifyed, string Remarks, int intUserID, int WorkStationID, System.DateTime CreateDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="SaveBillClearenceStatus", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/SaveBillClearenceStatusResponse")]
        System.Threading.Tasks.Task<int> SaveBillClearenceStatusAsync(int ScheduleID, byte Isverifyed, string Remarks, int intUserID, int WorkStationID, System.DateTime CreateDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetScheduleTime", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetScheduleTimeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/GetScheduleTimeNextGenCustomExcepti" +
            "onFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetScheduleTime();
        
        [System.ServiceModel.OperationContractAttribute(Action="GetScheduleTime", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetScheduleTimeResponse")]
        System.Threading.Tasks.Task<string> GetScheduleTimeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="UpdateScheduleTime", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/UpdateScheduleTimeResponse")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void UpdateScheduleTime(string scheduleTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="UpdateScheduleTime", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/UpdateScheduleTimeResponse")]
        System.Threading.Tasks.Task UpdateScheduleTimeAsync(string scheduleTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="IsProcessRunning", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/IsProcessRunningResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/IsProcessRunningNextGenCustomExcept" +
            "ionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool IsProcessRunning();
        
        [System.ServiceModel.OperationContractAttribute(Action="IsProcessRunning", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/IsProcessRunningResponse")]
        System.Threading.Tasks.Task<bool> IsProcessRunningAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="UpdateProcessStartedState", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/UpdateProcessStartedStateResponse")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void UpdateProcessStartedState(bool processRunning);
        
        [System.ServiceModel.OperationContractAttribute(Action="UpdateProcessStartedState", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/UpdateProcessStartedStateResponse")]
        System.Threading.Tasks.Task UpdateProcessStartedStateAsync(bool processRunning);
        
        [System.ServiceModel.OperationContractAttribute(Action="LastProcessTime", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/LastProcessTimeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/LastProcessTimeNextGenCustomExcepti" +
            "onFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.DateTime LastProcessTime();
        
        [System.ServiceModel.OperationContractAttribute(Action="LastProcessTime", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/LastProcessTimeResponse")]
        System.Threading.Tasks.Task<System.DateTime> LastProcessTimeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="UpdateLastProcessDate", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/UpdateLastProcessDateResponse")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void UpdateLastProcessDate();
        
        [System.ServiceModel.OperationContractAttribute(Action="UpdateLastProcessDate", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/UpdateLastProcessDateResponse")]
        System.Threading.Tasks.Task UpdateLastProcessDateAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="GetCancelBillsDetails", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetCancelBillsDetailsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/GetCancelBillsDetailsNextGenCustomE" +
            "xceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetCancelBillsDetails(int intIpNo, int intWorkStationID, int intError, int intUserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetCancelBillsDetails", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetCancelBillsDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetCancelBillsDetailsAsync(int intIpNo, int intWorkStationID, int intError, int intUserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetPatientBills", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetPatientBillsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/GetPatientBillsNextGenCustomExcepti" +
            "onFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetPatientBills(string strFilter, int intUserID, int intWorkStationID, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetPatientBills", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetPatientBillsResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetPatientBillsAsync(string strFilter, int intUserID, int intWorkStationID, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="CalculateBillNew1", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/CalculateBillExcludeBedRentalNewRes" +
            "ponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/CalculateBillExcludeBedRentalNewNex" +
            "tGenCustomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet CalculateBillExcludeBedRentalNew(
                    System.Data.DataSet dsFinal, 
                    int intTariffID, 
                    int intDefTariffID, 
                    int intEBedType, 
                    long lngIPID, 
                    string strRegCode, 
                    int intPatientFeeType, 
                    int intBillType, 
                    int intLoacationID, 
                    string strAdmitDateTime, 
                    string strDischargeDateTime, 
                    int intTableID, 
                    string strFilter, 
                    int intUserId, 
                    int intWorkStationId, 
                    int intError, 
                    int intPatientType, 
                    int intExcludeBedRentalDays, 
                    int intEmployeeType, 
                    int DeductStartingBedRental);
        
        [System.ServiceModel.OperationContractAttribute(Action="CalculateBillNew1", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/CalculateBillExcludeBedRentalNewRes" +
            "ponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> CalculateBillExcludeBedRentalNewAsync(
                    System.Data.DataSet dsFinal, 
                    int intTariffID, 
                    int intDefTariffID, 
                    int intEBedType, 
                    long lngIPID, 
                    string strRegCode, 
                    int intPatientFeeType, 
                    int intBillType, 
                    int intLoacationID, 
                    string strAdmitDateTime, 
                    string strDischargeDateTime, 
                    int intTableID, 
                    string strFilter, 
                    int intUserId, 
                    int intWorkStationId, 
                    int intError, 
                    int intPatientType, 
                    int intExcludeBedRentalDays, 
                    int intEmployeeType, 
                    int DeductStartingBedRental);
        
        [System.ServiceModel.OperationContractAttribute(Action="CalculateInterimBill", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/CalculateInterimBillResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/CalculateInterimBillNextGenCustomEx" +
            "ceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet CalculateInterimBill(
                    System.Data.DataSet dsFinal, 
                    int intTariffID, 
                    int intDefTariffID, 
                    int intEBedType, 
                    long lngIPID, 
                    string strRegCode, 
                    int intPatientFeeType, 
                    int intBillType, 
                    int intLoacationID, 
                    string strAdmitDateTime, 
                    string strDischargeDateTime, 
                    int intTableID, 
                    string strFilter, 
                    int intUserId, 
                    int intWorkStationId, 
                    int intError, 
                    int intPatientType, 
                    int intExcludeBedRentalDays, 
                    int intEmployeeType, 
                    int DeductStartingBedRental, 
                    string fromdate, 
                    string todate);
        
        [System.ServiceModel.OperationContractAttribute(Action="CalculateInterimBill", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/CalculateInterimBillResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> CalculateInterimBillAsync(
                    System.Data.DataSet dsFinal, 
                    int intTariffID, 
                    int intDefTariffID, 
                    int intEBedType, 
                    long lngIPID, 
                    string strRegCode, 
                    int intPatientFeeType, 
                    int intBillType, 
                    int intLoacationID, 
                    string strAdmitDateTime, 
                    string strDischargeDateTime, 
                    int intTableID, 
                    string strFilter, 
                    int intUserId, 
                    int intWorkStationId, 
                    int intError, 
                    int intPatientType, 
                    int intExcludeBedRentalDays, 
                    int intEmployeeType, 
                    int DeductStartingBedRental, 
                    string fromdate, 
                    string todate);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetPackageItems", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetPackageItemsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/GetPackageItemsNextGenCustomExcepti" +
            "onFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetPackageItems(long lngIPID, int intTariffID, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetPackageItems", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetPackageItemsResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetPackageItemsAsync(long lngIPID, int intTariffID, int intUserId, int intWorkStationId, int intError);
        
        // CODEGEN: Parameter 'intFeatureId' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlElementAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="ModifyPatientAdmitDate", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/ModifyPatientAdmitDateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/ModifyPatientAdmitDateNextGenCustom" +
            "ExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        Reports.IPBillingServiceClient.ModifyPatientAdmitDateResponse ModifyPatientAdmitDate(Reports.IPBillingServiceClient.ModifyPatientAdmitDateRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="ModifyPatientAdmitDate", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/ModifyPatientAdmitDateResponse")]
        System.Threading.Tasks.Task<Reports.IPBillingServiceClient.ModifyPatientAdmitDateResponse> ModifyPatientAdmitDateAsync(Reports.IPBillingServiceClient.ModifyPatientAdmitDateRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="BedDetails", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/BedDetailsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/BedDetailsNextGenCustomExceptionFau" +
            "lt", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet BedDetails(int intBedId, System.DateTime dtDateTime, string strTbl, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="BedDetails", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/BedDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> BedDetailsAsync(int intBedId, System.DateTime dtDateTime, string strTbl, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="SaveDischargeMODA", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/SaveDischargeMODAResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/SaveDischargeMODANextGenCustomExcep" +
            "tionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool SaveDischargeMODA(int intIPID, int intDischargeReason, string strExpiryDateTime, string strRemarks, int intPatientType, int intUserId, int intWorkStationId, int intError, int DischargeStatus, int intToHospitalId, int DAMADischargeReasonId);
        
        [System.ServiceModel.OperationContractAttribute(Action="SaveDischargeMODA", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/SaveDischargeMODAResponse")]
        System.Threading.Tasks.Task<bool> SaveDischargeMODAAsync(int intIPID, int intDischargeReason, string strExpiryDateTime, string strRemarks, int intPatientType, int intUserId, int intWorkStationId, int intError, int DischargeStatus, int intToHospitalId, int DAMADischargeReasonId);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetIPBillDetailsAdv", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetIPBillDetailsAdvResponse")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void GetIPBillDetailsAdv();
        
        [System.ServiceModel.OperationContractAttribute(Action="GetIPBillDetailsAdv", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetIPBillDetailsAdvResponse")]
        System.Threading.Tasks.Task GetIPBillDetailsAdvAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchConsultationOrderIDDetails", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/FetchConsultationOrderIDDetailsResp" +
            "onse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/FetchConsultationOrderIDDetailsNext" +
            "GenCustomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet FetchConsultationOrderIDDetails(int startRow, int EndRow, int TableID, string FilterCondition, int UserID, int WorkStationID, int Featureid, int Functionid, string CallContext, string OrderType, int TagId);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchConsultationOrderIDDetails", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/FetchConsultationOrderIDDetailsResp" +
            "onse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchConsultationOrderIDDetailsAsync(int startRow, int EndRow, int TableID, string FilterCondition, int UserID, int WorkStationID, int Featureid, int Functionid, string CallContext, string OrderType, int TagId);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetProcdureOrderItemDetails", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetProcdureOrderItemDetailsResponse" +
            "")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/GetProcdureOrderItemDetailsNextGenC" +
            "ustomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetProcdureOrderItemDetails(long lngIPID, int OrderID, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetProcdureOrderItemDetails", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetProcdureOrderItemDetailsResponse" +
            "")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetProcdureOrderItemDetailsAsync(long lngIPID, int OrderID, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchProcdureOrderIDs", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/FetchProcdureOrderIDsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/FetchProcdureOrderIDsNextGenCustomE" +
            "xceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet FetchProcdureOrderIDs(int startRow, int EndRow, int TableID, string FilterCondition, int UserID, int WorkStationID, int Featureid, int Functionid, string CallContext, string OrderType, int TagId);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchProcdureOrderIDs", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/FetchProcdureOrderIDsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchProcdureOrderIDsAsync(int startRow, int EndRow, int TableID, string FilterCondition, int UserID, int WorkStationID, int Featureid, int Functionid, string CallContext, string OrderType, int TagId);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchInvestigationOrderIDs", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/FetchInvestigationOrderIDsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/FetchInvestigationOrderIDsNextGenCu" +
            "stomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet FetchInvestigationOrderIDs(int startRow, int EndRow, int TableID, string FilterCondition, int UserID, int WorkStationID, int Featureid, int Functionid, string CallContext, string OrderType, int TagId);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchInvestigationOrderIDs", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/FetchInvestigationOrderIDsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchInvestigationOrderIDsAsync(int startRow, int EndRow, int TableID, string FilterCondition, int UserID, int WorkStationID, int Featureid, int Functionid, string CallContext, string OrderType, int TagId);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchConsumptionOrderIDs", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/FetchConsumptionOrderIDsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/FetchConsumptionOrderIDsNextGenCust" +
            "omExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet FetchConsumptionOrderIDs(int startRow, int EndRow, int TableID, string FilterCondition, int UserID, int WorkStationID, int Featureid, int Functionid, string CallContext, string OrderType, int TagId);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchConsumptionOrderIDs", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/FetchConsumptionOrderIDsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchConsumptionOrderIDsAsync(int startRow, int EndRow, int TableID, string FilterCondition, int UserID, int WorkStationID, int Featureid, int Functionid, string CallContext, string OrderType, int TagId);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchPatientDischargeClearance", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/FetchPatientDischargeClearanceRespo" +
            "nse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/FetchPatientDischargeClearanceNextG" +
            "enCustomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet FetchPatientDischargeClearance(int intPatientid, int intFeatureId, int intFunctionId, string strCallContext, int intUserid, int intWorkstationid, int error);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchPatientDischargeClearance", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/FetchPatientDischargeClearanceRespo" +
            "nse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchPatientDischargeClearanceAsync(int intPatientid, int intFeatureId, int intFunctionId, string strCallContext, int intUserid, int intWorkstationid, int error);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetTestRequisitionDetailsWARD", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetTestRequisitionDetailsWARDRespon" +
            "se")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/GetTestRequisitionDetailsWARDNextGe" +
            "nCustomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetTestRequisitionDetailsWARD(bool blnWithFlow, long lngOrderId, string strTableId, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetTestRequisitionDetailsWARD", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetTestRequisitionDetailsWARDRespon" +
            "se")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetTestRequisitionDetailsWARDAsync(bool blnWithFlow, long lngOrderId, string strTableId, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchPatientDetails", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/FetchPatientDetailsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/FetchPatientDetailsNextGenCustomExc" +
            "eptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet FetchPatientDetails(long lngIPNo, string strRegCode, string strType, bool blnDeleted, int intUserId, int intWorkStationId, int intError, int intLanguageID);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchPatientDetails", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/FetchPatientDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchPatientDetailsAsync(long lngIPNo, string strRegCode, string strType, bool blnDeleted, int intUserId, int intWorkStationId, int intError, int intLanguageID);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchPatientBeds", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/FetchPatientBedsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/FetchPatientBedsNextGenCustomExcept" +
            "ionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet FetchPatientBeds(long lngIPNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchPatientBeds", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/FetchPatientBedsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchPatientBedsAsync(long lngIPNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetBedTransferDetails", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetBedTransferDetailsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/GetBedTransferDetailsNextGenCustomE" +
            "xceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetBedTransferDetails(long lngIPID, int intTariffID, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetBedTransferDetails", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetBedTransferDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetBedTransferDetailsAsync(long lngIPID, int intTariffID, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="SaveBill", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/SaveBillResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/SaveBillNextGenCustomExceptionFault" +
            "", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string SaveBill(System.Data.DataSet dsBill, string strIntrimBill, int HospitalID, int UserID, int WorkStationID, bool CheckForDuplicates);
        
        [System.ServiceModel.OperationContractAttribute(Action="SaveBill", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/SaveBillResponse")]
        System.Threading.Tasks.Task<string> SaveBillAsync(System.Data.DataSet dsBill, string strIntrimBill, int HospitalID, int UserID, int WorkStationID, bool CheckForDuplicates);
        
        [System.ServiceModel.OperationContractAttribute(Action="SaveInterimMainBill", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/SaveInterimMainBillResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/SaveInterimMainBillNextGenCustomExc" +
            "eptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string SaveInterimMainBill(int IPId, string billtype, int HospitalID, int UserID, int WorkStationID, int FeatureId, int FunctionId, string strCallcontext, int Error);
        
        [System.ServiceModel.OperationContractAttribute(Action="SaveInterimMainBill", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/SaveInterimMainBillResponse")]
        System.Threading.Tasks.Task<string> SaveInterimMainBillAsync(int IPId, string billtype, int HospitalID, int UserID, int WorkStationID, int FeatureId, int FunctionId, string strCallcontext, int Error);
        
        [System.ServiceModel.OperationContractAttribute(Action="SaveBillDispatch", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/SaveBillDispatchResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/SaveBillDispatchNextGenCustomExcept" +
            "ionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int SaveBillDispatch(int Billid, int IPID, string strDispatchto, string strRemarks, int UserID, int WorkStationID, int FeatureId, int FunctionId, string strCallcontext, int Error);
        
        [System.ServiceModel.OperationContractAttribute(Action="SaveBillDispatch", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/SaveBillDispatchResponse")]
        System.Threading.Tasks.Task<int> SaveBillDispatchAsync(int Billid, int IPID, string strDispatchto, string strRemarks, int UserID, int WorkStationID, int FeatureId, int FunctionId, string strCallcontext, int Error);
        
        [System.ServiceModel.OperationContractAttribute(Action="DischargePatient", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/DischargePatientResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/DischargePatientNextGenCustomExcept" +
            "ionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool DischargePatient(long lngIPID, int intUserID, int IntWorkStationID, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="DischargePatient", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/DischargePatientResponse")]
        System.Threading.Tasks.Task<bool> DischargePatientAsync(long lngIPID, int intUserID, int IntWorkStationID, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="DischargeCancelReason", ReplyAction="DischargeCancelReason")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/DischargeCancelReasonNextGenCustomE" +
            "xceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool DischargeCancelReason(long lngIPID, int intUserID, int IntWorkStationID, int intError, int DischareCancelReason);
        
        [System.ServiceModel.OperationContractAttribute(Action="DischargeCancelReason", ReplyAction="DischargeCancelReason")]
        System.Threading.Tasks.Task<bool> DischargeCancelReasonAsync(long lngIPID, int intUserID, int IntWorkStationID, int intError, int DischareCancelReason);
        
        [System.ServiceModel.OperationContractAttribute(Action="DischargeCancelReasonMODA", ReplyAction="DischargeCancelReasonMODA")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/DischargeCancelReasonMODANextGenCus" +
            "tomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool DischargeCancelReasonMODA(long lngIPID, int intUserID, int IntWorkStationID, int intError, int DischareCancelReason);
        
        [System.ServiceModel.OperationContractAttribute(Action="DischargeCancelReasonMODA", ReplyAction="DischargeCancelReasonMODA")]
        System.Threading.Tasks.Task<bool> DischargeCancelReasonMODAAsync(long lngIPID, int intUserID, int IntWorkStationID, int intError, int DischareCancelReason);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetDischargeCancelReasons", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetDischargeCancelReasonsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/GetDischargeCancelReasonsNextGenCus" +
            "tomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetDischargeCancelReasons(int Type, int userid, int Error);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetDischargeCancelReasons", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetDischargeCancelReasonsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetDischargeCancelReasonsAsync(int Type, int userid, int Error);
        
        [System.ServiceModel.OperationContractAttribute(Action="CancelDischarge", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/CancelDischargeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/CancelDischargeNextGenCustomExcepti" +
            "onFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool CancelDischarge(long lngIPID, int intUserID, int IntWorkStationID, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="CancelDischarge", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/CancelDischargeResponse")]
        System.Threading.Tasks.Task<bool> CancelDischargeAsync(long lngIPID, int intUserID, int IntWorkStationID, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetPendingOrders", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetPendingOrdersResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/GetPendingOrdersNextGenCustomExcept" +
            "ionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetPendingOrders(long lngIPID, int intUserID, int IntWorkStationID, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetPendingOrders", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetPendingOrdersResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetPendingOrdersAsync(long lngIPID, int intUserID, int IntWorkStationID, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetDiscountDetails", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetDiscountDetailsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/GetDiscountDetailsNextGenCustomExce" +
            "ptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetDiscountDetails(long lngBillID, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetDiscountDetails", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetDiscountDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetDiscountDetailsAsync(long lngBillID, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetPatientBillDetails", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetPatientBillDetailsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/GetPatientBillDetailsNextGenCustomE" +
            "xceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetPatientBillDetails(long lngIPID, int intUserID, int intWorkStationID, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetPatientBillDetails", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetPatientBillDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetPatientBillDetailsAsync(long lngIPID, int intUserID, int intWorkStationID, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetServiceItemPrices", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetServiceItemPricesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/GetServiceItemPricesNextGenCustomEx" +
            "ceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetServiceItemPrices(System.Data.DataSet DsItemsList, string OrderDate, int HospitalID, int TariffID, int BedTypeID, int OrderTypeID, string TableID, int UserID, int WorkStationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetServiceItemPrices", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetServiceItemPricesResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetServiceItemPricesAsync(System.Data.DataSet DsItemsList, string OrderDate, int HospitalID, int TariffID, int BedTypeID, int OrderTypeID, string TableID, int UserID, int WorkStationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="SaveMiscOrder", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/SaveMiscOrderResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/SaveMiscOrderNextGenCustomException" +
            "Fault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int SaveMiscOrder(int AdmissionID, System.Data.DataSet DsItems, int UserID, int WorkStationID, int Error);
        
        [System.ServiceModel.OperationContractAttribute(Action="SaveMiscOrder", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/SaveMiscOrderResponse")]
        System.Threading.Tasks.Task<int> SaveMiscOrderAsync(int AdmissionID, System.Data.DataSet DsItems, int UserID, int WorkStationID, int Error);
        
        [System.ServiceModel.OperationContractAttribute(Action="UpdateMiscOrder", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/UpdateMiscOrderResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/UpdateMiscOrderNextGenCustomExcepti" +
            "onFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int UpdateMiscOrder(System.Data.DataSet DsItems, int UserID, int WorkStationID, int Error);
        
        [System.ServiceModel.OperationContractAttribute(Action="UpdateMiscOrder", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/UpdateMiscOrderResponse")]
        System.Threading.Tasks.Task<int> UpdateMiscOrderAsync(System.Data.DataSet DsItems, int UserID, int WorkStationID, int Error);
        
        [System.ServiceModel.OperationContractAttribute(Action="DeleteMiscOrder", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/DeleteMiscOrderResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/DeleteMiscOrderNextGenCustomExcepti" +
            "onFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int DeleteMiscOrder(int MiscOrderID, int UserID, int WorkStationID, int Error);
        
        [System.ServiceModel.OperationContractAttribute(Action="DeleteMiscOrder", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/DeleteMiscOrderResponse")]
        System.Threading.Tasks.Task<int> DeleteMiscOrderAsync(int MiscOrderID, int UserID, int WorkStationID, int Error);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetServices", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetServicesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/GetServicesNextGenCustomExceptionFa" +
            "ult", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetServices(int TableID, string FilterCondition, int UserID, int WorkStationID, int Error);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetServices", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetServicesResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetServicesAsync(int TableID, string FilterCondition, int UserID, int WorkStationID, int Error);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetServiceOrders", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetServiceOrdersResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/GetServiceOrdersNextGenCustomExcept" +
            "ionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetServiceOrders(long IPID, int ServiceID, int TariffID, int TableID, int UserID, int WorkStationID, int Error);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetServiceOrders", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetServiceOrdersResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetServiceOrdersAsync(long IPID, int ServiceID, int TariffID, int TableID, int UserID, int WorkStationID, int Error);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetMultiPayerServiceOrders", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetMultiPayerServiceOrdersResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/GetMultiPayerServiceOrdersNextGenCu" +
            "stomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetMultiPayerServiceOrders(long IPID, string ServiceID, int TariffID, int TableID, int UserID, int WorkStationID, int Error);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetMultiPayerServiceOrders", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetMultiPayerServiceOrdersResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetMultiPayerServiceOrdersAsync(long IPID, string ServiceID, int TariffID, int TableID, int UserID, int WorkStationID, int Error);
        
        [System.ServiceModel.OperationContractAttribute(Action="SaveOrderItemPrices", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/SaveOrderItemPricesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/SaveOrderItemPricesNextGenCustomExc" +
            "eptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int SaveOrderItemPrices(long IPID, int ServiceID, System.Data.DataSet DsPrices, int UserID, int WorkStationID, int Error);
        
        [System.ServiceModel.OperationContractAttribute(Action="SaveOrderItemPrices", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/SaveOrderItemPricesResponse")]
        System.Threading.Tasks.Task<int> SaveOrderItemPricesAsync(long IPID, int ServiceID, System.Data.DataSet DsPrices, int UserID, int WorkStationID, int Error);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetDepositsAndDepositRefunds", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetDepositsAndDepositRefundsRespons" +
            "e")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/GetDepositsAndDepositRefundsNextGen" +
            "CustomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetDepositsAndDepositRefunds(string Condition, int UserID, int WorkStationID, int Error);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetDepositsAndDepositRefunds", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetDepositsAndDepositRefundsRespons" +
            "e")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetDepositsAndDepositRefundsAsync(string Condition, int UserID, int WorkStationID, int Error);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetDepositsAndDepositRefundsTuned", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetDepositsAndDepositRefundsTunedRe" +
            "sponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/GetDepositsAndDepositRefundsTunedNe" +
            "xtGenCustomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetDepositsAndDepositRefundsTuned(long AdmissionId, string Condition, int UserID, int WorkStationID, int Error);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetDepositsAndDepositRefundsTuned", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetDepositsAndDepositRefundsTunedRe" +
            "sponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetDepositsAndDepositRefundsTunedAsync(long AdmissionId, string Condition, int UserID, int WorkStationID, int Error);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchInPatients", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/FetchInPatientsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/FetchInPatientsNextGenCustomExcepti" +
            "onFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet FetchInPatients(int TableID, string Condition, int UserID, int WorkStationID, int Error);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchInPatients", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/FetchInPatientsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchInPatientsAsync(int TableID, string Condition, int UserID, int WorkStationID, int Error);
        
        [System.ServiceModel.OperationContractAttribute(Action="Pr_FetchCurrentIPBillAmountMIS", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/FetchtCurrentInPatientsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/FetchtCurrentInPatientsNextGenCusto" +
            "mExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet FetchtCurrentInPatients(int TableID, string sSelect, string Condition, int UserID, int WorkStationID, int Error);
        
        [System.ServiceModel.OperationContractAttribute(Action="Pr_FetchCurrentIPBillAmountMIS", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/FetchtCurrentInPatientsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchtCurrentInPatientsAsync(int TableID, string sSelect, string Condition, int UserID, int WorkStationID, int Error);
        
        [System.ServiceModel.OperationContractAttribute(Action="SaveCurrentInPatientPayableReport", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/SaveCurrentInPatientPayableReportRe" +
            "sponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/SaveCurrentInPatientPayableReportNe" +
            "xtGenCustomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int SaveCurrentInPatientPayableReport(System.Data.DataSet DsBillDetails, int UserID, int WorkStationID, int Error);
        
        [System.ServiceModel.OperationContractAttribute(Action="SaveCurrentInPatientPayableReport", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/SaveCurrentInPatientPayableReportRe" +
            "sponse")]
        System.Threading.Tasks.Task<int> SaveCurrentInPatientPayableReportAsync(System.Data.DataSet DsBillDetails, int UserID, int WorkStationID, int Error);
        
        [System.ServiceModel.OperationContractAttribute(Action="SaveCurrentInPatientPayableReportUI", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/SaveCurrentInPatientPayableReportUI" +
            "Response")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/SaveCurrentInPatientPayableReportUI" +
            "NextGenCustomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int SaveCurrentInPatientPayableReportUI(System.Data.DataSet DsBillDetails, int UserID, int WorkStationID, int Error);
        
        [System.ServiceModel.OperationContractAttribute(Action="SaveCurrentInPatientPayableReportUI", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/SaveCurrentInPatientPayableReportUI" +
            "Response")]
        System.Threading.Tasks.Task<int> SaveCurrentInPatientPayableReportUIAsync(System.Data.DataSet DsBillDetails, int UserID, int WorkStationID, int Error);
        
        [System.ServiceModel.OperationContractAttribute(Action="SaveCurrentInPatientPayableReportDetails", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/SaveCurrentInPatientPayableReportDe" +
            "tailsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/SaveCurrentInPatientPayableReportDe" +
            "tailsNextGenCustomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int SaveCurrentInPatientPayableReportDetails(System.Data.DataSet DsBillDetails, int intFirst, int UserID, int WorkStationID, int Error);
        
        [System.ServiceModel.OperationContractAttribute(Action="SaveCurrentInPatientPayableReportDetails", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/SaveCurrentInPatientPayableReportDe" +
            "tailsResponse")]
        System.Threading.Tasks.Task<int> SaveCurrentInPatientPayableReportDetailsAsync(System.Data.DataSet DsBillDetails, int intFirst, int UserID, int WorkStationID, int Error);
        
        [System.ServiceModel.OperationContractAttribute(Action="SaveCurrentInPatientPayableReportDetailsUI", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/SaveCurrentInPatientPayableReportDe" +
            "tailsUIResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/SaveCurrentInPatientPayableReportDe" +
            "tailsUINextGenCustomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int SaveCurrentInPatientPayableReportDetailsUI(System.Data.DataSet DsBillDetails, int intFirst, int UserID, int WorkStationID, int Error);
        
        [System.ServiceModel.OperationContractAttribute(Action="SaveCurrentInPatientPayableReportDetailsUI", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/SaveCurrentInPatientPayableReportDe" +
            "tailsUIResponse")]
        System.Threading.Tasks.Task<int> SaveCurrentInPatientPayableReportDetailsUIAsync(System.Data.DataSet DsBillDetails, int intFirst, int UserID, int WorkStationID, int Error);
        
        [System.ServiceModel.OperationContractAttribute(Action="CancelMultiPayerInpatientBill", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/CancelMultiPayerInpatientBillRespon" +
            "se")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/CancelMultiPayerInpatientBillNextGe" +
            "nCustomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int CancelMultiPayerInpatientBill(long PrimaryBillID, long SecondaryBillID, int AuthEmp, string StrReason, int UserID, int WorkStationID, int Error, int LetterId, int BillType);
        
        [System.ServiceModel.OperationContractAttribute(Action="CancelMultiPayerInpatientBill", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/CancelMultiPayerInpatientBillRespon" +
            "se")]
        System.Threading.Tasks.Task<int> CancelMultiPayerInpatientBillAsync(long PrimaryBillID, long SecondaryBillID, int AuthEmp, string StrReason, int UserID, int WorkStationID, int Error, int LetterId, int BillType);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetBillSpecificDetails", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetBillSpecificDetailsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/GetBillSpecificDetailsNextGenCustom" +
            "ExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetBillSpecificDetails(long lnbillid, long lnIPID, string strType, int intUserID, int intWorkStationID, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetBillSpecificDetails", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetBillSpecificDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetBillSpecificDetailsAsync(long lnbillid, long lnIPID, string strType, int intUserID, int intWorkStationID, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetBillMaster", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetBillMasterResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/GetBillMasterNextGenCustomException" +
            "Fault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetBillMaster(long lnIPID, int intUserID, int intWorkStationID, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetBillMaster", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetBillMasterResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetBillMasterAsync(long lnIPID, int intUserID, int intWorkStationID, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetCancelledBill", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetCancelledBillResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/GetCancelledBillNextGenCustomExcept" +
            "ionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetCancelledBill(long lnIPID, long BillID, int intUserID, int intWorkStationID, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetCancelledBill", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetCancelledBillResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetCancelledBillAsync(long lnIPID, long BillID, int intUserID, int intWorkStationID, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetOtherPayerBills", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetOtherPayerBillsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/GetOtherPayerBillsNextGenCustomExce" +
            "ptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetOtherPayerBills(long lnbillid, long lnIPID, int intUserID, int intWorkStationID, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetOtherPayerBills", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetOtherPayerBillsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetOtherPayerBillsAsync(long lnbillid, long lnIPID, int intUserID, int intWorkStationID, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetDepositsForPatient", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetDepositsForPatientResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/GetDepositsForPatientNextGenCustomE" +
            "xceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetDepositsForPatient(string strType, string strFilter, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetDepositsForPatient", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetDepositsForPatientResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetDepositsForPatientAsync(string strType, string strFilter, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="CancelInpatientBill", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/CancelInpatientBillResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/CancelInpatientBillNextGenCustomExc" +
            "eptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int CancelInpatientBill(long PrimaryBillID, long SecondaryBillID, int AuthEmp, string StrReason, int UserID, int WorkStationID, int Error, int LetterId, int BillType);
        
        [System.ServiceModel.OperationContractAttribute(Action="CancelInpatientBill", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/CancelInpatientBillResponse")]
        System.Threading.Tasks.Task<int> CancelInpatientBillAsync(long PrimaryBillID, long SecondaryBillID, int AuthEmp, string StrReason, int UserID, int WorkStationID, int Error, int LetterId, int BillType);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetLetterDetails", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetLetterDetailsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/GetLetterDetailsNextGenCustomExcept" +
            "ionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetLetterDetails(int intLetterId, int intLevel, string strTableId, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetLetterDetails", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetLetterDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetLetterDetailsAsync(int intLetterId, int intLevel, string strTableId, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchADVProcedureDetails", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/FetchADVProcedureDetailsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/FetchADVProcedureDetailsNextGenCust" +
            "omExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet FetchADVProcedureDetails(string ProcedureName, string Type, string Filter, int UserId, int WstationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchADVProcedureDetails", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/FetchADVProcedureDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchADVProcedureDetailsAsync(string ProcedureName, string Type, string Filter, int UserId, int WstationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetBillID", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetBillIDResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/GetBillIDNextGenCustomExceptionFaul" +
            "t", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetBillID(string strFilter, int intUserId, int intWorkStationId, string strOrder, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetBillID", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetBillIDResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetBillIDAsync(string strFilter, int intUserId, int intWorkStationId, string strOrder, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchBillDispatch", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/FetchBillDispatchResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/FetchBillDispatchNextGenCustomExcep" +
            "tionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet FetchBillDispatch(int BillDispatchID, int intUserId, int intWorkStationId, int intError, int tagid);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchBillDispatch", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/FetchBillDispatchResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchBillDispatchAsync(int BillDispatchID, int intUserId, int intWorkStationId, int intError, int tagid);
        
        [System.ServiceModel.OperationContractAttribute(Action="SaveCopmanyDocumentCheckList", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/SaveCopmanyDocumentCheckListRespons" +
            "e")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/SaveCopmanyDocumentCheckListNextGen" +
            "CustomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool SaveCopmanyDocumentCheckList(System.Data.DataSet dsSave);
        
        [System.ServiceModel.OperationContractAttribute(Action="SaveCopmanyDocumentCheckList", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/SaveCopmanyDocumentCheckListRespons" +
            "e")]
        System.Threading.Tasks.Task<bool> SaveCopmanyDocumentCheckListAsync(System.Data.DataSet dsSave);
        
        [System.ServiceModel.OperationContractAttribute(Action="SaveCheckListMaster", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/SaveCheckListMasterResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/SaveCheckListMasterNextGenCustomExc" +
            "eptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool SaveCheckListMaster(int documentid, string Documentname, int Documenttype, string Code, int FeatureID, int FunctionID, int USERID, int WORKSTATIONID, string strName2L, bool blnblocked);
        
        [System.ServiceModel.OperationContractAttribute(Action="SaveCheckListMaster", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/SaveCheckListMasterResponse")]
        System.Threading.Tasks.Task<bool> SaveCheckListMasterAsync(int documentid, string Documentname, int Documenttype, string Code, int FeatureID, int FunctionID, int USERID, int WORKSTATIONID, string strName2L, bool blnblocked);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetDIschargeCheckListMaster", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetDIschargeCheckListMasterResponse" +
            "")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/GetDIschargeCheckListMasterNextGenC" +
            "ustomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetDIschargeCheckListMaster(string strFilter, int intUserId, int intWorkStationId, string strOrder, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetDIschargeCheckListMaster", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetDIschargeCheckListMasterResponse" +
            "")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetDIschargeCheckListMasterAsync(string strFilter, int intUserId, int intWorkStationId, string strOrder, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="SaveCancelAvailedDeposit", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/SaveCancelAvailedDepositResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/SaveCancelAvailedDepositNextGenCust" +
            "omExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string SaveCancelAvailedDeposit(System.Data.DataSet dsReceipt);
        
        [System.ServiceModel.OperationContractAttribute(Action="SaveCancelAvailedDeposit", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/SaveCancelAvailedDepositResponse")]
        System.Threading.Tasks.Task<string> SaveCancelAvailedDepositAsync(System.Data.DataSet dsReceipt);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchBillDispatchsADV", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/FetchBillDispatchsADVResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/FetchBillDispatchsADVNextGenCustomE" +
            "xceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet FetchBillDispatchsADV(string strfilter, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchBillDispatchsADV", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/FetchBillDispatchsADVResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchBillDispatchsADVAsync(string strfilter, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="ReAdmitDischargedPatient1", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/ReAdmitDischargedPatient1Response")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/ReAdmitDischargedPatient1NextGenCus" +
            "tomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int ReAdmitDischargedPatient1(long lngIPID, int prevbedID, string NewBedID, string ReadmitDate, int BillBedTypeid, int ReqbedTypeID, int AllotBedTypeid, int intUserID, int IntWorkStationID, int intError, int PatientType);
        
        [System.ServiceModel.OperationContractAttribute(Action="ReAdmitDischargedPatient1", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/ReAdmitDischargedPatient1Response")]
        System.Threading.Tasks.Task<int> ReAdmitDischargedPatient1Async(long lngIPID, int prevbedID, string NewBedID, string ReadmitDate, int BillBedTypeid, int ReqbedTypeID, int AllotBedTypeid, int intUserID, int IntWorkStationID, int intError, int PatientType);
        
        [System.ServiceModel.OperationContractAttribute(Action="ReAdmitDischargedPatient", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/ReAdmitDischargedPatientResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/ReAdmitDischargedPatientNextGenCust" +
            "omExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int ReAdmitDischargedPatient(long lngIPID, int prevbedID, string NewBedID, string ReadmitDate, int BillBedTypeid, int ReqbedTypeID, int AllotBedTypeid, int intUserID, int IntWorkStationID, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="ReAdmitDischargedPatient", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/ReAdmitDischargedPatientResponse")]
        System.Threading.Tasks.Task<int> ReAdmitDischargedPatientAsync(long lngIPID, int prevbedID, string NewBedID, string ReadmitDate, int BillBedTypeid, int ReqbedTypeID, int AllotBedTypeid, int intUserID, int IntWorkStationID, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchInterimPatients", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/FetchInterimPatientsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/FetchInterimPatientsNextGenCustomEx" +
            "ceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet FetchInterimPatients(int BillDays, string strCurrentdate, int intUserID, int IntWorkStationID, int intError, int FeatureID, int FunctionId, string CallContext);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchInterimPatients", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/FetchInterimPatientsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchInterimPatientsAsync(int BillDays, string strCurrentdate, int intUserID, int IntWorkStationID, int intError, int FeatureID, int FunctionId, string CallContext);
        
        [System.ServiceModel.OperationContractAttribute(Action="CalculateBill", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/CalculateBillResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/CalculateBillNextGenCustomException" +
            "Fault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet CalculateBill(
                    System.Data.DataSet dsFinal, 
                    int intTariffID, 
                    int intDefTariffID, 
                    int intEBedType, 
                    long lngIPID, 
                    string strRegCode, 
                    int intPatientFeeType, 
                    int intBillType, 
                    int intLoacationID, 
                    string strAdmitDateTime, 
                    string strDischargeDateTime, 
                    int intTableID, 
                    string strFilter, 
                    int intUserId, 
                    int intWorkStationId, 
                    int intError, 
                    int intPatientType);
        
        [System.ServiceModel.OperationContractAttribute(Action="CalculateBill", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/CalculateBillResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> CalculateBillAsync(
                    System.Data.DataSet dsFinal, 
                    int intTariffID, 
                    int intDefTariffID, 
                    int intEBedType, 
                    long lngIPID, 
                    string strRegCode, 
                    int intPatientFeeType, 
                    int intBillType, 
                    int intLoacationID, 
                    string strAdmitDateTime, 
                    string strDischargeDateTime, 
                    int intTableID, 
                    string strFilter, 
                    int intUserId, 
                    int intWorkStationId, 
                    int intError, 
                    int intPatientType);
        
        [System.ServiceModel.OperationContractAttribute(Action="CalculateBillForPayOut", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/CalculateBillForPayOutResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/CalculateBillForPayOutNextGenCustom" +
            "ExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet CalculateBillForPayOut(
                    System.Data.DataSet dsFinal, 
                    int intTariffID, 
                    int intDefTariffID, 
                    int intEBedType, 
                    long lngIPID, 
                    string strRegCode, 
                    int intPatientFeeType, 
                    int intBillType, 
                    int intLoacationID, 
                    string strAdmitDateTime, 
                    string strDischargeDateTime, 
                    int intTableID, 
                    string strFilter, 
                    int intUserId, 
                    int intWorkStationId, 
                    int intError, 
                    int intPatientType, 
                    string fromdate, 
                    string todate);
        
        [System.ServiceModel.OperationContractAttribute(Action="CalculateBillForPayOut", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/CalculateBillForPayOutResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> CalculateBillForPayOutAsync(
                    System.Data.DataSet dsFinal, 
                    int intTariffID, 
                    int intDefTariffID, 
                    int intEBedType, 
                    long lngIPID, 
                    string strRegCode, 
                    int intPatientFeeType, 
                    int intBillType, 
                    int intLoacationID, 
                    string strAdmitDateTime, 
                    string strDischargeDateTime, 
                    int intTableID, 
                    string strFilter, 
                    int intUserId, 
                    int intWorkStationId, 
                    int intError, 
                    int intPatientType, 
                    string fromdate, 
                    string todate);
        
        [System.ServiceModel.OperationContractAttribute(Action="CalculateBillExclusion", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/CalculateBillExclusionResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/CalculateBillExclusionNextGenCustom" +
            "ExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet CalculateBillExclusion(
                    System.Data.DataSet dsFinal, 
                    int intTariffID, 
                    int intDefTariffID, 
                    int intEBedType, 
                    long lngIPID, 
                    string strRegCode, 
                    int intPatientFeeType, 
                    int intBillType, 
                    int intLoacationID, 
                    string strAdmitDateTime, 
                    string strDischargeDateTime, 
                    int intTableID, 
                    string strFilter, 
                    int intUserId, 
                    int intWorkStationId, 
                    int intError, 
                    int intPatientType, 
                    long BillID);
        
        [System.ServiceModel.OperationContractAttribute(Action="CalculateBillExclusion", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/CalculateBillExclusionResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> CalculateBillExclusionAsync(
                    System.Data.DataSet dsFinal, 
                    int intTariffID, 
                    int intDefTariffID, 
                    int intEBedType, 
                    long lngIPID, 
                    string strRegCode, 
                    int intPatientFeeType, 
                    int intBillType, 
                    int intLoacationID, 
                    string strAdmitDateTime, 
                    string strDischargeDateTime, 
                    int intTableID, 
                    string strFilter, 
                    int intUserId, 
                    int intWorkStationId, 
                    int intError, 
                    int intPatientType, 
                    long BillID);
        
        [System.ServiceModel.OperationContractAttribute(Action="CalculateBillNew", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/CalculateBillExcludeBedRentalRespon" +
            "se")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/CalculateBillExcludeBedRentalNextGe" +
            "nCustomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet CalculateBillExcludeBedRental(
                    System.Data.DataSet dsFinal, 
                    int intTariffID, 
                    int intDefTariffID, 
                    int intEBedType, 
                    long lngIPID, 
                    string strRegCode, 
                    int intPatientFeeType, 
                    int intBillType, 
                    int intLoacationID, 
                    string strAdmitDateTime, 
                    string strDischargeDateTime, 
                    int intTableID, 
                    string strFilter, 
                    int intUserId, 
                    int intWorkStationId, 
                    int intError, 
                    int intPatientType, 
                    int intExcludeBedRentalDays, 
                    int intEmployeeType);
        
        [System.ServiceModel.OperationContractAttribute(Action="CalculateBillNew", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/CalculateBillExcludeBedRentalRespon" +
            "se")]
        System.Threading.Tasks.Task<System.Data.DataSet> CalculateBillExcludeBedRentalAsync(
                    System.Data.DataSet dsFinal, 
                    int intTariffID, 
                    int intDefTariffID, 
                    int intEBedType, 
                    long lngIPID, 
                    string strRegCode, 
                    int intPatientFeeType, 
                    int intBillType, 
                    int intLoacationID, 
                    string strAdmitDateTime, 
                    string strDischargeDateTime, 
                    int intTableID, 
                    string strFilter, 
                    int intUserId, 
                    int intWorkStationId, 
                    int intError, 
                    int intPatientType, 
                    int intExcludeBedRentalDays, 
                    int intEmployeeType);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetRoundedValue", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetRoundedValueResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/GetRoundedValueNextGenCustomExcepti" +
            "onFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        decimal GetRoundedValue(decimal BillValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetRoundedValue", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetRoundedValueResponse")]
        System.Threading.Tasks.Task<decimal> GetRoundedValueAsync(decimal BillValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetRoundedValueHospID", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetRoundedValueHospIDResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/GetRoundedValueHospIDNextGenCustomE" +
            "xceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        decimal GetRoundedValueHospID(decimal BillValue, int intHospitalID);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetRoundedValueHospID", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetRoundedValueHospIDResponse")]
        System.Threading.Tasks.Task<decimal> GetRoundedValueHospIDAsync(decimal BillValue, int intHospitalID);
        
        [System.ServiceModel.OperationContractAttribute(Action="UpdateAgreementData", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/UpdateAgreementDataResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/UpdateAgreementDataNextGenCustomExc" +
            "eptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet UpdateAgreementData(System.Data.DataSet dsAggData, int intEligibleBedTypeID, int intGradeID);
        
        [System.ServiceModel.OperationContractAttribute(Action="UpdateAgreementData", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/UpdateAgreementDataResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> UpdateAgreementDataAsync(System.Data.DataSet dsAggData, int intEligibleBedTypeID, int intGradeID);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetCompanyDeductables", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetCompanyDeductablesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/GetCompanyDeductablesNextGenCustomE" +
            "xceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetCompanyDeductables(int intCompanyID, string strCompanyType, string strTableID, int intGradeID, int intUserId, int intWorkStationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetCompanyDeductables", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetCompanyDeductablesResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetCompanyDeductablesAsync(int intCompanyID, string strCompanyType, string strTableID, int intGradeID, int intUserId, int intWorkStationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetPackages", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetPackagesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/GetPackagesNextGenCustomExceptionFa" +
            "ult", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetPackages(long lngIPID, int intTariffID, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetPackages", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetPackagesResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetPackagesAsync(long lngIPID, int intTariffID, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetPackagesServiceId", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetPackagesServiceIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/GetPackagesServiceIdNextGenCustomEx" +
            "ceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetPackagesServiceId(long lngIPID, int intTariffID, int intServiceId, string strTableId, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetPackagesServiceId", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetPackagesServiceIdResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetPackagesServiceIdAsync(long lngIPID, int intTariffID, int intServiceId, string strTableId, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetServiceID", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetServiceIDResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/GetServiceIDNextGenCustomExceptionF" +
            "ault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int GetServiceID(string ServiceName);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetServiceID", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetServiceIDResponse")]
        System.Threading.Tasks.Task<int> GetServiceIDAsync(string ServiceName);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetBedConfigurationDetails", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetBedConfigurationDetailsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/GetBedConfigurationDetailsNextGenCu" +
            "stomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetBedConfigurationDetails(int intType, int intResult, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetBedConfigurationDetails", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetBedConfigurationDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetBedConfigurationDetailsAsync(int intType, int intResult, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetOrderTypes", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetOrderTypesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/GetOrderTypesNextGenCustomException" +
            "Fault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetOrderTypes(int ServiceID, int UserID, int WorkStationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetOrderTypes", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetOrderTypesResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetOrderTypesAsync(int ServiceID, int UserID, int WorkStationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetTariffDetails", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetTariffDetailsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/GetTariffDetailsNextGenCustomExcept" +
            "ionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetTariffDetails(int TariffID, int intUserID, int intWorkStationID, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetTariffDetails", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetTariffDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetTariffDetailsAsync(int TariffID, int intUserID, int intWorkStationID, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetTariffDetailsEstimation", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetTariffDetailsEstimationResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/GetTariffDetailsEstimationNextGenCu" +
            "stomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetTariffDetailsEstimation(int TariffID, int PatType, int intUserID, int intWorkStationID, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetTariffDetailsEstimation", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetTariffDetailsEstimationResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetTariffDetailsEstimationAsync(int TariffID, int PatType, int intUserID, int intWorkStationID, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetCompanyBedRentalsLimit", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetCompanyBedRentalsLimitResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/GetCompanyBedRentalsLimitNextGenCus" +
            "tomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetCompanyBedRentalsLimit(int intCompanyID, string strCompanyType, string strTableID, int intGradeID, int intUserId, int intWorkStationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetCompanyBedRentalsLimit", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetCompanyBedRentalsLimitResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetCompanyBedRentalsLimitAsync(int intCompanyID, string strCompanyType, string strTableID, int intGradeID, int intUserId, int intWorkStationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetIntrimBillDetails", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetIntrimBillDetailsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/GetIntrimBillDetailsNextGenCustomEx" +
            "ceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetIntrimBillDetails(long BillID, long lngIPID, int intUserID, int intWorkStationID, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetIntrimBillDetails", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetIntrimBillDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetIntrimBillDetailsAsync(long BillID, long lngIPID, int intUserID, int intWorkStationID, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetServiceTaxConfiguration", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetServiceTaxConfigurationResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/GetServiceTaxConfigurationNextGenCu" +
            "stomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        decimal GetServiceTaxConfiguration(string strTblID, int intArgeemenID, int intBedTypeID, string strServiceID, string strSpecialiseID, int intUserID, int intWorkStationID, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetServiceTaxConfiguration", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetServiceTaxConfigurationResponse")]
        System.Threading.Tasks.Task<decimal> GetServiceTaxConfigurationAsync(string strTblID, int intArgeemenID, int intBedTypeID, string strServiceID, string strSpecialiseID, int intUserID, int intWorkStationID, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchDisplayService", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/FetchDisplayServiceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/FetchDisplayServiceNextGenCustomExc" +
            "eptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable FetchDisplayService(int intType, string strFilter, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchDisplayService", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/FetchDisplayServiceResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> FetchDisplayServiceAsync(int intType, string strFilter, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetServiceDependencyDetails", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetServiceDependencyDetailsResponse" +
            "")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/GetServiceDependencyDetailsNextGenC" +
            "ustomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetServiceDependencyDetails(int intTariffID, int intTable, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetServiceDependencyDetails", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetServiceDependencyDetailsResponse" +
            "")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetServiceDependencyDetailsAsync(int intTariffID, int intTable, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetPackageDetails", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetPackageDetailsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/GetPackageDetailsNextGenCustomExcep" +
            "tionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetPackageDetails(int PackageID, int intUserID, int intWorkStationID, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetPackageDetails", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetPackageDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetPackageDetailsAsync(int PackageID, int intUserID, int intWorkStationID, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetIPBillDetails", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetIPBillDetailsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/GetIPBillDetailsNextGenCustomExcept" +
            "ionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetIPBillDetails(string strSelect, string strFilter, string strOrder, int intUserId, int intWorkStId);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetIPBillDetails", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetIPBillDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetIPBillDetailsAsync(string strSelect, string strFilter, string strOrder, int intUserId, int intWorkStId);
        
        [System.ServiceModel.OperationContractAttribute(Action="SaveScrollReport", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/SaveScrollReportResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/SaveScrollReportNextGenCustomExcept" +
            "ionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string SaveScrollReport(System.Data.DataSet dsScroll, int intScrollModuleId, int ScrollUserId, int intUserId, int intWorkStationId, int intRoutID);
        
        [System.ServiceModel.OperationContractAttribute(Action="SaveScrollReport", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/SaveScrollReportResponse")]
        System.Threading.Tasks.Task<string> SaveScrollReportAsync(System.Data.DataSet dsScroll, int intScrollModuleId, int ScrollUserId, int intUserId, int intWorkStationId, int intRoutID);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetScrollReportData", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetScrollReportDataResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/GetScrollReportDataNextGenCustomExc" +
            "eptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetScrollReportData(int intScrollId, string strTbl, int intUserId, int intWorkStationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetScrollReportData", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetScrollReportDataResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetScrollReportDataAsync(int intScrollId, string strTbl, int intUserId, int intWorkStationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="SaveProceduresOrdered", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/SaveProceduresOrderedResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/SaveProceduresOrderedNextGenCustomE" +
            "xceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool SaveProceduresOrdered(System.Data.DataSet objDS, int intUserid, int intWorkstationid);
        
        [System.ServiceModel.OperationContractAttribute(Action="SaveProceduresOrdered", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/SaveProceduresOrderedResponse")]
        System.Threading.Tasks.Task<bool> SaveProceduresOrderedAsync(System.Data.DataSet objDS, int intUserid, int intWorkstationid);
        
        [System.ServiceModel.OperationContractAttribute(Action="SaveTestRequisition", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/SaveTestRequisitionResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/SaveTestRequisitionNextGenCustomExc" +
            "eptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool SaveTestRequisition(bool bModify, System.Data.DataSet dsRequisition, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="SaveTestRequisition", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/SaveTestRequisitionResponse")]
        System.Threading.Tasks.Task<bool> SaveTestRequisitionAsync(bool bModify, System.Data.DataSet dsRequisition, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="SaveIPConsultation", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/SaveIPConsultationResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/SaveIPConsultationNextGenCustomExce" +
            "ptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool SaveIPConsultation(System.Data.DataSet objDS, int intIPID, int intConsultationID, int intUserID, int intWorkStationId, byte bytBlocked);
        
        [System.ServiceModel.OperationContractAttribute(Action="SaveIPConsultation", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/SaveIPConsultationResponse")]
        System.Threading.Tasks.Task<bool> SaveIPConsultationAsync(System.Data.DataSet objDS, int intIPID, int intConsultationID, int intUserID, int intWorkStationId, byte bytBlocked);
        
        [System.ServiceModel.OperationContractAttribute(Action="SaveIPDoctorVisits", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/SaveIPDoctorVisitsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/SaveIPDoctorVisitsNextGenCustomExce" +
            "ptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string SaveIPDoctorVisits(System.Data.DataSet objDS, int intIPID, int intConsultationID, int intUserID, int intWorkStationId, byte bytBlocked);
        
        [System.ServiceModel.OperationContractAttribute(Action="SaveIPDoctorVisits", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/SaveIPDoctorVisitsResponse")]
        System.Threading.Tasks.Task<string> SaveIPDoctorVisitsAsync(System.Data.DataSet objDS, int intIPID, int intConsultationID, int intUserID, int intWorkStationId, byte bytBlocked);
        
        [System.ServiceModel.OperationContractAttribute(Action="SaveEquipmentUsage", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/SaveEquipmentUsageResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/SaveEquipmentUsageNextGenCustomExce" +
            "ptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool SaveEquipmentUsage(System.Data.DataSet objDS, int intUserID, int intWorkStationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="SaveEquipmentUsage", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/SaveEquipmentUsageResponse")]
        System.Threading.Tasks.Task<bool> SaveEquipmentUsageAsync(System.Data.DataSet objDS, int intUserID, int intWorkStationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchIPConsultations", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/FetchIPConsultationsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/FetchIPConsultationsNextGenCustomEx" +
            "ceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet FetchIPConsultations(string strFilter, int intUserId, int intWorkStation);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchIPConsultations", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/FetchIPConsultationsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchIPConsultationsAsync(string strFilter, int intUserId, int intWorkStation);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchIPOrdersForBilling", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/FetchIPOrdersForBillingResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/FetchIPOrdersForBillingNextGenCusto" +
            "mExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet FetchIPOrdersForBilling(long lngIPID, string IPOrdeID, int intTariffID, int ServiceID, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchIPOrdersForBilling", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/FetchIPOrdersForBillingResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchIPOrdersForBillingAsync(long lngIPID, string IPOrdeID, int intTariffID, int ServiceID, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetPackagesForConsumption", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetPackagesForConsumptionResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/GetPackagesForConsumptionNextGenCus" +
            "tomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetPackagesForConsumption(long lngIPID, string IPOrdeID, int intTariffID, int ServiceID, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetPackagesForConsumption", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetPackagesForConsumptionResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetPackagesForConsumptionAsync(long lngIPID, string IPOrdeID, int intTariffID, int ServiceID, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetOrdersOfService", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetOrdersOfServiceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/GetOrdersOfServiceNextGenCustomExce" +
            "ptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetOrdersOfService(long IPID, int ServiceID, int TariffID, int TableID, int UserID, int WorkStationID, int Error);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetOrdersOfService", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetOrdersOfServiceResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetOrdersOfServiceAsync(long IPID, int ServiceID, int TariffID, int TableID, int UserID, int WorkStationID, int Error);
        
        [System.ServiceModel.OperationContractAttribute(Action="ModifyProceduersOrdered", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/ModifyProceduersOrderedResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/ModifyProceduersOrderedNextGenCusto" +
            "mExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool ModifyProceduersOrdered(System.Data.DataSet objDS, int intUserid, int intWorkstationid);
        
        [System.ServiceModel.OperationContractAttribute(Action="ModifyProceduersOrdered", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/ModifyProceduersOrderedResponse")]
        System.Threading.Tasks.Task<bool> ModifyProceduersOrderedAsync(System.Data.DataSet objDS, int intUserid, int intWorkstationid);
        
        [System.ServiceModel.OperationContractAttribute(Action="DeleteIPDoctorVisits", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/DeleteIPDoctorVisitsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/DeleteIPDoctorVisitsNextGenCustomEx" +
            "ceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool DeleteIPDoctorVisits(int intIPID, int intConsultationID, int intUserID, int intWorkStationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="DeleteIPDoctorVisits", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/DeleteIPDoctorVisitsResponse")]
        System.Threading.Tasks.Task<bool> DeleteIPDoctorVisitsAsync(int intIPID, int intConsultationID, int intUserID, int intWorkStationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="DeleteProceduresOrdered", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/DeleteProceduresOrderedResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/DeleteProceduresOrderedNextGenCusto" +
            "mExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool DeleteProceduresOrdered(System.Data.DataSet objDS, int intUserID, int intWorkStationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="DeleteProceduresOrdered", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/DeleteProceduresOrderedResponse")]
        System.Threading.Tasks.Task<bool> DeleteProceduresOrderedAsync(System.Data.DataSet objDS, int intUserID, int intWorkStationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="DeleteTestRequisition", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/DeleteTestRequisitionResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/DeleteTestRequisitionNextGenCustomE" +
            "xceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool DeleteTestRequisition(long lngTestOrderId, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="DeleteTestRequisition", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/DeleteTestRequisitionResponse")]
        System.Threading.Tasks.Task<bool> DeleteTestRequisitionAsync(long lngTestOrderId, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetTestRequisitionDetails", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetTestRequisitionDetailsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/GetTestRequisitionDetailsNextGenCus" +
            "tomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetTestRequisitionDetails(bool blnWithFlow, long lngOrderId, string strTableId, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetTestRequisitionDetails", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetTestRequisitionDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetTestRequisitionDetailsAsync(bool blnWithFlow, long lngOrderId, string strTableId, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetSpecializationConfig", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetSpecializationConfigResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/GetSpecializationConfigNextGenCusto" +
            "mExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetSpecializationConfig(int intType, int intResult, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetSpecializationConfig", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetSpecializationConfigResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetSpecializationConfigAsync(int intType, int intResult, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchSurgeryData", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/FetchSurgeryDataResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/FetchSurgeryDataNextGenCustomExcept" +
            "ionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet FetchSurgeryData(string strProcedureID, string strType, int intUserID, int intWorkStationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchSurgeryData", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/FetchSurgeryDataResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchSurgeryDataAsync(string strProcedureID, string strType, int intUserID, int intWorkStationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="SaveSurgeryRecord", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/SaveSurgeryRecordResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/SaveSurgeryRecordNextGenCustomExcep" +
            "tionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string SaveSurgeryRecord(System.Data.DataSet objDSSurgery, int intUserId, int intWorkStationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="SaveSurgeryRecord", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/SaveSurgeryRecordResponse")]
        System.Threading.Tasks.Task<string> SaveSurgeryRecordAsync(System.Data.DataSet objDSSurgery, int intUserId, int intWorkStationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchPatSurgeryCaseSheet", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/FetchPatSurgeryCaseSheetResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/FetchPatSurgeryCaseSheetNextGenCust" +
            "omExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet FetchPatSurgeryCaseSheet(int intSurgeryID, int intAdmissionID, int intOrderID, int intUserId, int intWorkStationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchPatSurgeryCaseSheet", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/FetchPatSurgeryCaseSheetResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchPatSurgeryCaseSheetAsync(int intSurgeryID, int intAdmissionID, int intOrderID, int intUserId, int intWorkStationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="SavePatCaseSheet", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/SavePatCaseSheetResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/SavePatCaseSheetNextGenCustomExcept" +
            "ionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int SavePatCaseSheet(System.Data.DataSet objDS, int intUserID, int intWorkStationId, int intBillID, int intPackageID, int intBillItemSeq);
        
        [System.ServiceModel.OperationContractAttribute(Action="SavePatCaseSheet", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/SavePatCaseSheetResponse")]
        System.Threading.Tasks.Task<int> SavePatCaseSheetAsync(System.Data.DataSet objDS, int intUserID, int intWorkStationId, int intBillID, int intPackageID, int intBillItemSeq);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchSurgeryOrdersDetails", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/FetchSurgeryOrdersDetailsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/FetchSurgeryOrdersDetailsNextGenCus" +
            "tomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet FetchSurgeryOrdersDetails(int intOrderID, int intUserId, int intWorkStationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchSurgeryOrdersDetails", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/FetchSurgeryOrdersDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchSurgeryOrdersDetailsAsync(int intOrderID, int intUserId, int intWorkStationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="CancelSurgeryRecord", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/CancelSurgeryRecordResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/CancelSurgeryRecordNextGenCustomExc" +
            "eptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool CancelSurgeryRecord(int intOrderID, int intRevert, int intUserId, int intWorkStationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="CancelSurgeryRecord", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/CancelSurgeryRecordResponse")]
        System.Threading.Tasks.Task<bool> CancelSurgeryRecordAsync(int intOrderID, int intRevert, int intUserId, int intWorkStationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchAnaesthesia", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/FetchAnaesthesiaResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/FetchAnaesthesiaNextGenCustomExcept" +
            "ionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet FetchAnaesthesia(int intUserId, int intWorkStationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchAnaesthesia", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/FetchAnaesthesiaResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchAnaesthesiaAsync(int intUserId, int intWorkStationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchPriority", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/FetchPriorityResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/FetchPriorityNextGenCustomException" +
            "Fault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet FetchPriority(int intUserID, int intWorkStationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchPriority", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/FetchPriorityResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchPriorityAsync(int intUserID, int intWorkStationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchSurgeryResources", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/FetchSurgeryResourcesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/FetchSurgeryResourcesNextGenCustomE" +
            "xceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet FetchSurgeryResources(int intSurgeryID, int intUserId, int intWorkStationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchSurgeryResources", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/FetchSurgeryResourcesResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchSurgeryResourcesAsync(int intSurgeryID, int intUserId, int intWorkStationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchOTs", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/FetchOTsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/FetchOTsNextGenCustomExceptionFault" +
            "", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet FetchOTs(int intUserId, int intWorkStationId, int intError, int intDeptID);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchOTs", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/FetchOTsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchOTsAsync(int intUserId, int intWorkStationId, int intError, int intDeptID);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetEquipmentTaskStatus", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetEquipmentTaskStatusResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/GetEquipmentTaskStatusNextGenCustom" +
            "ExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetEquipmentTaskStatus(int intUserId, int intWorkStationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetEquipmentTaskStatus", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetEquipmentTaskStatusResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetEquipmentTaskStatusAsync(int intUserId, int intWorkStationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="SaveEquipmentUsageforConsumption", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/SaveEquipmentUsageforConsumptionRes" +
            "ponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/SaveEquipmentUsageforConsumptionNex" +
            "tGenCustomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int SaveEquipmentUsageforConsumption(System.Data.DataSet objDS, int intUserID, int intWorkStationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="SaveEquipmentUsageforConsumption", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/SaveEquipmentUsageforConsumptionRes" +
            "ponse")]
        System.Threading.Tasks.Task<int> SaveEquipmentUsageforConsumptionAsync(System.Data.DataSet objDS, int intUserID, int intWorkStationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchPatientIPDemographics", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/FetchPatientIPDemographicsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/FetchPatientIPDemographicsNextGenCu" +
            "stomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet FetchPatientIPDemographics(string strType, string strIPId, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchPatientIPDemographics", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/FetchPatientIPDemographicsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchPatientIPDemographicsAsync(string strType, string strIPId, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchEquipmentConnection", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/FetchEquipmentConnectionResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/FetchEquipmentConnectionNextGenCust" +
            "omExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet FetchEquipmentConnection(int intConnectionID, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchEquipmentConnection", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/FetchEquipmentConnectionResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchEquipmentConnectionAsync(int intConnectionID, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="CancelEquipmentUsage", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/CancelEquipmentUsageResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/CancelEquipmentUsageNextGenCustomEx" +
            "ceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool CancelEquipmentUsage(int intOrderID, int intUserID, int intWorkStationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="CancelEquipmentUsage", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/CancelEquipmentUsageResponse")]
        System.Threading.Tasks.Task<bool> CancelEquipmentUsageAsync(int intOrderID, int intUserID, int intWorkStationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchPatientEpisode", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/FetchPatientEpisodeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/FetchPatientEpisodeNextGenCustomExc" +
            "eptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet FetchPatientEpisode(string strType, int intUserId, int intWorkStationId, int intEpisodeID, int intMonitorID, int intVisitID);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchPatientEpisode", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/FetchPatientEpisodeResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchPatientEpisodeAsync(string strType, int intUserId, int intWorkStationId, int intEpisodeID, int intMonitorID, int intVisitID);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetPatientServices", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetPatientServicesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/GetPatientServicesNextGenCustomExce" +
            "ptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetPatientServices(long IPID, int tariffId, int Userid, int workstationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetPatientServices", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetPatientServicesResponse")]
        System.Threading.Tasks.Task<string> GetPatientServicesAsync(long IPID, int tariffId, int Userid, int workstationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetHISConfigurationDetails", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetHISConfigurationDetailsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/GetHISConfigurationDetailsNextGenCu" +
            "stomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetHISConfigurationDetails(int intType, int intResult, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetHISConfigurationDetails", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetHISConfigurationDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetHISConfigurationDetailsAsync(int intType, int intResult, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="SaveDischarge", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/SaveDischargeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/SaveDischargeNextGenCustomException" +
            "Fault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool SaveDischarge(int intIPID, int intDischargeReason, string strExpiryDateTime, string strRemarks, int intPatientType, int intUserId, int intWorkStationId, int intError, int DischargeStatus);
        
        [System.ServiceModel.OperationContractAttribute(Action="SaveDischarge", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/SaveDischargeResponse")]
        System.Threading.Tasks.Task<bool> SaveDischargeAsync(int intIPID, int intDischargeReason, string strExpiryDateTime, string strRemarks, int intPatientType, int intUserId, int intWorkStationId, int intError, int DischargeStatus);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetPatientIPID", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetPatientIPIDResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/GetPatientIPIDNextGenCustomExceptio" +
            "nFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetPatientIPID(int intTableId, string strFilter, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetPatientIPID", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetPatientIPIDResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetPatientIPIDAsync(int intTableId, string strFilter, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetPatientDetails", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetPatientDetailsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/GetPatientDetailsNextGenCustomExcep" +
            "tionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetPatientDetails(int intPatientStatus, int intIPID, string strRegCode, string strType, bool blnDeleted, int intUserId, int intWorkStationId, int intError, int Languageid);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetPatientDetails", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetPatientDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetPatientDetailsAsync(int intPatientStatus, int intIPID, string strRegCode, string strType, bool blnDeleted, int intUserId, int intWorkStationId, int intError, int Languageid);
        
        [System.ServiceModel.OperationContractAttribute(Action="getBedTransReqDetails", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/getBedTransReqDetailsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/getBedTransReqDetailsNextGenCustomE" +
            "xceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet getBedTransReqDetails(string strType, System.DateTime dtFromDate, System.DateTime dtToDate, int intUserId, int intWorkStationId, int intError, int IPID, int HospitalID);
        
        [System.ServiceModel.OperationContractAttribute(Action="getBedTransReqDetails", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/getBedTransReqDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> getBedTransReqDetailsAsync(string strType, System.DateTime dtFromDate, System.DateTime dtToDate, int intUserId, int intWorkStationId, int intError, int IPID, int HospitalID);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetMasters", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetMastersResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/GetMastersNextGenCustomExceptionFau" +
            "lt", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetMasters(int intType, string strFilter, int intUserId, int intWorkStationId, int intError, int LanguageID);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetMasters", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetMastersResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetMastersAsync(int intType, string strFilter, int intUserId, int intWorkStationId, int intError, int LanguageID);
        
        // CODEGEN: Parameter 'ApplyAgreementRuleResult' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlArrayItemAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="ApplyAgreementRule", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/ApplyAgreementRuleResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/ApplyAgreementRuleNextGenCustomExce" +
            "ptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        Reports.IPBillingServiceClient.ApplyAgreementRuleResponse ApplyAgreementRule(Reports.IPBillingServiceClient.ApplyAgreementRuleRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="ApplyAgreementRule", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/ApplyAgreementRuleResponse")]
        System.Threading.Tasks.Task<Reports.IPBillingServiceClient.ApplyAgreementRuleResponse> ApplyAgreementRuleAsync(Reports.IPBillingServiceClient.ApplyAgreementRuleRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="CalculateServiceTaxandTotal", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/CalculateServiceTaxandTotalResponse" +
            "")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/CalculateServiceTaxandTotalNextGenC" +
            "ustomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet CalculateServiceTaxandTotal(System.Data.DataTable dtIPBillDetails, int intTariffID, bool blnIsServiceTax, long lngIPID, string strRegCode, int intPatientFeeType, int intLoacationID, int intCompanyID, int intGradeID, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="CalculateServiceTaxandTotal", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/CalculateServiceTaxandTotalResponse" +
            "")]
        System.Threading.Tasks.Task<System.Data.DataSet> CalculateServiceTaxandTotalAsync(System.Data.DataTable dtIPBillDetails, int intTariffID, bool blnIsServiceTax, long lngIPID, string strRegCode, int intPatientFeeType, int intLoacationID, int intCompanyID, int intGradeID, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="CalculateServiceTaxandTotalC", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/CalculateServiceTaxandTotalCRespons" +
            "e")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/CalculateServiceTaxandTotalCNextGen" +
            "CustomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet CalculateServiceTaxandTotalC(System.Data.DataTable dtIPBillDetails, int intTariffID, bool blnIsServiceTax, long lngIPID, string strRegCode, int intPatientFeeType, int intLoacationID, int intCompanyID, int intGradeID, int intUserId, int intWorkStationId, int intError, int intPatientType, int intSpecId);
        
        [System.ServiceModel.OperationContractAttribute(Action="CalculateServiceTaxandTotalC", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/CalculateServiceTaxandTotalCRespons" +
            "e")]
        System.Threading.Tasks.Task<System.Data.DataSet> CalculateServiceTaxandTotalCAsync(System.Data.DataTable dtIPBillDetails, int intTariffID, bool blnIsServiceTax, long lngIPID, string strRegCode, int intPatientFeeType, int intLoacationID, int intCompanyID, int intGradeID, int intUserId, int intWorkStationId, int intError, int intPatientType, int intSpecId);
        
        [System.ServiceModel.OperationContractAttribute(Action="CalculateServiceTaxandTotalCPerf", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/CalculateServiceTaxandTotalCPerfRes" +
            "ponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/CalculateServiceTaxandTotalCPerfNex" +
            "tGenCustomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet CalculateServiceTaxandTotalCPerf(System.Data.DataSet dsIPBillDetails, int intTariffID, bool blnIsServiceTax, long lngIPID, string strRegCode, int intPatientFeeType, int intLoacationID, int intCompanyID, int intGradeID, int intUserId, int intWorkStationId, int intError, int intPatientType, int intSpecId);
        
        [System.ServiceModel.OperationContractAttribute(Action="CalculateServiceTaxandTotalCPerf", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/CalculateServiceTaxandTotalCPerfRes" +
            "ponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> CalculateServiceTaxandTotalCPerfAsync(System.Data.DataSet dsIPBillDetails, int intTariffID, bool blnIsServiceTax, long lngIPID, string strRegCode, int intPatientFeeType, int intLoacationID, int intCompanyID, int intGradeID, int intUserId, int intWorkStationId, int intError, int intPatientType, int intSpecId);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetDepositRefundReciepts", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetDepositRefundRecieptsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/GetDepositRefundRecieptsNextGenCust" +
            "omExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetDepositRefundReciepts(string Condition, int UserID, int WorkStationID, int Error);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetDepositRefundReciepts", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetDepositRefundRecieptsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetDepositRefundRecieptsAsync(string Condition, int UserID, int WorkStationID, int Error);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetPackageBreakupDetails", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetPackageBreakupDetailsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/GetPackageBreakupDetailsNextGenCust" +
            "omExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetPackageBreakupDetails(string strBillNo, int intPatientType, int intTableId, int intSequence, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetPackageBreakupDetails", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetPackageBreakupDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetPackageBreakupDetailsAsync(string strBillNo, int intPatientType, int intTableId, int intSequence, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="SavePatientRemarks", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/SavePatientRemarksResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/SavePatientRemarksNextGenCustomExce" +
            "ptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string SavePatientRemarks(int intpatientid, string remarks, int UserID, int WorkStationID, int Error, int ipid);
        
        [System.ServiceModel.OperationContractAttribute(Action="SavePatientRemarks", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/SavePatientRemarksResponse")]
        System.Threading.Tasks.Task<string> SavePatientRemarksAsync(int intpatientid, string remarks, int UserID, int WorkStationID, int Error, int ipid);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetRemarksDetails", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetRemarksDetailsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/GetRemarksDetailsNextGenCustomExcep" +
            "tionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetRemarksDetails(string intType, string strFilter, int intUserID, int intWorStationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetRemarksDetails", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/GetRemarksDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetRemarksDetailsAsync(string intType, string strFilter, int intUserID, int intWorStationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="SaveInpatientDiscount", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/SaveInpatientDiscountResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.IPBillingServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/IPBillingServiceContract/SaveInpatientDiscountNextGenCustomE" +
            "xceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool SaveInpatientDiscount(System.Data.DataSet dsDiscount, long lngAdmissionID, int intAuthorisedBy, string strRemarks, int intDiscountTypeID, int intDiscountID, string strDiscountDate, string strDiscountNo, int intInpatientDiscountID, int intHospitalID, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="SaveInpatientDiscount", ReplyAction="http://Wipro.NxG.HIS/IPBillingServiceContract/SaveInpatientDiscountResponse")]
        System.Threading.Tasks.Task<bool> SaveInpatientDiscountAsync(System.Data.DataSet dsDiscount, long lngAdmissionID, int intAuthorisedBy, string strRemarks, int intDiscountTypeID, int intDiscountID, string strDiscountDate, string strDiscountNo, int intInpatientDiscountID, int intHospitalID, int intUserId, int intWorkStationId, int intError);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ModifyPatientAdmitDate", WrapperNamespace="http://Wipro.NxG.HIS", IsWrapped=true)]
    public partial class ModifyPatientAdmitDateRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://Wipro.NxG.HIS", Order=0)]
        public int intPatientid;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://Wipro.NxG.HIS", Order=1)]
        public string strAdmitDateTime;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://Wipro.NxG.HIS", Order=2)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> intFeatureId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://Wipro.NxG.HIS", Order=3)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> intFunctionId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://Wipro.NxG.HIS", Order=4)]
        public string strCallContext;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://Wipro.NxG.HIS", Order=5)]
        public int intWorkStationID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://Wipro.NxG.HIS", Order=6)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> intError;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://Wipro.NxG.HIS", Order=7)]
        public int intUserID;
        
        public ModifyPatientAdmitDateRequest() {
        }
        
        public ModifyPatientAdmitDateRequest(int intPatientid, string strAdmitDateTime, System.Nullable<int> intFeatureId, System.Nullable<int> intFunctionId, string strCallContext, int intWorkStationID, System.Nullable<int> intError, int intUserID) {
            this.intPatientid = intPatientid;
            this.strAdmitDateTime = strAdmitDateTime;
            this.intFeatureId = intFeatureId;
            this.intFunctionId = intFunctionId;
            this.strCallContext = strCallContext;
            this.intWorkStationID = intWorkStationID;
            this.intError = intError;
            this.intUserID = intUserID;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ModifyPatientAdmitDateResponse", WrapperNamespace="http://Wipro.NxG.HIS", IsWrapped=true)]
    public partial class ModifyPatientAdmitDateResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://Wipro.NxG.HIS", Order=0)]
        public int ModifyPatientAdmitDateResult;
        
        public ModifyPatientAdmitDateResponse() {
        }
        
        public ModifyPatientAdmitDateResponse(int ModifyPatientAdmitDateResult) {
            this.ModifyPatientAdmitDateResult = ModifyPatientAdmitDateResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ApplyAgreementRule", WrapperNamespace="http://Wipro.NxG.HIS", IsWrapped=true)]
    public partial class ApplyAgreementRuleRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://Wipro.NxG.HIS", Order=0)]
        public int EBedType;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://Wipro.NxG.HIS", Order=1)]
        public System.Data.DataSet DsPayerBill;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://Wipro.NxG.HIS", Order=2)]
        public int PatientFeeType;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://Wipro.NxG.HIS", Order=3)]
        public int intTariffID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://Wipro.NxG.HIS", Order=4)]
        public int intLetterID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://Wipro.NxG.HIS", Order=5)]
        public int intGradeID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://Wipro.NxG.HIS", Order=6)]
        public int intCompanyID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://Wipro.NxG.HIS", Order=7)]
        public int intIPID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://Wipro.NxG.HIS", Order=8)]
        public int intUserID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://Wipro.NxG.HIS", Order=9)]
        public int intWorkStationID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://Wipro.NxG.HIS", Order=10)]
        public int intError;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://Wipro.NxG.HIS", Order=11)]
        public bool IsOPPackage;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://Wipro.NxG.HIS", Order=12)]
        public bool IsIntrimBill;
        
        public ApplyAgreementRuleRequest() {
        }
        
        public ApplyAgreementRuleRequest(int EBedType, System.Data.DataSet DsPayerBill, int PatientFeeType, int intTariffID, int intLetterID, int intGradeID, int intCompanyID, int intIPID, int intUserID, int intWorkStationID, int intError, bool IsOPPackage, bool IsIntrimBill) {
            this.EBedType = EBedType;
            this.DsPayerBill = DsPayerBill;
            this.PatientFeeType = PatientFeeType;
            this.intTariffID = intTariffID;
            this.intLetterID = intLetterID;
            this.intGradeID = intGradeID;
            this.intCompanyID = intCompanyID;
            this.intIPID = intIPID;
            this.intUserID = intUserID;
            this.intWorkStationID = intWorkStationID;
            this.intError = intError;
            this.IsOPPackage = IsOPPackage;
            this.IsIntrimBill = IsIntrimBill;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ApplyAgreementRuleResponse", WrapperNamespace="http://Wipro.NxG.HIS", IsWrapped=true)]
    public partial class ApplyAgreementRuleResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://Wipro.NxG.HIS", Order=0)]
        [System.Xml.Serialization.XmlArrayItemAttribute("DataSet")]
        public System.Data.DataSet[] ApplyAgreementRuleResult;
        
        public ApplyAgreementRuleResponse() {
        }
        
        public ApplyAgreementRuleResponse(System.Data.DataSet[] ApplyAgreementRuleResult) {
            this.ApplyAgreementRuleResult = ApplyAgreementRuleResult;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPBillingServiceContractChannel : Reports.IPBillingServiceClient.IPBillingServiceContract, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PBillingServiceContractClient : System.ServiceModel.ClientBase<Reports.IPBillingServiceClient.IPBillingServiceContract>, Reports.IPBillingServiceClient.IPBillingServiceContract {
        
        public PBillingServiceContractClient() {
        }
        
        public PBillingServiceContractClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PBillingServiceContractClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PBillingServiceContractClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PBillingServiceContractClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Data.DataSet GetInpatientDiscountData(string strType, int intAdmissionID, int intUserID, int intWorStationID, int intError) {
            return base.Channel.GetInpatientDiscountData(strType, intAdmissionID, intUserID, intWorStationID, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetInpatientDiscountDataAsync(string strType, int intAdmissionID, int intUserID, int intWorStationID, int intError) {
            return base.Channel.GetInpatientDiscountDataAsync(strType, intAdmissionID, intUserID, intWorStationID, intError);
        }
        
        public System.Data.DataSet GetPackageInfoDetails(string strAdmissionNM, string strTBL, int intUserID, int intWorStationID, int intHospitalID) {
            return base.Channel.GetPackageInfoDetails(strAdmissionNM, strTBL, intUserID, intWorStationID, intHospitalID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetPackageInfoDetailsAsync(string strAdmissionNM, string strTBL, int intUserID, int intWorStationID, int intHospitalID) {
            return base.Channel.GetPackageInfoDetailsAsync(strAdmissionNM, strTBL, intUserID, intWorStationID, intHospitalID);
        }
        
        public System.Data.DataSet GetPackageList(int intPackageID, string strTBL, int intLanguageID, int intUserID, int intWorStationID, int intError) {
            return base.Channel.GetPackageList(intPackageID, strTBL, intLanguageID, intUserID, intWorStationID, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetPackageListAsync(int intPackageID, string strTBL, int intLanguageID, int intUserID, int intWorStationID, int intError) {
            return base.Channel.GetPackageListAsync(intPackageID, strTBL, intLanguageID, intUserID, intWorStationID, intError);
        }
        
        public void SavePatientPackageorders(int intAdmissionNo, int intCompanyID, System.Data.DataTable dtPkgDtl, int intUserID, int intWorkStationID, int intError) {
            base.Channel.SavePatientPackageorders(intAdmissionNo, intCompanyID, dtPkgDtl, intUserID, intWorkStationID, intError);
        }
        
        public System.Threading.Tasks.Task SavePatientPackageordersAsync(int intAdmissionNo, int intCompanyID, System.Data.DataTable dtPkgDtl, int intUserID, int intWorkStationID, int intError) {
            return base.Channel.SavePatientPackageordersAsync(intAdmissionNo, intCompanyID, dtPkgDtl, intUserID, intWorkStationID, intError);
        }
        
        public void DeletePatientPackageorders(int intIPID, int intUserID, int intWorkStationID, int intError) {
            base.Channel.DeletePatientPackageorders(intIPID, intUserID, intWorkStationID, intError);
        }
        
        public System.Threading.Tasks.Task DeletePatientPackageordersAsync(int intIPID, int intUserID, int intWorkStationID, int intError) {
            return base.Channel.DeletePatientPackageordersAsync(intIPID, intUserID, intWorkStationID, intError);
        }
        
        public int SaveBillClearenceStatus(int ScheduleID, byte Isverifyed, string Remarks, int intUserID, int WorkStationID, System.DateTime CreateDate) {
            return base.Channel.SaveBillClearenceStatus(ScheduleID, Isverifyed, Remarks, intUserID, WorkStationID, CreateDate);
        }
        
        public System.Threading.Tasks.Task<int> SaveBillClearenceStatusAsync(int ScheduleID, byte Isverifyed, string Remarks, int intUserID, int WorkStationID, System.DateTime CreateDate) {
            return base.Channel.SaveBillClearenceStatusAsync(ScheduleID, Isverifyed, Remarks, intUserID, WorkStationID, CreateDate);
        }
        
        public string GetScheduleTime() {
            return base.Channel.GetScheduleTime();
        }
        
        public System.Threading.Tasks.Task<string> GetScheduleTimeAsync() {
            return base.Channel.GetScheduleTimeAsync();
        }
        
        public void UpdateScheduleTime(string scheduleTime) {
            base.Channel.UpdateScheduleTime(scheduleTime);
        }
        
        public System.Threading.Tasks.Task UpdateScheduleTimeAsync(string scheduleTime) {
            return base.Channel.UpdateScheduleTimeAsync(scheduleTime);
        }
        
        public bool IsProcessRunning() {
            return base.Channel.IsProcessRunning();
        }
        
        public System.Threading.Tasks.Task<bool> IsProcessRunningAsync() {
            return base.Channel.IsProcessRunningAsync();
        }
        
        public void UpdateProcessStartedState(bool processRunning) {
            base.Channel.UpdateProcessStartedState(processRunning);
        }
        
        public System.Threading.Tasks.Task UpdateProcessStartedStateAsync(bool processRunning) {
            return base.Channel.UpdateProcessStartedStateAsync(processRunning);
        }
        
        public System.DateTime LastProcessTime() {
            return base.Channel.LastProcessTime();
        }
        
        public System.Threading.Tasks.Task<System.DateTime> LastProcessTimeAsync() {
            return base.Channel.LastProcessTimeAsync();
        }
        
        public void UpdateLastProcessDate() {
            base.Channel.UpdateLastProcessDate();
        }
        
        public System.Threading.Tasks.Task UpdateLastProcessDateAsync() {
            return base.Channel.UpdateLastProcessDateAsync();
        }
        
        public System.Data.DataSet GetCancelBillsDetails(int intIpNo, int intWorkStationID, int intError, int intUserID) {
            return base.Channel.GetCancelBillsDetails(intIpNo, intWorkStationID, intError, intUserID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetCancelBillsDetailsAsync(int intIpNo, int intWorkStationID, int intError, int intUserID) {
            return base.Channel.GetCancelBillsDetailsAsync(intIpNo, intWorkStationID, intError, intUserID);
        }
        
        public System.Data.DataTable GetPatientBills(string strFilter, int intUserID, int intWorkStationID, int intError) {
            return base.Channel.GetPatientBills(strFilter, intUserID, intWorkStationID, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetPatientBillsAsync(string strFilter, int intUserID, int intWorkStationID, int intError) {
            return base.Channel.GetPatientBillsAsync(strFilter, intUserID, intWorkStationID, intError);
        }
        
        public System.Data.DataSet CalculateBillExcludeBedRentalNew(
                    System.Data.DataSet dsFinal, 
                    int intTariffID, 
                    int intDefTariffID, 
                    int intEBedType, 
                    long lngIPID, 
                    string strRegCode, 
                    int intPatientFeeType, 
                    int intBillType, 
                    int intLoacationID, 
                    string strAdmitDateTime, 
                    string strDischargeDateTime, 
                    int intTableID, 
                    string strFilter, 
                    int intUserId, 
                    int intWorkStationId, 
                    int intError, 
                    int intPatientType, 
                    int intExcludeBedRentalDays, 
                    int intEmployeeType, 
                    int DeductStartingBedRental) {
            return base.Channel.CalculateBillExcludeBedRentalNew(dsFinal, intTariffID, intDefTariffID, intEBedType, lngIPID, strRegCode, intPatientFeeType, intBillType, intLoacationID, strAdmitDateTime, strDischargeDateTime, intTableID, strFilter, intUserId, intWorkStationId, intError, intPatientType, intExcludeBedRentalDays, intEmployeeType, DeductStartingBedRental);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> CalculateBillExcludeBedRentalNewAsync(
                    System.Data.DataSet dsFinal, 
                    int intTariffID, 
                    int intDefTariffID, 
                    int intEBedType, 
                    long lngIPID, 
                    string strRegCode, 
                    int intPatientFeeType, 
                    int intBillType, 
                    int intLoacationID, 
                    string strAdmitDateTime, 
                    string strDischargeDateTime, 
                    int intTableID, 
                    string strFilter, 
                    int intUserId, 
                    int intWorkStationId, 
                    int intError, 
                    int intPatientType, 
                    int intExcludeBedRentalDays, 
                    int intEmployeeType, 
                    int DeductStartingBedRental) {
            return base.Channel.CalculateBillExcludeBedRentalNewAsync(dsFinal, intTariffID, intDefTariffID, intEBedType, lngIPID, strRegCode, intPatientFeeType, intBillType, intLoacationID, strAdmitDateTime, strDischargeDateTime, intTableID, strFilter, intUserId, intWorkStationId, intError, intPatientType, intExcludeBedRentalDays, intEmployeeType, DeductStartingBedRental);
        }
        
        public System.Data.DataSet CalculateInterimBill(
                    System.Data.DataSet dsFinal, 
                    int intTariffID, 
                    int intDefTariffID, 
                    int intEBedType, 
                    long lngIPID, 
                    string strRegCode, 
                    int intPatientFeeType, 
                    int intBillType, 
                    int intLoacationID, 
                    string strAdmitDateTime, 
                    string strDischargeDateTime, 
                    int intTableID, 
                    string strFilter, 
                    int intUserId, 
                    int intWorkStationId, 
                    int intError, 
                    int intPatientType, 
                    int intExcludeBedRentalDays, 
                    int intEmployeeType, 
                    int DeductStartingBedRental, 
                    string fromdate, 
                    string todate) {
            return base.Channel.CalculateInterimBill(dsFinal, intTariffID, intDefTariffID, intEBedType, lngIPID, strRegCode, intPatientFeeType, intBillType, intLoacationID, strAdmitDateTime, strDischargeDateTime, intTableID, strFilter, intUserId, intWorkStationId, intError, intPatientType, intExcludeBedRentalDays, intEmployeeType, DeductStartingBedRental, fromdate, todate);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> CalculateInterimBillAsync(
                    System.Data.DataSet dsFinal, 
                    int intTariffID, 
                    int intDefTariffID, 
                    int intEBedType, 
                    long lngIPID, 
                    string strRegCode, 
                    int intPatientFeeType, 
                    int intBillType, 
                    int intLoacationID, 
                    string strAdmitDateTime, 
                    string strDischargeDateTime, 
                    int intTableID, 
                    string strFilter, 
                    int intUserId, 
                    int intWorkStationId, 
                    int intError, 
                    int intPatientType, 
                    int intExcludeBedRentalDays, 
                    int intEmployeeType, 
                    int DeductStartingBedRental, 
                    string fromdate, 
                    string todate) {
            return base.Channel.CalculateInterimBillAsync(dsFinal, intTariffID, intDefTariffID, intEBedType, lngIPID, strRegCode, intPatientFeeType, intBillType, intLoacationID, strAdmitDateTime, strDischargeDateTime, intTableID, strFilter, intUserId, intWorkStationId, intError, intPatientType, intExcludeBedRentalDays, intEmployeeType, DeductStartingBedRental, fromdate, todate);
        }
        
        public System.Data.DataTable GetPackageItems(long lngIPID, int intTariffID, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.GetPackageItems(lngIPID, intTariffID, intUserId, intWorkStationId, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetPackageItemsAsync(long lngIPID, int intTariffID, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.GetPackageItemsAsync(lngIPID, intTariffID, intUserId, intWorkStationId, intError);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Reports.IPBillingServiceClient.ModifyPatientAdmitDateResponse Reports.IPBillingServiceClient.IPBillingServiceContract.ModifyPatientAdmitDate(Reports.IPBillingServiceClient.ModifyPatientAdmitDateRequest request) {
            return base.Channel.ModifyPatientAdmitDate(request);
        }
        
        public int ModifyPatientAdmitDate(int intPatientid, string strAdmitDateTime, System.Nullable<int> intFeatureId, System.Nullable<int> intFunctionId, string strCallContext, int intWorkStationID, System.Nullable<int> intError, int intUserID) {
            Reports.IPBillingServiceClient.ModifyPatientAdmitDateRequest inValue = new Reports.IPBillingServiceClient.ModifyPatientAdmitDateRequest();
            inValue.intPatientid = intPatientid;
            inValue.strAdmitDateTime = strAdmitDateTime;
            inValue.intFeatureId = intFeatureId;
            inValue.intFunctionId = intFunctionId;
            inValue.strCallContext = strCallContext;
            inValue.intWorkStationID = intWorkStationID;
            inValue.intError = intError;
            inValue.intUserID = intUserID;
            Reports.IPBillingServiceClient.ModifyPatientAdmitDateResponse retVal = ((Reports.IPBillingServiceClient.IPBillingServiceContract)(this)).ModifyPatientAdmitDate(inValue);
            return retVal.ModifyPatientAdmitDateResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Reports.IPBillingServiceClient.ModifyPatientAdmitDateResponse> Reports.IPBillingServiceClient.IPBillingServiceContract.ModifyPatientAdmitDateAsync(Reports.IPBillingServiceClient.ModifyPatientAdmitDateRequest request) {
            return base.Channel.ModifyPatientAdmitDateAsync(request);
        }
        
        public System.Threading.Tasks.Task<Reports.IPBillingServiceClient.ModifyPatientAdmitDateResponse> ModifyPatientAdmitDateAsync(int intPatientid, string strAdmitDateTime, System.Nullable<int> intFeatureId, System.Nullable<int> intFunctionId, string strCallContext, int intWorkStationID, System.Nullable<int> intError, int intUserID) {
            Reports.IPBillingServiceClient.ModifyPatientAdmitDateRequest inValue = new Reports.IPBillingServiceClient.ModifyPatientAdmitDateRequest();
            inValue.intPatientid = intPatientid;
            inValue.strAdmitDateTime = strAdmitDateTime;
            inValue.intFeatureId = intFeatureId;
            inValue.intFunctionId = intFunctionId;
            inValue.strCallContext = strCallContext;
            inValue.intWorkStationID = intWorkStationID;
            inValue.intError = intError;
            inValue.intUserID = intUserID;
            return ((Reports.IPBillingServiceClient.IPBillingServiceContract)(this)).ModifyPatientAdmitDateAsync(inValue);
        }
        
        public System.Data.DataSet BedDetails(int intBedId, System.DateTime dtDateTime, string strTbl, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.BedDetails(intBedId, dtDateTime, strTbl, intUserId, intWorkStationId, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> BedDetailsAsync(int intBedId, System.DateTime dtDateTime, string strTbl, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.BedDetailsAsync(intBedId, dtDateTime, strTbl, intUserId, intWorkStationId, intError);
        }
        
        public bool SaveDischargeMODA(int intIPID, int intDischargeReason, string strExpiryDateTime, string strRemarks, int intPatientType, int intUserId, int intWorkStationId, int intError, int DischargeStatus, int intToHospitalId, int DAMADischargeReasonId) {
            return base.Channel.SaveDischargeMODA(intIPID, intDischargeReason, strExpiryDateTime, strRemarks, intPatientType, intUserId, intWorkStationId, intError, DischargeStatus, intToHospitalId, DAMADischargeReasonId);
        }
        
        public System.Threading.Tasks.Task<bool> SaveDischargeMODAAsync(int intIPID, int intDischargeReason, string strExpiryDateTime, string strRemarks, int intPatientType, int intUserId, int intWorkStationId, int intError, int DischargeStatus, int intToHospitalId, int DAMADischargeReasonId) {
            return base.Channel.SaveDischargeMODAAsync(intIPID, intDischargeReason, strExpiryDateTime, strRemarks, intPatientType, intUserId, intWorkStationId, intError, DischargeStatus, intToHospitalId, DAMADischargeReasonId);
        }
        
        public void GetIPBillDetailsAdv() {
            base.Channel.GetIPBillDetailsAdv();
        }
        
        public System.Threading.Tasks.Task GetIPBillDetailsAdvAsync() {
            return base.Channel.GetIPBillDetailsAdvAsync();
        }
        
        public System.Data.DataSet FetchConsultationOrderIDDetails(int startRow, int EndRow, int TableID, string FilterCondition, int UserID, int WorkStationID, int Featureid, int Functionid, string CallContext, string OrderType, int TagId) {
            return base.Channel.FetchConsultationOrderIDDetails(startRow, EndRow, TableID, FilterCondition, UserID, WorkStationID, Featureid, Functionid, CallContext, OrderType, TagId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchConsultationOrderIDDetailsAsync(int startRow, int EndRow, int TableID, string FilterCondition, int UserID, int WorkStationID, int Featureid, int Functionid, string CallContext, string OrderType, int TagId) {
            return base.Channel.FetchConsultationOrderIDDetailsAsync(startRow, EndRow, TableID, FilterCondition, UserID, WorkStationID, Featureid, Functionid, CallContext, OrderType, TagId);
        }
        
        public System.Data.DataSet GetProcdureOrderItemDetails(long lngIPID, int OrderID, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.GetProcdureOrderItemDetails(lngIPID, OrderID, intUserId, intWorkStationId, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetProcdureOrderItemDetailsAsync(long lngIPID, int OrderID, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.GetProcdureOrderItemDetailsAsync(lngIPID, OrderID, intUserId, intWorkStationId, intError);
        }
        
        public System.Data.DataSet FetchProcdureOrderIDs(int startRow, int EndRow, int TableID, string FilterCondition, int UserID, int WorkStationID, int Featureid, int Functionid, string CallContext, string OrderType, int TagId) {
            return base.Channel.FetchProcdureOrderIDs(startRow, EndRow, TableID, FilterCondition, UserID, WorkStationID, Featureid, Functionid, CallContext, OrderType, TagId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchProcdureOrderIDsAsync(int startRow, int EndRow, int TableID, string FilterCondition, int UserID, int WorkStationID, int Featureid, int Functionid, string CallContext, string OrderType, int TagId) {
            return base.Channel.FetchProcdureOrderIDsAsync(startRow, EndRow, TableID, FilterCondition, UserID, WorkStationID, Featureid, Functionid, CallContext, OrderType, TagId);
        }
        
        public System.Data.DataSet FetchInvestigationOrderIDs(int startRow, int EndRow, int TableID, string FilterCondition, int UserID, int WorkStationID, int Featureid, int Functionid, string CallContext, string OrderType, int TagId) {
            return base.Channel.FetchInvestigationOrderIDs(startRow, EndRow, TableID, FilterCondition, UserID, WorkStationID, Featureid, Functionid, CallContext, OrderType, TagId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchInvestigationOrderIDsAsync(int startRow, int EndRow, int TableID, string FilterCondition, int UserID, int WorkStationID, int Featureid, int Functionid, string CallContext, string OrderType, int TagId) {
            return base.Channel.FetchInvestigationOrderIDsAsync(startRow, EndRow, TableID, FilterCondition, UserID, WorkStationID, Featureid, Functionid, CallContext, OrderType, TagId);
        }
        
        public System.Data.DataSet FetchConsumptionOrderIDs(int startRow, int EndRow, int TableID, string FilterCondition, int UserID, int WorkStationID, int Featureid, int Functionid, string CallContext, string OrderType, int TagId) {
            return base.Channel.FetchConsumptionOrderIDs(startRow, EndRow, TableID, FilterCondition, UserID, WorkStationID, Featureid, Functionid, CallContext, OrderType, TagId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchConsumptionOrderIDsAsync(int startRow, int EndRow, int TableID, string FilterCondition, int UserID, int WorkStationID, int Featureid, int Functionid, string CallContext, string OrderType, int TagId) {
            return base.Channel.FetchConsumptionOrderIDsAsync(startRow, EndRow, TableID, FilterCondition, UserID, WorkStationID, Featureid, Functionid, CallContext, OrderType, TagId);
        }
        
        public System.Data.DataSet FetchPatientDischargeClearance(int intPatientid, int intFeatureId, int intFunctionId, string strCallContext, int intUserid, int intWorkstationid, int error) {
            return base.Channel.FetchPatientDischargeClearance(intPatientid, intFeatureId, intFunctionId, strCallContext, intUserid, intWorkstationid, error);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchPatientDischargeClearanceAsync(int intPatientid, int intFeatureId, int intFunctionId, string strCallContext, int intUserid, int intWorkstationid, int error) {
            return base.Channel.FetchPatientDischargeClearanceAsync(intPatientid, intFeatureId, intFunctionId, strCallContext, intUserid, intWorkstationid, error);
        }
        
        public System.Data.DataSet GetTestRequisitionDetailsWARD(bool blnWithFlow, long lngOrderId, string strTableId, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.GetTestRequisitionDetailsWARD(blnWithFlow, lngOrderId, strTableId, intUserId, intWorkStationId, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetTestRequisitionDetailsWARDAsync(bool blnWithFlow, long lngOrderId, string strTableId, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.GetTestRequisitionDetailsWARDAsync(blnWithFlow, lngOrderId, strTableId, intUserId, intWorkStationId, intError);
        }
        
        public System.Data.DataSet FetchPatientDetails(long lngIPNo, string strRegCode, string strType, bool blnDeleted, int intUserId, int intWorkStationId, int intError, int intLanguageID) {
            return base.Channel.FetchPatientDetails(lngIPNo, strRegCode, strType, blnDeleted, intUserId, intWorkStationId, intError, intLanguageID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchPatientDetailsAsync(long lngIPNo, string strRegCode, string strType, bool blnDeleted, int intUserId, int intWorkStationId, int intError, int intLanguageID) {
            return base.Channel.FetchPatientDetailsAsync(lngIPNo, strRegCode, strType, blnDeleted, intUserId, intWorkStationId, intError, intLanguageID);
        }
        
        public System.Data.DataSet FetchPatientBeds(long lngIPNo) {
            return base.Channel.FetchPatientBeds(lngIPNo);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchPatientBedsAsync(long lngIPNo) {
            return base.Channel.FetchPatientBedsAsync(lngIPNo);
        }
        
        public System.Data.DataSet GetBedTransferDetails(long lngIPID, int intTariffID, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.GetBedTransferDetails(lngIPID, intTariffID, intUserId, intWorkStationId, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetBedTransferDetailsAsync(long lngIPID, int intTariffID, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.GetBedTransferDetailsAsync(lngIPID, intTariffID, intUserId, intWorkStationId, intError);
        }
        
        public string SaveBill(System.Data.DataSet dsBill, string strIntrimBill, int HospitalID, int UserID, int WorkStationID, bool CheckForDuplicates) {
            return base.Channel.SaveBill(dsBill, strIntrimBill, HospitalID, UserID, WorkStationID, CheckForDuplicates);
        }
        
        public System.Threading.Tasks.Task<string> SaveBillAsync(System.Data.DataSet dsBill, string strIntrimBill, int HospitalID, int UserID, int WorkStationID, bool CheckForDuplicates) {
            return base.Channel.SaveBillAsync(dsBill, strIntrimBill, HospitalID, UserID, WorkStationID, CheckForDuplicates);
        }
        
        public string SaveInterimMainBill(int IPId, string billtype, int HospitalID, int UserID, int WorkStationID, int FeatureId, int FunctionId, string strCallcontext, int Error) {
            return base.Channel.SaveInterimMainBill(IPId, billtype, HospitalID, UserID, WorkStationID, FeatureId, FunctionId, strCallcontext, Error);
        }
        
        public System.Threading.Tasks.Task<string> SaveInterimMainBillAsync(int IPId, string billtype, int HospitalID, int UserID, int WorkStationID, int FeatureId, int FunctionId, string strCallcontext, int Error) {
            return base.Channel.SaveInterimMainBillAsync(IPId, billtype, HospitalID, UserID, WorkStationID, FeatureId, FunctionId, strCallcontext, Error);
        }
        
        public int SaveBillDispatch(int Billid, int IPID, string strDispatchto, string strRemarks, int UserID, int WorkStationID, int FeatureId, int FunctionId, string strCallcontext, int Error) {
            return base.Channel.SaveBillDispatch(Billid, IPID, strDispatchto, strRemarks, UserID, WorkStationID, FeatureId, FunctionId, strCallcontext, Error);
        }
        
        public System.Threading.Tasks.Task<int> SaveBillDispatchAsync(int Billid, int IPID, string strDispatchto, string strRemarks, int UserID, int WorkStationID, int FeatureId, int FunctionId, string strCallcontext, int Error) {
            return base.Channel.SaveBillDispatchAsync(Billid, IPID, strDispatchto, strRemarks, UserID, WorkStationID, FeatureId, FunctionId, strCallcontext, Error);
        }
        
        public bool DischargePatient(long lngIPID, int intUserID, int IntWorkStationID, int intError) {
            return base.Channel.DischargePatient(lngIPID, intUserID, IntWorkStationID, intError);
        }
        
        public System.Threading.Tasks.Task<bool> DischargePatientAsync(long lngIPID, int intUserID, int IntWorkStationID, int intError) {
            return base.Channel.DischargePatientAsync(lngIPID, intUserID, IntWorkStationID, intError);
        }
        
        public bool DischargeCancelReason(long lngIPID, int intUserID, int IntWorkStationID, int intError, int DischareCancelReason) {
            return base.Channel.DischargeCancelReason(lngIPID, intUserID, IntWorkStationID, intError, DischareCancelReason);
        }
        
        public System.Threading.Tasks.Task<bool> DischargeCancelReasonAsync(long lngIPID, int intUserID, int IntWorkStationID, int intError, int DischareCancelReason) {
            return base.Channel.DischargeCancelReasonAsync(lngIPID, intUserID, IntWorkStationID, intError, DischareCancelReason);
        }
        
        public bool DischargeCancelReasonMODA(long lngIPID, int intUserID, int IntWorkStationID, int intError, int DischareCancelReason) {
            return base.Channel.DischargeCancelReasonMODA(lngIPID, intUserID, IntWorkStationID, intError, DischareCancelReason);
        }
        
        public System.Threading.Tasks.Task<bool> DischargeCancelReasonMODAAsync(long lngIPID, int intUserID, int IntWorkStationID, int intError, int DischareCancelReason) {
            return base.Channel.DischargeCancelReasonMODAAsync(lngIPID, intUserID, IntWorkStationID, intError, DischareCancelReason);
        }
        
        public System.Data.DataSet GetDischargeCancelReasons(int Type, int userid, int Error) {
            return base.Channel.GetDischargeCancelReasons(Type, userid, Error);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetDischargeCancelReasonsAsync(int Type, int userid, int Error) {
            return base.Channel.GetDischargeCancelReasonsAsync(Type, userid, Error);
        }
        
        public bool CancelDischarge(long lngIPID, int intUserID, int IntWorkStationID, int intError) {
            return base.Channel.CancelDischarge(lngIPID, intUserID, IntWorkStationID, intError);
        }
        
        public System.Threading.Tasks.Task<bool> CancelDischargeAsync(long lngIPID, int intUserID, int IntWorkStationID, int intError) {
            return base.Channel.CancelDischargeAsync(lngIPID, intUserID, IntWorkStationID, intError);
        }
        
        public System.Data.DataSet GetPendingOrders(long lngIPID, int intUserID, int IntWorkStationID, int intError) {
            return base.Channel.GetPendingOrders(lngIPID, intUserID, IntWorkStationID, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetPendingOrdersAsync(long lngIPID, int intUserID, int IntWorkStationID, int intError) {
            return base.Channel.GetPendingOrdersAsync(lngIPID, intUserID, IntWorkStationID, intError);
        }
        
        public System.Data.DataTable GetDiscountDetails(long lngBillID, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.GetDiscountDetails(lngBillID, intUserId, intWorkStationId, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetDiscountDetailsAsync(long lngBillID, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.GetDiscountDetailsAsync(lngBillID, intUserId, intWorkStationId, intError);
        }
        
        public System.Data.DataSet GetPatientBillDetails(long lngIPID, int intUserID, int intWorkStationID, int intError) {
            return base.Channel.GetPatientBillDetails(lngIPID, intUserID, intWorkStationID, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetPatientBillDetailsAsync(long lngIPID, int intUserID, int intWorkStationID, int intError) {
            return base.Channel.GetPatientBillDetailsAsync(lngIPID, intUserID, intWorkStationID, intError);
        }
        
        public System.Data.DataSet GetServiceItemPrices(System.Data.DataSet DsItemsList, string OrderDate, int HospitalID, int TariffID, int BedTypeID, int OrderTypeID, string TableID, int UserID, int WorkStationID) {
            return base.Channel.GetServiceItemPrices(DsItemsList, OrderDate, HospitalID, TariffID, BedTypeID, OrderTypeID, TableID, UserID, WorkStationID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetServiceItemPricesAsync(System.Data.DataSet DsItemsList, string OrderDate, int HospitalID, int TariffID, int BedTypeID, int OrderTypeID, string TableID, int UserID, int WorkStationID) {
            return base.Channel.GetServiceItemPricesAsync(DsItemsList, OrderDate, HospitalID, TariffID, BedTypeID, OrderTypeID, TableID, UserID, WorkStationID);
        }
        
        public int SaveMiscOrder(int AdmissionID, System.Data.DataSet DsItems, int UserID, int WorkStationID, int Error) {
            return base.Channel.SaveMiscOrder(AdmissionID, DsItems, UserID, WorkStationID, Error);
        }
        
        public System.Threading.Tasks.Task<int> SaveMiscOrderAsync(int AdmissionID, System.Data.DataSet DsItems, int UserID, int WorkStationID, int Error) {
            return base.Channel.SaveMiscOrderAsync(AdmissionID, DsItems, UserID, WorkStationID, Error);
        }
        
        public int UpdateMiscOrder(System.Data.DataSet DsItems, int UserID, int WorkStationID, int Error) {
            return base.Channel.UpdateMiscOrder(DsItems, UserID, WorkStationID, Error);
        }
        
        public System.Threading.Tasks.Task<int> UpdateMiscOrderAsync(System.Data.DataSet DsItems, int UserID, int WorkStationID, int Error) {
            return base.Channel.UpdateMiscOrderAsync(DsItems, UserID, WorkStationID, Error);
        }
        
        public int DeleteMiscOrder(int MiscOrderID, int UserID, int WorkStationID, int Error) {
            return base.Channel.DeleteMiscOrder(MiscOrderID, UserID, WorkStationID, Error);
        }
        
        public System.Threading.Tasks.Task<int> DeleteMiscOrderAsync(int MiscOrderID, int UserID, int WorkStationID, int Error) {
            return base.Channel.DeleteMiscOrderAsync(MiscOrderID, UserID, WorkStationID, Error);
        }
        
        public System.Data.DataSet GetServices(int TableID, string FilterCondition, int UserID, int WorkStationID, int Error) {
            return base.Channel.GetServices(TableID, FilterCondition, UserID, WorkStationID, Error);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetServicesAsync(int TableID, string FilterCondition, int UserID, int WorkStationID, int Error) {
            return base.Channel.GetServicesAsync(TableID, FilterCondition, UserID, WorkStationID, Error);
        }
        
        public System.Data.DataSet GetServiceOrders(long IPID, int ServiceID, int TariffID, int TableID, int UserID, int WorkStationID, int Error) {
            return base.Channel.GetServiceOrders(IPID, ServiceID, TariffID, TableID, UserID, WorkStationID, Error);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetServiceOrdersAsync(long IPID, int ServiceID, int TariffID, int TableID, int UserID, int WorkStationID, int Error) {
            return base.Channel.GetServiceOrdersAsync(IPID, ServiceID, TariffID, TableID, UserID, WorkStationID, Error);
        }
        
        public System.Data.DataSet GetMultiPayerServiceOrders(long IPID, string ServiceID, int TariffID, int TableID, int UserID, int WorkStationID, int Error) {
            return base.Channel.GetMultiPayerServiceOrders(IPID, ServiceID, TariffID, TableID, UserID, WorkStationID, Error);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetMultiPayerServiceOrdersAsync(long IPID, string ServiceID, int TariffID, int TableID, int UserID, int WorkStationID, int Error) {
            return base.Channel.GetMultiPayerServiceOrdersAsync(IPID, ServiceID, TariffID, TableID, UserID, WorkStationID, Error);
        }
        
        public int SaveOrderItemPrices(long IPID, int ServiceID, System.Data.DataSet DsPrices, int UserID, int WorkStationID, int Error) {
            return base.Channel.SaveOrderItemPrices(IPID, ServiceID, DsPrices, UserID, WorkStationID, Error);
        }
        
        public System.Threading.Tasks.Task<int> SaveOrderItemPricesAsync(long IPID, int ServiceID, System.Data.DataSet DsPrices, int UserID, int WorkStationID, int Error) {
            return base.Channel.SaveOrderItemPricesAsync(IPID, ServiceID, DsPrices, UserID, WorkStationID, Error);
        }
        
        public System.Data.DataSet GetDepositsAndDepositRefunds(string Condition, int UserID, int WorkStationID, int Error) {
            return base.Channel.GetDepositsAndDepositRefunds(Condition, UserID, WorkStationID, Error);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetDepositsAndDepositRefundsAsync(string Condition, int UserID, int WorkStationID, int Error) {
            return base.Channel.GetDepositsAndDepositRefundsAsync(Condition, UserID, WorkStationID, Error);
        }
        
        public System.Data.DataSet GetDepositsAndDepositRefundsTuned(long AdmissionId, string Condition, int UserID, int WorkStationID, int Error) {
            return base.Channel.GetDepositsAndDepositRefundsTuned(AdmissionId, Condition, UserID, WorkStationID, Error);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetDepositsAndDepositRefundsTunedAsync(long AdmissionId, string Condition, int UserID, int WorkStationID, int Error) {
            return base.Channel.GetDepositsAndDepositRefundsTunedAsync(AdmissionId, Condition, UserID, WorkStationID, Error);
        }
        
        public System.Data.DataSet FetchInPatients(int TableID, string Condition, int UserID, int WorkStationID, int Error) {
            return base.Channel.FetchInPatients(TableID, Condition, UserID, WorkStationID, Error);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchInPatientsAsync(int TableID, string Condition, int UserID, int WorkStationID, int Error) {
            return base.Channel.FetchInPatientsAsync(TableID, Condition, UserID, WorkStationID, Error);
        }
        
        public System.Data.DataSet FetchtCurrentInPatients(int TableID, string sSelect, string Condition, int UserID, int WorkStationID, int Error) {
            return base.Channel.FetchtCurrentInPatients(TableID, sSelect, Condition, UserID, WorkStationID, Error);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchtCurrentInPatientsAsync(int TableID, string sSelect, string Condition, int UserID, int WorkStationID, int Error) {
            return base.Channel.FetchtCurrentInPatientsAsync(TableID, sSelect, Condition, UserID, WorkStationID, Error);
        }
        
        public int SaveCurrentInPatientPayableReport(System.Data.DataSet DsBillDetails, int UserID, int WorkStationID, int Error) {
            return base.Channel.SaveCurrentInPatientPayableReport(DsBillDetails, UserID, WorkStationID, Error);
        }
        
        public System.Threading.Tasks.Task<int> SaveCurrentInPatientPayableReportAsync(System.Data.DataSet DsBillDetails, int UserID, int WorkStationID, int Error) {
            return base.Channel.SaveCurrentInPatientPayableReportAsync(DsBillDetails, UserID, WorkStationID, Error);
        }
        
        public int SaveCurrentInPatientPayableReportUI(System.Data.DataSet DsBillDetails, int UserID, int WorkStationID, int Error) {
            return base.Channel.SaveCurrentInPatientPayableReportUI(DsBillDetails, UserID, WorkStationID, Error);
        }
        
        public System.Threading.Tasks.Task<int> SaveCurrentInPatientPayableReportUIAsync(System.Data.DataSet DsBillDetails, int UserID, int WorkStationID, int Error) {
            return base.Channel.SaveCurrentInPatientPayableReportUIAsync(DsBillDetails, UserID, WorkStationID, Error);
        }
        
        public int SaveCurrentInPatientPayableReportDetails(System.Data.DataSet DsBillDetails, int intFirst, int UserID, int WorkStationID, int Error) {
            return base.Channel.SaveCurrentInPatientPayableReportDetails(DsBillDetails, intFirst, UserID, WorkStationID, Error);
        }
        
        public System.Threading.Tasks.Task<int> SaveCurrentInPatientPayableReportDetailsAsync(System.Data.DataSet DsBillDetails, int intFirst, int UserID, int WorkStationID, int Error) {
            return base.Channel.SaveCurrentInPatientPayableReportDetailsAsync(DsBillDetails, intFirst, UserID, WorkStationID, Error);
        }
        
        public int SaveCurrentInPatientPayableReportDetailsUI(System.Data.DataSet DsBillDetails, int intFirst, int UserID, int WorkStationID, int Error) {
            return base.Channel.SaveCurrentInPatientPayableReportDetailsUI(DsBillDetails, intFirst, UserID, WorkStationID, Error);
        }
        
        public System.Threading.Tasks.Task<int> SaveCurrentInPatientPayableReportDetailsUIAsync(System.Data.DataSet DsBillDetails, int intFirst, int UserID, int WorkStationID, int Error) {
            return base.Channel.SaveCurrentInPatientPayableReportDetailsUIAsync(DsBillDetails, intFirst, UserID, WorkStationID, Error);
        }
        
        public int CancelMultiPayerInpatientBill(long PrimaryBillID, long SecondaryBillID, int AuthEmp, string StrReason, int UserID, int WorkStationID, int Error, int LetterId, int BillType) {
            return base.Channel.CancelMultiPayerInpatientBill(PrimaryBillID, SecondaryBillID, AuthEmp, StrReason, UserID, WorkStationID, Error, LetterId, BillType);
        }
        
        public System.Threading.Tasks.Task<int> CancelMultiPayerInpatientBillAsync(long PrimaryBillID, long SecondaryBillID, int AuthEmp, string StrReason, int UserID, int WorkStationID, int Error, int LetterId, int BillType) {
            return base.Channel.CancelMultiPayerInpatientBillAsync(PrimaryBillID, SecondaryBillID, AuthEmp, StrReason, UserID, WorkStationID, Error, LetterId, BillType);
        }
        
        public System.Data.DataSet GetBillSpecificDetails(long lnbillid, long lnIPID, string strType, int intUserID, int intWorkStationID, int intError) {
            return base.Channel.GetBillSpecificDetails(lnbillid, lnIPID, strType, intUserID, intWorkStationID, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetBillSpecificDetailsAsync(long lnbillid, long lnIPID, string strType, int intUserID, int intWorkStationID, int intError) {
            return base.Channel.GetBillSpecificDetailsAsync(lnbillid, lnIPID, strType, intUserID, intWorkStationID, intError);
        }
        
        public System.Data.DataSet GetBillMaster(long lnIPID, int intUserID, int intWorkStationID, int intError) {
            return base.Channel.GetBillMaster(lnIPID, intUserID, intWorkStationID, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetBillMasterAsync(long lnIPID, int intUserID, int intWorkStationID, int intError) {
            return base.Channel.GetBillMasterAsync(lnIPID, intUserID, intWorkStationID, intError);
        }
        
        public System.Data.DataSet GetCancelledBill(long lnIPID, long BillID, int intUserID, int intWorkStationID, int intError) {
            return base.Channel.GetCancelledBill(lnIPID, BillID, intUserID, intWorkStationID, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetCancelledBillAsync(long lnIPID, long BillID, int intUserID, int intWorkStationID, int intError) {
            return base.Channel.GetCancelledBillAsync(lnIPID, BillID, intUserID, intWorkStationID, intError);
        }
        
        public System.Data.DataSet GetOtherPayerBills(long lnbillid, long lnIPID, int intUserID, int intWorkStationID, int intError) {
            return base.Channel.GetOtherPayerBills(lnbillid, lnIPID, intUserID, intWorkStationID, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetOtherPayerBillsAsync(long lnbillid, long lnIPID, int intUserID, int intWorkStationID, int intError) {
            return base.Channel.GetOtherPayerBillsAsync(lnbillid, lnIPID, intUserID, intWorkStationID, intError);
        }
        
        public System.Data.DataTable GetDepositsForPatient(string strType, string strFilter, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.GetDepositsForPatient(strType, strFilter, intUserId, intWorkStationId, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetDepositsForPatientAsync(string strType, string strFilter, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.GetDepositsForPatientAsync(strType, strFilter, intUserId, intWorkStationId, intError);
        }
        
        public int CancelInpatientBill(long PrimaryBillID, long SecondaryBillID, int AuthEmp, string StrReason, int UserID, int WorkStationID, int Error, int LetterId, int BillType) {
            return base.Channel.CancelInpatientBill(PrimaryBillID, SecondaryBillID, AuthEmp, StrReason, UserID, WorkStationID, Error, LetterId, BillType);
        }
        
        public System.Threading.Tasks.Task<int> CancelInpatientBillAsync(long PrimaryBillID, long SecondaryBillID, int AuthEmp, string StrReason, int UserID, int WorkStationID, int Error, int LetterId, int BillType) {
            return base.Channel.CancelInpatientBillAsync(PrimaryBillID, SecondaryBillID, AuthEmp, StrReason, UserID, WorkStationID, Error, LetterId, BillType);
        }
        
        public System.Data.DataSet GetLetterDetails(int intLetterId, int intLevel, string strTableId, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.GetLetterDetails(intLetterId, intLevel, strTableId, intUserId, intWorkStationId, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetLetterDetailsAsync(int intLetterId, int intLevel, string strTableId, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.GetLetterDetailsAsync(intLetterId, intLevel, strTableId, intUserId, intWorkStationId, intError);
        }
        
        public System.Data.DataSet FetchADVProcedureDetails(string ProcedureName, string Type, string Filter, int UserId, int WstationId, int intError) {
            return base.Channel.FetchADVProcedureDetails(ProcedureName, Type, Filter, UserId, WstationId, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchADVProcedureDetailsAsync(string ProcedureName, string Type, string Filter, int UserId, int WstationId, int intError) {
            return base.Channel.FetchADVProcedureDetailsAsync(ProcedureName, Type, Filter, UserId, WstationId, intError);
        }
        
        public System.Data.DataSet GetBillID(string strFilter, int intUserId, int intWorkStationId, string strOrder, int intError) {
            return base.Channel.GetBillID(strFilter, intUserId, intWorkStationId, strOrder, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetBillIDAsync(string strFilter, int intUserId, int intWorkStationId, string strOrder, int intError) {
            return base.Channel.GetBillIDAsync(strFilter, intUserId, intWorkStationId, strOrder, intError);
        }
        
        public System.Data.DataSet FetchBillDispatch(int BillDispatchID, int intUserId, int intWorkStationId, int intError, int tagid) {
            return base.Channel.FetchBillDispatch(BillDispatchID, intUserId, intWorkStationId, intError, tagid);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchBillDispatchAsync(int BillDispatchID, int intUserId, int intWorkStationId, int intError, int tagid) {
            return base.Channel.FetchBillDispatchAsync(BillDispatchID, intUserId, intWorkStationId, intError, tagid);
        }
        
        public bool SaveCopmanyDocumentCheckList(System.Data.DataSet dsSave) {
            return base.Channel.SaveCopmanyDocumentCheckList(dsSave);
        }
        
        public System.Threading.Tasks.Task<bool> SaveCopmanyDocumentCheckListAsync(System.Data.DataSet dsSave) {
            return base.Channel.SaveCopmanyDocumentCheckListAsync(dsSave);
        }
        
        public bool SaveCheckListMaster(int documentid, string Documentname, int Documenttype, string Code, int FeatureID, int FunctionID, int USERID, int WORKSTATIONID, string strName2L, bool blnblocked) {
            return base.Channel.SaveCheckListMaster(documentid, Documentname, Documenttype, Code, FeatureID, FunctionID, USERID, WORKSTATIONID, strName2L, blnblocked);
        }
        
        public System.Threading.Tasks.Task<bool> SaveCheckListMasterAsync(int documentid, string Documentname, int Documenttype, string Code, int FeatureID, int FunctionID, int USERID, int WORKSTATIONID, string strName2L, bool blnblocked) {
            return base.Channel.SaveCheckListMasterAsync(documentid, Documentname, Documenttype, Code, FeatureID, FunctionID, USERID, WORKSTATIONID, strName2L, blnblocked);
        }
        
        public System.Data.DataSet GetDIschargeCheckListMaster(string strFilter, int intUserId, int intWorkStationId, string strOrder, int intError) {
            return base.Channel.GetDIschargeCheckListMaster(strFilter, intUserId, intWorkStationId, strOrder, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetDIschargeCheckListMasterAsync(string strFilter, int intUserId, int intWorkStationId, string strOrder, int intError) {
            return base.Channel.GetDIschargeCheckListMasterAsync(strFilter, intUserId, intWorkStationId, strOrder, intError);
        }
        
        public string SaveCancelAvailedDeposit(System.Data.DataSet dsReceipt) {
            return base.Channel.SaveCancelAvailedDeposit(dsReceipt);
        }
        
        public System.Threading.Tasks.Task<string> SaveCancelAvailedDepositAsync(System.Data.DataSet dsReceipt) {
            return base.Channel.SaveCancelAvailedDepositAsync(dsReceipt);
        }
        
        public System.Data.DataSet FetchBillDispatchsADV(string strfilter, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.FetchBillDispatchsADV(strfilter, intUserId, intWorkStationId, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchBillDispatchsADVAsync(string strfilter, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.FetchBillDispatchsADVAsync(strfilter, intUserId, intWorkStationId, intError);
        }
        
        public int ReAdmitDischargedPatient1(long lngIPID, int prevbedID, string NewBedID, string ReadmitDate, int BillBedTypeid, int ReqbedTypeID, int AllotBedTypeid, int intUserID, int IntWorkStationID, int intError, int PatientType) {
            return base.Channel.ReAdmitDischargedPatient1(lngIPID, prevbedID, NewBedID, ReadmitDate, BillBedTypeid, ReqbedTypeID, AllotBedTypeid, intUserID, IntWorkStationID, intError, PatientType);
        }
        
        public System.Threading.Tasks.Task<int> ReAdmitDischargedPatient1Async(long lngIPID, int prevbedID, string NewBedID, string ReadmitDate, int BillBedTypeid, int ReqbedTypeID, int AllotBedTypeid, int intUserID, int IntWorkStationID, int intError, int PatientType) {
            return base.Channel.ReAdmitDischargedPatient1Async(lngIPID, prevbedID, NewBedID, ReadmitDate, BillBedTypeid, ReqbedTypeID, AllotBedTypeid, intUserID, IntWorkStationID, intError, PatientType);
        }
        
        public int ReAdmitDischargedPatient(long lngIPID, int prevbedID, string NewBedID, string ReadmitDate, int BillBedTypeid, int ReqbedTypeID, int AllotBedTypeid, int intUserID, int IntWorkStationID, int intError) {
            return base.Channel.ReAdmitDischargedPatient(lngIPID, prevbedID, NewBedID, ReadmitDate, BillBedTypeid, ReqbedTypeID, AllotBedTypeid, intUserID, IntWorkStationID, intError);
        }
        
        public System.Threading.Tasks.Task<int> ReAdmitDischargedPatientAsync(long lngIPID, int prevbedID, string NewBedID, string ReadmitDate, int BillBedTypeid, int ReqbedTypeID, int AllotBedTypeid, int intUserID, int IntWorkStationID, int intError) {
            return base.Channel.ReAdmitDischargedPatientAsync(lngIPID, prevbedID, NewBedID, ReadmitDate, BillBedTypeid, ReqbedTypeID, AllotBedTypeid, intUserID, IntWorkStationID, intError);
        }
        
        public System.Data.DataSet FetchInterimPatients(int BillDays, string strCurrentdate, int intUserID, int IntWorkStationID, int intError, int FeatureID, int FunctionId, string CallContext) {
            return base.Channel.FetchInterimPatients(BillDays, strCurrentdate, intUserID, IntWorkStationID, intError, FeatureID, FunctionId, CallContext);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchInterimPatientsAsync(int BillDays, string strCurrentdate, int intUserID, int IntWorkStationID, int intError, int FeatureID, int FunctionId, string CallContext) {
            return base.Channel.FetchInterimPatientsAsync(BillDays, strCurrentdate, intUserID, IntWorkStationID, intError, FeatureID, FunctionId, CallContext);
        }
        
        public System.Data.DataSet CalculateBill(
                    System.Data.DataSet dsFinal, 
                    int intTariffID, 
                    int intDefTariffID, 
                    int intEBedType, 
                    long lngIPID, 
                    string strRegCode, 
                    int intPatientFeeType, 
                    int intBillType, 
                    int intLoacationID, 
                    string strAdmitDateTime, 
                    string strDischargeDateTime, 
                    int intTableID, 
                    string strFilter, 
                    int intUserId, 
                    int intWorkStationId, 
                    int intError, 
                    int intPatientType) {
            return base.Channel.CalculateBill(dsFinal, intTariffID, intDefTariffID, intEBedType, lngIPID, strRegCode, intPatientFeeType, intBillType, intLoacationID, strAdmitDateTime, strDischargeDateTime, intTableID, strFilter, intUserId, intWorkStationId, intError, intPatientType);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> CalculateBillAsync(
                    System.Data.DataSet dsFinal, 
                    int intTariffID, 
                    int intDefTariffID, 
                    int intEBedType, 
                    long lngIPID, 
                    string strRegCode, 
                    int intPatientFeeType, 
                    int intBillType, 
                    int intLoacationID, 
                    string strAdmitDateTime, 
                    string strDischargeDateTime, 
                    int intTableID, 
                    string strFilter, 
                    int intUserId, 
                    int intWorkStationId, 
                    int intError, 
                    int intPatientType) {
            return base.Channel.CalculateBillAsync(dsFinal, intTariffID, intDefTariffID, intEBedType, lngIPID, strRegCode, intPatientFeeType, intBillType, intLoacationID, strAdmitDateTime, strDischargeDateTime, intTableID, strFilter, intUserId, intWorkStationId, intError, intPatientType);
        }
        
        public System.Data.DataSet CalculateBillForPayOut(
                    System.Data.DataSet dsFinal, 
                    int intTariffID, 
                    int intDefTariffID, 
                    int intEBedType, 
                    long lngIPID, 
                    string strRegCode, 
                    int intPatientFeeType, 
                    int intBillType, 
                    int intLoacationID, 
                    string strAdmitDateTime, 
                    string strDischargeDateTime, 
                    int intTableID, 
                    string strFilter, 
                    int intUserId, 
                    int intWorkStationId, 
                    int intError, 
                    int intPatientType, 
                    string fromdate, 
                    string todate) {
            return base.Channel.CalculateBillForPayOut(dsFinal, intTariffID, intDefTariffID, intEBedType, lngIPID, strRegCode, intPatientFeeType, intBillType, intLoacationID, strAdmitDateTime, strDischargeDateTime, intTableID, strFilter, intUserId, intWorkStationId, intError, intPatientType, fromdate, todate);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> CalculateBillForPayOutAsync(
                    System.Data.DataSet dsFinal, 
                    int intTariffID, 
                    int intDefTariffID, 
                    int intEBedType, 
                    long lngIPID, 
                    string strRegCode, 
                    int intPatientFeeType, 
                    int intBillType, 
                    int intLoacationID, 
                    string strAdmitDateTime, 
                    string strDischargeDateTime, 
                    int intTableID, 
                    string strFilter, 
                    int intUserId, 
                    int intWorkStationId, 
                    int intError, 
                    int intPatientType, 
                    string fromdate, 
                    string todate) {
            return base.Channel.CalculateBillForPayOutAsync(dsFinal, intTariffID, intDefTariffID, intEBedType, lngIPID, strRegCode, intPatientFeeType, intBillType, intLoacationID, strAdmitDateTime, strDischargeDateTime, intTableID, strFilter, intUserId, intWorkStationId, intError, intPatientType, fromdate, todate);
        }
        
        public System.Data.DataSet CalculateBillExclusion(
                    System.Data.DataSet dsFinal, 
                    int intTariffID, 
                    int intDefTariffID, 
                    int intEBedType, 
                    long lngIPID, 
                    string strRegCode, 
                    int intPatientFeeType, 
                    int intBillType, 
                    int intLoacationID, 
                    string strAdmitDateTime, 
                    string strDischargeDateTime, 
                    int intTableID, 
                    string strFilter, 
                    int intUserId, 
                    int intWorkStationId, 
                    int intError, 
                    int intPatientType, 
                    long BillID) {
            return base.Channel.CalculateBillExclusion(dsFinal, intTariffID, intDefTariffID, intEBedType, lngIPID, strRegCode, intPatientFeeType, intBillType, intLoacationID, strAdmitDateTime, strDischargeDateTime, intTableID, strFilter, intUserId, intWorkStationId, intError, intPatientType, BillID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> CalculateBillExclusionAsync(
                    System.Data.DataSet dsFinal, 
                    int intTariffID, 
                    int intDefTariffID, 
                    int intEBedType, 
                    long lngIPID, 
                    string strRegCode, 
                    int intPatientFeeType, 
                    int intBillType, 
                    int intLoacationID, 
                    string strAdmitDateTime, 
                    string strDischargeDateTime, 
                    int intTableID, 
                    string strFilter, 
                    int intUserId, 
                    int intWorkStationId, 
                    int intError, 
                    int intPatientType, 
                    long BillID) {
            return base.Channel.CalculateBillExclusionAsync(dsFinal, intTariffID, intDefTariffID, intEBedType, lngIPID, strRegCode, intPatientFeeType, intBillType, intLoacationID, strAdmitDateTime, strDischargeDateTime, intTableID, strFilter, intUserId, intWorkStationId, intError, intPatientType, BillID);
        }
        
        public System.Data.DataSet CalculateBillExcludeBedRental(
                    System.Data.DataSet dsFinal, 
                    int intTariffID, 
                    int intDefTariffID, 
                    int intEBedType, 
                    long lngIPID, 
                    string strRegCode, 
                    int intPatientFeeType, 
                    int intBillType, 
                    int intLoacationID, 
                    string strAdmitDateTime, 
                    string strDischargeDateTime, 
                    int intTableID, 
                    string strFilter, 
                    int intUserId, 
                    int intWorkStationId, 
                    int intError, 
                    int intPatientType, 
                    int intExcludeBedRentalDays, 
                    int intEmployeeType) {
            return base.Channel.CalculateBillExcludeBedRental(dsFinal, intTariffID, intDefTariffID, intEBedType, lngIPID, strRegCode, intPatientFeeType, intBillType, intLoacationID, strAdmitDateTime, strDischargeDateTime, intTableID, strFilter, intUserId, intWorkStationId, intError, intPatientType, intExcludeBedRentalDays, intEmployeeType);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> CalculateBillExcludeBedRentalAsync(
                    System.Data.DataSet dsFinal, 
                    int intTariffID, 
                    int intDefTariffID, 
                    int intEBedType, 
                    long lngIPID, 
                    string strRegCode, 
                    int intPatientFeeType, 
                    int intBillType, 
                    int intLoacationID, 
                    string strAdmitDateTime, 
                    string strDischargeDateTime, 
                    int intTableID, 
                    string strFilter, 
                    int intUserId, 
                    int intWorkStationId, 
                    int intError, 
                    int intPatientType, 
                    int intExcludeBedRentalDays, 
                    int intEmployeeType) {
            return base.Channel.CalculateBillExcludeBedRentalAsync(dsFinal, intTariffID, intDefTariffID, intEBedType, lngIPID, strRegCode, intPatientFeeType, intBillType, intLoacationID, strAdmitDateTime, strDischargeDateTime, intTableID, strFilter, intUserId, intWorkStationId, intError, intPatientType, intExcludeBedRentalDays, intEmployeeType);
        }
        
        public decimal GetRoundedValue(decimal BillValue) {
            return base.Channel.GetRoundedValue(BillValue);
        }
        
        public System.Threading.Tasks.Task<decimal> GetRoundedValueAsync(decimal BillValue) {
            return base.Channel.GetRoundedValueAsync(BillValue);
        }
        
        public decimal GetRoundedValueHospID(decimal BillValue, int intHospitalID) {
            return base.Channel.GetRoundedValueHospID(BillValue, intHospitalID);
        }
        
        public System.Threading.Tasks.Task<decimal> GetRoundedValueHospIDAsync(decimal BillValue, int intHospitalID) {
            return base.Channel.GetRoundedValueHospIDAsync(BillValue, intHospitalID);
        }
        
        public System.Data.DataSet UpdateAgreementData(System.Data.DataSet dsAggData, int intEligibleBedTypeID, int intGradeID) {
            return base.Channel.UpdateAgreementData(dsAggData, intEligibleBedTypeID, intGradeID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> UpdateAgreementDataAsync(System.Data.DataSet dsAggData, int intEligibleBedTypeID, int intGradeID) {
            return base.Channel.UpdateAgreementDataAsync(dsAggData, intEligibleBedTypeID, intGradeID);
        }
        
        public System.Data.DataSet GetCompanyDeductables(int intCompanyID, string strCompanyType, string strTableID, int intGradeID, int intUserId, int intWorkStationId) {
            return base.Channel.GetCompanyDeductables(intCompanyID, strCompanyType, strTableID, intGradeID, intUserId, intWorkStationId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetCompanyDeductablesAsync(int intCompanyID, string strCompanyType, string strTableID, int intGradeID, int intUserId, int intWorkStationId) {
            return base.Channel.GetCompanyDeductablesAsync(intCompanyID, strCompanyType, strTableID, intGradeID, intUserId, intWorkStationId);
        }
        
        public System.Data.DataTable GetPackages(long lngIPID, int intTariffID, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.GetPackages(lngIPID, intTariffID, intUserId, intWorkStationId, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetPackagesAsync(long lngIPID, int intTariffID, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.GetPackagesAsync(lngIPID, intTariffID, intUserId, intWorkStationId, intError);
        }
        
        public System.Data.DataSet GetPackagesServiceId(long lngIPID, int intTariffID, int intServiceId, string strTableId, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.GetPackagesServiceId(lngIPID, intTariffID, intServiceId, strTableId, intUserId, intWorkStationId, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetPackagesServiceIdAsync(long lngIPID, int intTariffID, int intServiceId, string strTableId, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.GetPackagesServiceIdAsync(lngIPID, intTariffID, intServiceId, strTableId, intUserId, intWorkStationId, intError);
        }
        
        public int GetServiceID(string ServiceName) {
            return base.Channel.GetServiceID(ServiceName);
        }
        
        public System.Threading.Tasks.Task<int> GetServiceIDAsync(string ServiceName) {
            return base.Channel.GetServiceIDAsync(ServiceName);
        }
        
        public System.Data.DataTable GetBedConfigurationDetails(int intType, int intResult, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.GetBedConfigurationDetails(intType, intResult, intUserId, intWorkStationId, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetBedConfigurationDetailsAsync(int intType, int intResult, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.GetBedConfigurationDetailsAsync(intType, intResult, intUserId, intWorkStationId, intError);
        }
        
        public System.Data.DataSet GetOrderTypes(int ServiceID, int UserID, int WorkStationID) {
            return base.Channel.GetOrderTypes(ServiceID, UserID, WorkStationID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetOrderTypesAsync(int ServiceID, int UserID, int WorkStationID) {
            return base.Channel.GetOrderTypesAsync(ServiceID, UserID, WorkStationID);
        }
        
        public System.Data.DataSet GetTariffDetails(int TariffID, int intUserID, int intWorkStationID, int intError) {
            return base.Channel.GetTariffDetails(TariffID, intUserID, intWorkStationID, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetTariffDetailsAsync(int TariffID, int intUserID, int intWorkStationID, int intError) {
            return base.Channel.GetTariffDetailsAsync(TariffID, intUserID, intWorkStationID, intError);
        }
        
        public System.Data.DataSet GetTariffDetailsEstimation(int TariffID, int PatType, int intUserID, int intWorkStationID, int intError) {
            return base.Channel.GetTariffDetailsEstimation(TariffID, PatType, intUserID, intWorkStationID, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetTariffDetailsEstimationAsync(int TariffID, int PatType, int intUserID, int intWorkStationID, int intError) {
            return base.Channel.GetTariffDetailsEstimationAsync(TariffID, PatType, intUserID, intWorkStationID, intError);
        }
        
        public System.Data.DataSet GetCompanyBedRentalsLimit(int intCompanyID, string strCompanyType, string strTableID, int intGradeID, int intUserId, int intWorkStationId) {
            return base.Channel.GetCompanyBedRentalsLimit(intCompanyID, strCompanyType, strTableID, intGradeID, intUserId, intWorkStationId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetCompanyBedRentalsLimitAsync(int intCompanyID, string strCompanyType, string strTableID, int intGradeID, int intUserId, int intWorkStationId) {
            return base.Channel.GetCompanyBedRentalsLimitAsync(intCompanyID, strCompanyType, strTableID, intGradeID, intUserId, intWorkStationId);
        }
        
        public System.Data.DataSet GetIntrimBillDetails(long BillID, long lngIPID, int intUserID, int intWorkStationID, int intError) {
            return base.Channel.GetIntrimBillDetails(BillID, lngIPID, intUserID, intWorkStationID, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetIntrimBillDetailsAsync(long BillID, long lngIPID, int intUserID, int intWorkStationID, int intError) {
            return base.Channel.GetIntrimBillDetailsAsync(BillID, lngIPID, intUserID, intWorkStationID, intError);
        }
        
        public decimal GetServiceTaxConfiguration(string strTblID, int intArgeemenID, int intBedTypeID, string strServiceID, string strSpecialiseID, int intUserID, int intWorkStationID, int intError) {
            return base.Channel.GetServiceTaxConfiguration(strTblID, intArgeemenID, intBedTypeID, strServiceID, strSpecialiseID, intUserID, intWorkStationID, intError);
        }
        
        public System.Threading.Tasks.Task<decimal> GetServiceTaxConfigurationAsync(string strTblID, int intArgeemenID, int intBedTypeID, string strServiceID, string strSpecialiseID, int intUserID, int intWorkStationID, int intError) {
            return base.Channel.GetServiceTaxConfigurationAsync(strTblID, intArgeemenID, intBedTypeID, strServiceID, strSpecialiseID, intUserID, intWorkStationID, intError);
        }
        
        public System.Data.DataTable FetchDisplayService(int intType, string strFilter, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.FetchDisplayService(intType, strFilter, intUserId, intWorkStationId, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> FetchDisplayServiceAsync(int intType, string strFilter, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.FetchDisplayServiceAsync(intType, strFilter, intUserId, intWorkStationId, intError);
        }
        
        public System.Data.DataTable GetServiceDependencyDetails(int intTariffID, int intTable, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.GetServiceDependencyDetails(intTariffID, intTable, intUserId, intWorkStationId, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetServiceDependencyDetailsAsync(int intTariffID, int intTable, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.GetServiceDependencyDetailsAsync(intTariffID, intTable, intUserId, intWorkStationId, intError);
        }
        
        public System.Data.DataSet GetPackageDetails(int PackageID, int intUserID, int intWorkStationID, int intError) {
            return base.Channel.GetPackageDetails(PackageID, intUserID, intWorkStationID, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetPackageDetailsAsync(int PackageID, int intUserID, int intWorkStationID, int intError) {
            return base.Channel.GetPackageDetailsAsync(PackageID, intUserID, intWorkStationID, intError);
        }
        
        public System.Data.DataSet GetIPBillDetails(string strSelect, string strFilter, string strOrder, int intUserId, int intWorkStId) {
            return base.Channel.GetIPBillDetails(strSelect, strFilter, strOrder, intUserId, intWorkStId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetIPBillDetailsAsync(string strSelect, string strFilter, string strOrder, int intUserId, int intWorkStId) {
            return base.Channel.GetIPBillDetailsAsync(strSelect, strFilter, strOrder, intUserId, intWorkStId);
        }
        
        public string SaveScrollReport(System.Data.DataSet dsScroll, int intScrollModuleId, int ScrollUserId, int intUserId, int intWorkStationId, int intRoutID) {
            return base.Channel.SaveScrollReport(dsScroll, intScrollModuleId, ScrollUserId, intUserId, intWorkStationId, intRoutID);
        }
        
        public System.Threading.Tasks.Task<string> SaveScrollReportAsync(System.Data.DataSet dsScroll, int intScrollModuleId, int ScrollUserId, int intUserId, int intWorkStationId, int intRoutID) {
            return base.Channel.SaveScrollReportAsync(dsScroll, intScrollModuleId, ScrollUserId, intUserId, intWorkStationId, intRoutID);
        }
        
        public System.Data.DataSet GetScrollReportData(int intScrollId, string strTbl, int intUserId, int intWorkStationId) {
            return base.Channel.GetScrollReportData(intScrollId, strTbl, intUserId, intWorkStationId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetScrollReportDataAsync(int intScrollId, string strTbl, int intUserId, int intWorkStationId) {
            return base.Channel.GetScrollReportDataAsync(intScrollId, strTbl, intUserId, intWorkStationId);
        }
        
        public bool SaveProceduresOrdered(System.Data.DataSet objDS, int intUserid, int intWorkstationid) {
            return base.Channel.SaveProceduresOrdered(objDS, intUserid, intWorkstationid);
        }
        
        public System.Threading.Tasks.Task<bool> SaveProceduresOrderedAsync(System.Data.DataSet objDS, int intUserid, int intWorkstationid) {
            return base.Channel.SaveProceduresOrderedAsync(objDS, intUserid, intWorkstationid);
        }
        
        public bool SaveTestRequisition(bool bModify, System.Data.DataSet dsRequisition, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.SaveTestRequisition(bModify, dsRequisition, intUserId, intWorkStationId, intError);
        }
        
        public System.Threading.Tasks.Task<bool> SaveTestRequisitionAsync(bool bModify, System.Data.DataSet dsRequisition, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.SaveTestRequisitionAsync(bModify, dsRequisition, intUserId, intWorkStationId, intError);
        }
        
        public bool SaveIPConsultation(System.Data.DataSet objDS, int intIPID, int intConsultationID, int intUserID, int intWorkStationId, byte bytBlocked) {
            return base.Channel.SaveIPConsultation(objDS, intIPID, intConsultationID, intUserID, intWorkStationId, bytBlocked);
        }
        
        public System.Threading.Tasks.Task<bool> SaveIPConsultationAsync(System.Data.DataSet objDS, int intIPID, int intConsultationID, int intUserID, int intWorkStationId, byte bytBlocked) {
            return base.Channel.SaveIPConsultationAsync(objDS, intIPID, intConsultationID, intUserID, intWorkStationId, bytBlocked);
        }
        
        public string SaveIPDoctorVisits(System.Data.DataSet objDS, int intIPID, int intConsultationID, int intUserID, int intWorkStationId, byte bytBlocked) {
            return base.Channel.SaveIPDoctorVisits(objDS, intIPID, intConsultationID, intUserID, intWorkStationId, bytBlocked);
        }
        
        public System.Threading.Tasks.Task<string> SaveIPDoctorVisitsAsync(System.Data.DataSet objDS, int intIPID, int intConsultationID, int intUserID, int intWorkStationId, byte bytBlocked) {
            return base.Channel.SaveIPDoctorVisitsAsync(objDS, intIPID, intConsultationID, intUserID, intWorkStationId, bytBlocked);
        }
        
        public bool SaveEquipmentUsage(System.Data.DataSet objDS, int intUserID, int intWorkStationId) {
            return base.Channel.SaveEquipmentUsage(objDS, intUserID, intWorkStationId);
        }
        
        public System.Threading.Tasks.Task<bool> SaveEquipmentUsageAsync(System.Data.DataSet objDS, int intUserID, int intWorkStationId) {
            return base.Channel.SaveEquipmentUsageAsync(objDS, intUserID, intWorkStationId);
        }
        
        public System.Data.DataSet FetchIPConsultations(string strFilter, int intUserId, int intWorkStation) {
            return base.Channel.FetchIPConsultations(strFilter, intUserId, intWorkStation);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchIPConsultationsAsync(string strFilter, int intUserId, int intWorkStation) {
            return base.Channel.FetchIPConsultationsAsync(strFilter, intUserId, intWorkStation);
        }
        
        public System.Data.DataSet FetchIPOrdersForBilling(long lngIPID, string IPOrdeID, int intTariffID, int ServiceID, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.FetchIPOrdersForBilling(lngIPID, IPOrdeID, intTariffID, ServiceID, intUserId, intWorkStationId, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchIPOrdersForBillingAsync(long lngIPID, string IPOrdeID, int intTariffID, int ServiceID, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.FetchIPOrdersForBillingAsync(lngIPID, IPOrdeID, intTariffID, ServiceID, intUserId, intWorkStationId, intError);
        }
        
        public System.Data.DataSet GetPackagesForConsumption(long lngIPID, string IPOrdeID, int intTariffID, int ServiceID, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.GetPackagesForConsumption(lngIPID, IPOrdeID, intTariffID, ServiceID, intUserId, intWorkStationId, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetPackagesForConsumptionAsync(long lngIPID, string IPOrdeID, int intTariffID, int ServiceID, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.GetPackagesForConsumptionAsync(lngIPID, IPOrdeID, intTariffID, ServiceID, intUserId, intWorkStationId, intError);
        }
        
        public System.Data.DataSet GetOrdersOfService(long IPID, int ServiceID, int TariffID, int TableID, int UserID, int WorkStationID, int Error) {
            return base.Channel.GetOrdersOfService(IPID, ServiceID, TariffID, TableID, UserID, WorkStationID, Error);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetOrdersOfServiceAsync(long IPID, int ServiceID, int TariffID, int TableID, int UserID, int WorkStationID, int Error) {
            return base.Channel.GetOrdersOfServiceAsync(IPID, ServiceID, TariffID, TableID, UserID, WorkStationID, Error);
        }
        
        public bool ModifyProceduersOrdered(System.Data.DataSet objDS, int intUserid, int intWorkstationid) {
            return base.Channel.ModifyProceduersOrdered(objDS, intUserid, intWorkstationid);
        }
        
        public System.Threading.Tasks.Task<bool> ModifyProceduersOrderedAsync(System.Data.DataSet objDS, int intUserid, int intWorkstationid) {
            return base.Channel.ModifyProceduersOrderedAsync(objDS, intUserid, intWorkstationid);
        }
        
        public bool DeleteIPDoctorVisits(int intIPID, int intConsultationID, int intUserID, int intWorkStationId) {
            return base.Channel.DeleteIPDoctorVisits(intIPID, intConsultationID, intUserID, intWorkStationId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteIPDoctorVisitsAsync(int intIPID, int intConsultationID, int intUserID, int intWorkStationId) {
            return base.Channel.DeleteIPDoctorVisitsAsync(intIPID, intConsultationID, intUserID, intWorkStationId);
        }
        
        public bool DeleteProceduresOrdered(System.Data.DataSet objDS, int intUserID, int intWorkStationId) {
            return base.Channel.DeleteProceduresOrdered(objDS, intUserID, intWorkStationId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteProceduresOrderedAsync(System.Data.DataSet objDS, int intUserID, int intWorkStationId) {
            return base.Channel.DeleteProceduresOrderedAsync(objDS, intUserID, intWorkStationId);
        }
        
        public bool DeleteTestRequisition(long lngTestOrderId, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.DeleteTestRequisition(lngTestOrderId, intUserId, intWorkStationId, intError);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteTestRequisitionAsync(long lngTestOrderId, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.DeleteTestRequisitionAsync(lngTestOrderId, intUserId, intWorkStationId, intError);
        }
        
        public System.Data.DataSet GetTestRequisitionDetails(bool blnWithFlow, long lngOrderId, string strTableId, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.GetTestRequisitionDetails(blnWithFlow, lngOrderId, strTableId, intUserId, intWorkStationId, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetTestRequisitionDetailsAsync(bool blnWithFlow, long lngOrderId, string strTableId, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.GetTestRequisitionDetailsAsync(blnWithFlow, lngOrderId, strTableId, intUserId, intWorkStationId, intError);
        }
        
        public System.Data.DataSet GetSpecializationConfig(int intType, int intResult, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.GetSpecializationConfig(intType, intResult, intUserId, intWorkStationId, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetSpecializationConfigAsync(int intType, int intResult, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.GetSpecializationConfigAsync(intType, intResult, intUserId, intWorkStationId, intError);
        }
        
        public System.Data.DataSet FetchSurgeryData(string strProcedureID, string strType, int intUserID, int intWorkStationID) {
            return base.Channel.FetchSurgeryData(strProcedureID, strType, intUserID, intWorkStationID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchSurgeryDataAsync(string strProcedureID, string strType, int intUserID, int intWorkStationID) {
            return base.Channel.FetchSurgeryDataAsync(strProcedureID, strType, intUserID, intWorkStationID);
        }
        
        public string SaveSurgeryRecord(System.Data.DataSet objDSSurgery, int intUserId, int intWorkStationId) {
            return base.Channel.SaveSurgeryRecord(objDSSurgery, intUserId, intWorkStationId);
        }
        
        public System.Threading.Tasks.Task<string> SaveSurgeryRecordAsync(System.Data.DataSet objDSSurgery, int intUserId, int intWorkStationId) {
            return base.Channel.SaveSurgeryRecordAsync(objDSSurgery, intUserId, intWorkStationId);
        }
        
        public System.Data.DataSet FetchPatSurgeryCaseSheet(int intSurgeryID, int intAdmissionID, int intOrderID, int intUserId, int intWorkStationId) {
            return base.Channel.FetchPatSurgeryCaseSheet(intSurgeryID, intAdmissionID, intOrderID, intUserId, intWorkStationId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchPatSurgeryCaseSheetAsync(int intSurgeryID, int intAdmissionID, int intOrderID, int intUserId, int intWorkStationId) {
            return base.Channel.FetchPatSurgeryCaseSheetAsync(intSurgeryID, intAdmissionID, intOrderID, intUserId, intWorkStationId);
        }
        
        public int SavePatCaseSheet(System.Data.DataSet objDS, int intUserID, int intWorkStationId, int intBillID, int intPackageID, int intBillItemSeq) {
            return base.Channel.SavePatCaseSheet(objDS, intUserID, intWorkStationId, intBillID, intPackageID, intBillItemSeq);
        }
        
        public System.Threading.Tasks.Task<int> SavePatCaseSheetAsync(System.Data.DataSet objDS, int intUserID, int intWorkStationId, int intBillID, int intPackageID, int intBillItemSeq) {
            return base.Channel.SavePatCaseSheetAsync(objDS, intUserID, intWorkStationId, intBillID, intPackageID, intBillItemSeq);
        }
        
        public System.Data.DataSet FetchSurgeryOrdersDetails(int intOrderID, int intUserId, int intWorkStationId) {
            return base.Channel.FetchSurgeryOrdersDetails(intOrderID, intUserId, intWorkStationId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchSurgeryOrdersDetailsAsync(int intOrderID, int intUserId, int intWorkStationId) {
            return base.Channel.FetchSurgeryOrdersDetailsAsync(intOrderID, intUserId, intWorkStationId);
        }
        
        public bool CancelSurgeryRecord(int intOrderID, int intRevert, int intUserId, int intWorkStationId) {
            return base.Channel.CancelSurgeryRecord(intOrderID, intRevert, intUserId, intWorkStationId);
        }
        
        public System.Threading.Tasks.Task<bool> CancelSurgeryRecordAsync(int intOrderID, int intRevert, int intUserId, int intWorkStationId) {
            return base.Channel.CancelSurgeryRecordAsync(intOrderID, intRevert, intUserId, intWorkStationId);
        }
        
        public System.Data.DataSet FetchAnaesthesia(int intUserId, int intWorkStationId) {
            return base.Channel.FetchAnaesthesia(intUserId, intWorkStationId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchAnaesthesiaAsync(int intUserId, int intWorkStationId) {
            return base.Channel.FetchAnaesthesiaAsync(intUserId, intWorkStationId);
        }
        
        public System.Data.DataSet FetchPriority(int intUserID, int intWorkStationID) {
            return base.Channel.FetchPriority(intUserID, intWorkStationID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchPriorityAsync(int intUserID, int intWorkStationID) {
            return base.Channel.FetchPriorityAsync(intUserID, intWorkStationID);
        }
        
        public System.Data.DataSet FetchSurgeryResources(int intSurgeryID, int intUserId, int intWorkStationId) {
            return base.Channel.FetchSurgeryResources(intSurgeryID, intUserId, intWorkStationId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchSurgeryResourcesAsync(int intSurgeryID, int intUserId, int intWorkStationId) {
            return base.Channel.FetchSurgeryResourcesAsync(intSurgeryID, intUserId, intWorkStationId);
        }
        
        public System.Data.DataSet FetchOTs(int intUserId, int intWorkStationId, int intError, int intDeptID) {
            return base.Channel.FetchOTs(intUserId, intWorkStationId, intError, intDeptID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchOTsAsync(int intUserId, int intWorkStationId, int intError, int intDeptID) {
            return base.Channel.FetchOTsAsync(intUserId, intWorkStationId, intError, intDeptID);
        }
        
        public System.Data.DataSet GetEquipmentTaskStatus(int intUserId, int intWorkStationId) {
            return base.Channel.GetEquipmentTaskStatus(intUserId, intWorkStationId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetEquipmentTaskStatusAsync(int intUserId, int intWorkStationId) {
            return base.Channel.GetEquipmentTaskStatusAsync(intUserId, intWorkStationId);
        }
        
        public int SaveEquipmentUsageforConsumption(System.Data.DataSet objDS, int intUserID, int intWorkStationId) {
            return base.Channel.SaveEquipmentUsageforConsumption(objDS, intUserID, intWorkStationId);
        }
        
        public System.Threading.Tasks.Task<int> SaveEquipmentUsageforConsumptionAsync(System.Data.DataSet objDS, int intUserID, int intWorkStationId) {
            return base.Channel.SaveEquipmentUsageforConsumptionAsync(objDS, intUserID, intWorkStationId);
        }
        
        public System.Data.DataSet FetchPatientIPDemographics(string strType, string strIPId, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.FetchPatientIPDemographics(strType, strIPId, intUserId, intWorkStationId, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchPatientIPDemographicsAsync(string strType, string strIPId, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.FetchPatientIPDemographicsAsync(strType, strIPId, intUserId, intWorkStationId, intError);
        }
        
        public System.Data.DataSet FetchEquipmentConnection(int intConnectionID, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.FetchEquipmentConnection(intConnectionID, intUserId, intWorkStationId, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchEquipmentConnectionAsync(int intConnectionID, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.FetchEquipmentConnectionAsync(intConnectionID, intUserId, intWorkStationId, intError);
        }
        
        public bool CancelEquipmentUsage(int intOrderID, int intUserID, int intWorkStationId) {
            return base.Channel.CancelEquipmentUsage(intOrderID, intUserID, intWorkStationId);
        }
        
        public System.Threading.Tasks.Task<bool> CancelEquipmentUsageAsync(int intOrderID, int intUserID, int intWorkStationId) {
            return base.Channel.CancelEquipmentUsageAsync(intOrderID, intUserID, intWorkStationId);
        }
        
        public System.Data.DataSet FetchPatientEpisode(string strType, int intUserId, int intWorkStationId, int intEpisodeID, int intMonitorID, int intVisitID) {
            return base.Channel.FetchPatientEpisode(strType, intUserId, intWorkStationId, intEpisodeID, intMonitorID, intVisitID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchPatientEpisodeAsync(string strType, int intUserId, int intWorkStationId, int intEpisodeID, int intMonitorID, int intVisitID) {
            return base.Channel.FetchPatientEpisodeAsync(strType, intUserId, intWorkStationId, intEpisodeID, intMonitorID, intVisitID);
        }
        
        public string GetPatientServices(long IPID, int tariffId, int Userid, int workstationId) {
            return base.Channel.GetPatientServices(IPID, tariffId, Userid, workstationId);
        }
        
        public System.Threading.Tasks.Task<string> GetPatientServicesAsync(long IPID, int tariffId, int Userid, int workstationId) {
            return base.Channel.GetPatientServicesAsync(IPID, tariffId, Userid, workstationId);
        }
        
        public System.Data.DataSet GetHISConfigurationDetails(int intType, int intResult, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.GetHISConfigurationDetails(intType, intResult, intUserId, intWorkStationId, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetHISConfigurationDetailsAsync(int intType, int intResult, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.GetHISConfigurationDetailsAsync(intType, intResult, intUserId, intWorkStationId, intError);
        }
        
        public bool SaveDischarge(int intIPID, int intDischargeReason, string strExpiryDateTime, string strRemarks, int intPatientType, int intUserId, int intWorkStationId, int intError, int DischargeStatus) {
            return base.Channel.SaveDischarge(intIPID, intDischargeReason, strExpiryDateTime, strRemarks, intPatientType, intUserId, intWorkStationId, intError, DischargeStatus);
        }
        
        public System.Threading.Tasks.Task<bool> SaveDischargeAsync(int intIPID, int intDischargeReason, string strExpiryDateTime, string strRemarks, int intPatientType, int intUserId, int intWorkStationId, int intError, int DischargeStatus) {
            return base.Channel.SaveDischargeAsync(intIPID, intDischargeReason, strExpiryDateTime, strRemarks, intPatientType, intUserId, intWorkStationId, intError, DischargeStatus);
        }
        
        public System.Data.DataSet GetPatientIPID(int intTableId, string strFilter, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.GetPatientIPID(intTableId, strFilter, intUserId, intWorkStationId, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetPatientIPIDAsync(int intTableId, string strFilter, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.GetPatientIPIDAsync(intTableId, strFilter, intUserId, intWorkStationId, intError);
        }
        
        public System.Data.DataSet GetPatientDetails(int intPatientStatus, int intIPID, string strRegCode, string strType, bool blnDeleted, int intUserId, int intWorkStationId, int intError, int Languageid) {
            return base.Channel.GetPatientDetails(intPatientStatus, intIPID, strRegCode, strType, blnDeleted, intUserId, intWorkStationId, intError, Languageid);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetPatientDetailsAsync(int intPatientStatus, int intIPID, string strRegCode, string strType, bool blnDeleted, int intUserId, int intWorkStationId, int intError, int Languageid) {
            return base.Channel.GetPatientDetailsAsync(intPatientStatus, intIPID, strRegCode, strType, blnDeleted, intUserId, intWorkStationId, intError, Languageid);
        }
        
        public System.Data.DataSet getBedTransReqDetails(string strType, System.DateTime dtFromDate, System.DateTime dtToDate, int intUserId, int intWorkStationId, int intError, int IPID, int HospitalID) {
            return base.Channel.getBedTransReqDetails(strType, dtFromDate, dtToDate, intUserId, intWorkStationId, intError, IPID, HospitalID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> getBedTransReqDetailsAsync(string strType, System.DateTime dtFromDate, System.DateTime dtToDate, int intUserId, int intWorkStationId, int intError, int IPID, int HospitalID) {
            return base.Channel.getBedTransReqDetailsAsync(strType, dtFromDate, dtToDate, intUserId, intWorkStationId, intError, IPID, HospitalID);
        }
        
        public System.Data.DataSet GetMasters(int intType, string strFilter, int intUserId, int intWorkStationId, int intError, int LanguageID) {
            return base.Channel.GetMasters(intType, strFilter, intUserId, intWorkStationId, intError, LanguageID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetMastersAsync(int intType, string strFilter, int intUserId, int intWorkStationId, int intError, int LanguageID) {
            return base.Channel.GetMastersAsync(intType, strFilter, intUserId, intWorkStationId, intError, LanguageID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Reports.IPBillingServiceClient.ApplyAgreementRuleResponse Reports.IPBillingServiceClient.IPBillingServiceContract.ApplyAgreementRule(Reports.IPBillingServiceClient.ApplyAgreementRuleRequest request) {
            return base.Channel.ApplyAgreementRule(request);
        }
        
        public System.Data.DataSet[] ApplyAgreementRule(int EBedType, System.Data.DataSet DsPayerBill, int PatientFeeType, int intTariffID, int intLetterID, int intGradeID, int intCompanyID, int intIPID, int intUserID, int intWorkStationID, int intError, bool IsOPPackage, bool IsIntrimBill) {
            Reports.IPBillingServiceClient.ApplyAgreementRuleRequest inValue = new Reports.IPBillingServiceClient.ApplyAgreementRuleRequest();
            inValue.EBedType = EBedType;
            inValue.DsPayerBill = DsPayerBill;
            inValue.PatientFeeType = PatientFeeType;
            inValue.intTariffID = intTariffID;
            inValue.intLetterID = intLetterID;
            inValue.intGradeID = intGradeID;
            inValue.intCompanyID = intCompanyID;
            inValue.intIPID = intIPID;
            inValue.intUserID = intUserID;
            inValue.intWorkStationID = intWorkStationID;
            inValue.intError = intError;
            inValue.IsOPPackage = IsOPPackage;
            inValue.IsIntrimBill = IsIntrimBill;
            Reports.IPBillingServiceClient.ApplyAgreementRuleResponse retVal = ((Reports.IPBillingServiceClient.IPBillingServiceContract)(this)).ApplyAgreementRule(inValue);
            return retVal.ApplyAgreementRuleResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Reports.IPBillingServiceClient.ApplyAgreementRuleResponse> Reports.IPBillingServiceClient.IPBillingServiceContract.ApplyAgreementRuleAsync(Reports.IPBillingServiceClient.ApplyAgreementRuleRequest request) {
            return base.Channel.ApplyAgreementRuleAsync(request);
        }
        
        public System.Threading.Tasks.Task<Reports.IPBillingServiceClient.ApplyAgreementRuleResponse> ApplyAgreementRuleAsync(int EBedType, System.Data.DataSet DsPayerBill, int PatientFeeType, int intTariffID, int intLetterID, int intGradeID, int intCompanyID, int intIPID, int intUserID, int intWorkStationID, int intError, bool IsOPPackage, bool IsIntrimBill) {
            Reports.IPBillingServiceClient.ApplyAgreementRuleRequest inValue = new Reports.IPBillingServiceClient.ApplyAgreementRuleRequest();
            inValue.EBedType = EBedType;
            inValue.DsPayerBill = DsPayerBill;
            inValue.PatientFeeType = PatientFeeType;
            inValue.intTariffID = intTariffID;
            inValue.intLetterID = intLetterID;
            inValue.intGradeID = intGradeID;
            inValue.intCompanyID = intCompanyID;
            inValue.intIPID = intIPID;
            inValue.intUserID = intUserID;
            inValue.intWorkStationID = intWorkStationID;
            inValue.intError = intError;
            inValue.IsOPPackage = IsOPPackage;
            inValue.IsIntrimBill = IsIntrimBill;
            return ((Reports.IPBillingServiceClient.IPBillingServiceContract)(this)).ApplyAgreementRuleAsync(inValue);
        }
        
        public System.Data.DataSet CalculateServiceTaxandTotal(System.Data.DataTable dtIPBillDetails, int intTariffID, bool blnIsServiceTax, long lngIPID, string strRegCode, int intPatientFeeType, int intLoacationID, int intCompanyID, int intGradeID, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.CalculateServiceTaxandTotal(dtIPBillDetails, intTariffID, blnIsServiceTax, lngIPID, strRegCode, intPatientFeeType, intLoacationID, intCompanyID, intGradeID, intUserId, intWorkStationId, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> CalculateServiceTaxandTotalAsync(System.Data.DataTable dtIPBillDetails, int intTariffID, bool blnIsServiceTax, long lngIPID, string strRegCode, int intPatientFeeType, int intLoacationID, int intCompanyID, int intGradeID, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.CalculateServiceTaxandTotalAsync(dtIPBillDetails, intTariffID, blnIsServiceTax, lngIPID, strRegCode, intPatientFeeType, intLoacationID, intCompanyID, intGradeID, intUserId, intWorkStationId, intError);
        }
        
        public System.Data.DataSet CalculateServiceTaxandTotalC(System.Data.DataTable dtIPBillDetails, int intTariffID, bool blnIsServiceTax, long lngIPID, string strRegCode, int intPatientFeeType, int intLoacationID, int intCompanyID, int intGradeID, int intUserId, int intWorkStationId, int intError, int intPatientType, int intSpecId) {
            return base.Channel.CalculateServiceTaxandTotalC(dtIPBillDetails, intTariffID, blnIsServiceTax, lngIPID, strRegCode, intPatientFeeType, intLoacationID, intCompanyID, intGradeID, intUserId, intWorkStationId, intError, intPatientType, intSpecId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> CalculateServiceTaxandTotalCAsync(System.Data.DataTable dtIPBillDetails, int intTariffID, bool blnIsServiceTax, long lngIPID, string strRegCode, int intPatientFeeType, int intLoacationID, int intCompanyID, int intGradeID, int intUserId, int intWorkStationId, int intError, int intPatientType, int intSpecId) {
            return base.Channel.CalculateServiceTaxandTotalCAsync(dtIPBillDetails, intTariffID, blnIsServiceTax, lngIPID, strRegCode, intPatientFeeType, intLoacationID, intCompanyID, intGradeID, intUserId, intWorkStationId, intError, intPatientType, intSpecId);
        }
        
        public System.Data.DataSet CalculateServiceTaxandTotalCPerf(System.Data.DataSet dsIPBillDetails, int intTariffID, bool blnIsServiceTax, long lngIPID, string strRegCode, int intPatientFeeType, int intLoacationID, int intCompanyID, int intGradeID, int intUserId, int intWorkStationId, int intError, int intPatientType, int intSpecId) {
            return base.Channel.CalculateServiceTaxandTotalCPerf(dsIPBillDetails, intTariffID, blnIsServiceTax, lngIPID, strRegCode, intPatientFeeType, intLoacationID, intCompanyID, intGradeID, intUserId, intWorkStationId, intError, intPatientType, intSpecId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> CalculateServiceTaxandTotalCPerfAsync(System.Data.DataSet dsIPBillDetails, int intTariffID, bool blnIsServiceTax, long lngIPID, string strRegCode, int intPatientFeeType, int intLoacationID, int intCompanyID, int intGradeID, int intUserId, int intWorkStationId, int intError, int intPatientType, int intSpecId) {
            return base.Channel.CalculateServiceTaxandTotalCPerfAsync(dsIPBillDetails, intTariffID, blnIsServiceTax, lngIPID, strRegCode, intPatientFeeType, intLoacationID, intCompanyID, intGradeID, intUserId, intWorkStationId, intError, intPatientType, intSpecId);
        }
        
        public System.Data.DataSet GetDepositRefundReciepts(string Condition, int UserID, int WorkStationID, int Error) {
            return base.Channel.GetDepositRefundReciepts(Condition, UserID, WorkStationID, Error);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetDepositRefundRecieptsAsync(string Condition, int UserID, int WorkStationID, int Error) {
            return base.Channel.GetDepositRefundRecieptsAsync(Condition, UserID, WorkStationID, Error);
        }
        
        public System.Data.DataTable GetPackageBreakupDetails(string strBillNo, int intPatientType, int intTableId, int intSequence, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.GetPackageBreakupDetails(strBillNo, intPatientType, intTableId, intSequence, intUserId, intWorkStationId, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetPackageBreakupDetailsAsync(string strBillNo, int intPatientType, int intTableId, int intSequence, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.GetPackageBreakupDetailsAsync(strBillNo, intPatientType, intTableId, intSequence, intUserId, intWorkStationId, intError);
        }
        
        public string SavePatientRemarks(int intpatientid, string remarks, int UserID, int WorkStationID, int Error, int ipid) {
            return base.Channel.SavePatientRemarks(intpatientid, remarks, UserID, WorkStationID, Error, ipid);
        }
        
        public System.Threading.Tasks.Task<string> SavePatientRemarksAsync(int intpatientid, string remarks, int UserID, int WorkStationID, int Error, int ipid) {
            return base.Channel.SavePatientRemarksAsync(intpatientid, remarks, UserID, WorkStationID, Error, ipid);
        }
        
        public System.Data.DataSet GetRemarksDetails(string intType, string strFilter, int intUserID, int intWorStationID) {
            return base.Channel.GetRemarksDetails(intType, strFilter, intUserID, intWorStationID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetRemarksDetailsAsync(string intType, string strFilter, int intUserID, int intWorStationID) {
            return base.Channel.GetRemarksDetailsAsync(intType, strFilter, intUserID, intWorStationID);
        }
        
        public bool SaveInpatientDiscount(System.Data.DataSet dsDiscount, long lngAdmissionID, int intAuthorisedBy, string strRemarks, int intDiscountTypeID, int intDiscountID, string strDiscountDate, string strDiscountNo, int intInpatientDiscountID, int intHospitalID, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.SaveInpatientDiscount(dsDiscount, lngAdmissionID, intAuthorisedBy, strRemarks, intDiscountTypeID, intDiscountID, strDiscountDate, strDiscountNo, intInpatientDiscountID, intHospitalID, intUserId, intWorkStationId, intError);
        }
        
        public System.Threading.Tasks.Task<bool> SaveInpatientDiscountAsync(System.Data.DataSet dsDiscount, long lngAdmissionID, int intAuthorisedBy, string strRemarks, int intDiscountTypeID, int intDiscountID, string strDiscountDate, string strDiscountNo, int intInpatientDiscountID, int intHospitalID, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.SaveInpatientDiscountAsync(dsDiscount, lngAdmissionID, intAuthorisedBy, strRemarks, intDiscountTypeID, intDiscountID, strDiscountDate, strDiscountNo, intInpatientDiscountID, intHospitalID, intUserId, intWorkStationId, intError);
        }
    }
}
