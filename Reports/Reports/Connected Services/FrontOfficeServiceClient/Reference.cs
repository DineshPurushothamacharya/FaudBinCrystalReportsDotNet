//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Reports.FrontOfficeServiceClient {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
    [System.SerializableAttribute()]
    public partial class NextGenCustomException : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorDetailsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorMessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorSourceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorStackTraceField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorCode {
            get {
                return this.ErrorCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorCodeField, value) != true)) {
                    this.ErrorCodeField = value;
                    this.RaisePropertyChanged("ErrorCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorDetails {
            get {
                return this.ErrorDetailsField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorDetailsField, value) != true)) {
                    this.ErrorDetailsField = value;
                    this.RaisePropertyChanged("ErrorDetails");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorMessage {
            get {
                return this.ErrorMessageField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorMessageField, value) != true)) {
                    this.ErrorMessageField = value;
                    this.RaisePropertyChanged("ErrorMessage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorSource {
            get {
                return this.ErrorSourceField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorSourceField, value) != true)) {
                    this.ErrorSourceField = value;
                    this.RaisePropertyChanged("ErrorSource");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorStackTrace {
            get {
                return this.ErrorStackTraceField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorStackTraceField, value) != true)) {
                    this.ErrorStackTraceField = value;
                    this.RaisePropertyChanged("ErrorStackTrace");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PatientDetails", Namespace="http://Wipro.NXG")]
    [System.SerializableAttribute()]
    public partial class PatientDetails : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PatientIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RegCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TitleIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirstNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MiddleNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MaidenNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SpouseNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DOBField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short AgeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AgeUOMIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte IsAgeByDOBField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Address01Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Address02Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Address03Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CityIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsForeignerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NationalityIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PassportNoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PassIssueDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PassExpiryDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PassIssuePlaceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int OccupationIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ReligionIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int QualificationIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MaritalStatusIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RefTypeIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RefInstIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RefDoctorIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RefOtherField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte HasPrintedCardField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CardIssuedDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RemarkFreeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RemarksField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ZipCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhoneNoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MobileNoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EMailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BloodIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int HospitalIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int GenderIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GaurdianNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IsGaurdianSpouseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ContactNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ContRelationIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ContAddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ContPhoneNoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ContFaxNoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ContEmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SSNField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte BlockedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdentifyMark01Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdentifyMark02Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CompanyIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PatientTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int WorkstationIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FoodAllergiesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OtherAllergiesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DrugAllergiesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PrePatientField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PAddress01Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PAddress02Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PAddress03Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PCityIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PZipCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DietTypeIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PPhoneNoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VisaIssueDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VisaExpiryDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VisaIssuedAtField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VisaIssuedByField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WorkPermitIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WPIssuedDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WPExpiryDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WPIssuedATField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CityAreaIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal MonthlyIncomeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PCityAreaIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PolicyNoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PolicyValidFromField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PolicyValidToField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ContractNoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MRNoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReferalBasisNoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RelationCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PatientEmpIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FeatureIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FunctionIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CallContextField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int GradeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirstName2LField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MiddleName2LField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastName2LField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MaidenName2LField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GuardianName2LField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SpouseName2LField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Address012LField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Address022LField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Address032LField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Remark2LField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ContactName2LField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string contAddress2LField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdentifyMark012LField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdentifyMark022LField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PAddress012LField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PAddress022LField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PAddress032LField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VisaIssuedAt2LField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VisaIssuedBy2LField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WPIssuedAT2LField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmpRelationIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IntDocIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhotoPathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string InsuranceCardExpiryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ScheduleIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlaceOfBirthField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IsvipField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FamilynameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Familyname2LField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SecurityTagField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DonotDisturbField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PatientID {
            get {
                return this.PatientIDField;
            }
            set {
                if ((this.PatientIDField.Equals(value) != true)) {
                    this.PatientIDField = value;
                    this.RaisePropertyChanged("PatientID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RegCode {
            get {
                return this.RegCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.RegCodeField, value) != true)) {
                    this.RegCodeField = value;
                    this.RaisePropertyChanged("RegCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TitleID {
            get {
                return this.TitleIDField;
            }
            set {
                if ((this.TitleIDField.Equals(value) != true)) {
                    this.TitleIDField = value;
                    this.RaisePropertyChanged("TitleID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=3)]
        public string FirstName {
            get {
                return this.FirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstNameField, value) != true)) {
                    this.FirstNameField = value;
                    this.RaisePropertyChanged("FirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=4)]
        public string MiddleName {
            get {
                return this.MiddleNameField;
            }
            set {
                if ((object.ReferenceEquals(this.MiddleNameField, value) != true)) {
                    this.MiddleNameField = value;
                    this.RaisePropertyChanged("MiddleName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=5)]
        public string LastName {
            get {
                return this.LastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastNameField, value) != true)) {
                    this.LastNameField = value;
                    this.RaisePropertyChanged("LastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=6)]
        public string MaidenName {
            get {
                return this.MaidenNameField;
            }
            set {
                if ((object.ReferenceEquals(this.MaidenNameField, value) != true)) {
                    this.MaidenNameField = value;
                    this.RaisePropertyChanged("MaidenName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=7)]
        public string SpouseName {
            get {
                return this.SpouseNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SpouseNameField, value) != true)) {
                    this.SpouseNameField = value;
                    this.RaisePropertyChanged("SpouseName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=8)]
        public string DOB {
            get {
                return this.DOBField;
            }
            set {
                if ((object.ReferenceEquals(this.DOBField, value) != true)) {
                    this.DOBField = value;
                    this.RaisePropertyChanged("DOB");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=9)]
        public short Age {
            get {
                return this.AgeField;
            }
            set {
                if ((this.AgeField.Equals(value) != true)) {
                    this.AgeField = value;
                    this.RaisePropertyChanged("Age");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=10)]
        public int AgeUOMID {
            get {
                return this.AgeUOMIDField;
            }
            set {
                if ((this.AgeUOMIDField.Equals(value) != true)) {
                    this.AgeUOMIDField = value;
                    this.RaisePropertyChanged("AgeUOMID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=11)]
        public byte IsAgeByDOB {
            get {
                return this.IsAgeByDOBField;
            }
            set {
                if ((this.IsAgeByDOBField.Equals(value) != true)) {
                    this.IsAgeByDOBField = value;
                    this.RaisePropertyChanged("IsAgeByDOB");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=12)]
        public string Address01 {
            get {
                return this.Address01Field;
            }
            set {
                if ((object.ReferenceEquals(this.Address01Field, value) != true)) {
                    this.Address01Field = value;
                    this.RaisePropertyChanged("Address01");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=13)]
        public string Address02 {
            get {
                return this.Address02Field;
            }
            set {
                if ((object.ReferenceEquals(this.Address02Field, value) != true)) {
                    this.Address02Field = value;
                    this.RaisePropertyChanged("Address02");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=14)]
        public string Address03 {
            get {
                return this.Address03Field;
            }
            set {
                if ((object.ReferenceEquals(this.Address03Field, value) != true)) {
                    this.Address03Field = value;
                    this.RaisePropertyChanged("Address03");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=15)]
        public int CityID {
            get {
                return this.CityIDField;
            }
            set {
                if ((this.CityIDField.Equals(value) != true)) {
                    this.CityIDField = value;
                    this.RaisePropertyChanged("CityID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=16)]
        public bool IsForeigner {
            get {
                return this.IsForeignerField;
            }
            set {
                if ((this.IsForeignerField.Equals(value) != true)) {
                    this.IsForeignerField = value;
                    this.RaisePropertyChanged("IsForeigner");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=17)]
        public int NationalityId {
            get {
                return this.NationalityIdField;
            }
            set {
                if ((this.NationalityIdField.Equals(value) != true)) {
                    this.NationalityIdField = value;
                    this.RaisePropertyChanged("NationalityId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=18)]
        public string PassportNo {
            get {
                return this.PassportNoField;
            }
            set {
                if ((object.ReferenceEquals(this.PassportNoField, value) != true)) {
                    this.PassportNoField = value;
                    this.RaisePropertyChanged("PassportNo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=19)]
        public string PassIssueDate {
            get {
                return this.PassIssueDateField;
            }
            set {
                if ((object.ReferenceEquals(this.PassIssueDateField, value) != true)) {
                    this.PassIssueDateField = value;
                    this.RaisePropertyChanged("PassIssueDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=20)]
        public string PassExpiryDate {
            get {
                return this.PassExpiryDateField;
            }
            set {
                if ((object.ReferenceEquals(this.PassExpiryDateField, value) != true)) {
                    this.PassExpiryDateField = value;
                    this.RaisePropertyChanged("PassExpiryDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=21)]
        public string PassIssuePlace {
            get {
                return this.PassIssuePlaceField;
            }
            set {
                if ((object.ReferenceEquals(this.PassIssuePlaceField, value) != true)) {
                    this.PassIssuePlaceField = value;
                    this.RaisePropertyChanged("PassIssuePlace");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=22)]
        public int OccupationID {
            get {
                return this.OccupationIDField;
            }
            set {
                if ((this.OccupationIDField.Equals(value) != true)) {
                    this.OccupationIDField = value;
                    this.RaisePropertyChanged("OccupationID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=23)]
        public int ReligionID {
            get {
                return this.ReligionIDField;
            }
            set {
                if ((this.ReligionIDField.Equals(value) != true)) {
                    this.ReligionIDField = value;
                    this.RaisePropertyChanged("ReligionID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=24)]
        public int QualificationID {
            get {
                return this.QualificationIDField;
            }
            set {
                if ((this.QualificationIDField.Equals(value) != true)) {
                    this.QualificationIDField = value;
                    this.RaisePropertyChanged("QualificationID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=25)]
        public int MaritalStatusID {
            get {
                return this.MaritalStatusIDField;
            }
            set {
                if ((this.MaritalStatusIDField.Equals(value) != true)) {
                    this.MaritalStatusIDField = value;
                    this.RaisePropertyChanged("MaritalStatusID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=26)]
        public int RefTypeID {
            get {
                return this.RefTypeIDField;
            }
            set {
                if ((this.RefTypeIDField.Equals(value) != true)) {
                    this.RefTypeIDField = value;
                    this.RaisePropertyChanged("RefTypeID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=27)]
        public int RefInstID {
            get {
                return this.RefInstIDField;
            }
            set {
                if ((this.RefInstIDField.Equals(value) != true)) {
                    this.RefInstIDField = value;
                    this.RaisePropertyChanged("RefInstID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=28)]
        public int RefDoctorID {
            get {
                return this.RefDoctorIDField;
            }
            set {
                if ((this.RefDoctorIDField.Equals(value) != true)) {
                    this.RefDoctorIDField = value;
                    this.RaisePropertyChanged("RefDoctorID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=29)]
        public string RefOther {
            get {
                return this.RefOtherField;
            }
            set {
                if ((object.ReferenceEquals(this.RefOtherField, value) != true)) {
                    this.RefOtherField = value;
                    this.RaisePropertyChanged("RefOther");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=30)]
        public byte HasPrintedCard {
            get {
                return this.HasPrintedCardField;
            }
            set {
                if ((this.HasPrintedCardField.Equals(value) != true)) {
                    this.HasPrintedCardField = value;
                    this.RaisePropertyChanged("HasPrintedCard");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=31)]
        public string CardIssuedDate {
            get {
                return this.CardIssuedDateField;
            }
            set {
                if ((object.ReferenceEquals(this.CardIssuedDateField, value) != true)) {
                    this.CardIssuedDateField = value;
                    this.RaisePropertyChanged("CardIssuedDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=32)]
        public string RemarkFree {
            get {
                return this.RemarkFreeField;
            }
            set {
                if ((object.ReferenceEquals(this.RemarkFreeField, value) != true)) {
                    this.RemarkFreeField = value;
                    this.RaisePropertyChanged("RemarkFree");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=33)]
        public string Remarks {
            get {
                return this.RemarksField;
            }
            set {
                if ((object.ReferenceEquals(this.RemarksField, value) != true)) {
                    this.RemarksField = value;
                    this.RaisePropertyChanged("Remarks");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=34)]
        public string ZipCode {
            get {
                return this.ZipCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.ZipCodeField, value) != true)) {
                    this.ZipCodeField = value;
                    this.RaisePropertyChanged("ZipCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=35)]
        public string PhoneNo {
            get {
                return this.PhoneNoField;
            }
            set {
                if ((object.ReferenceEquals(this.PhoneNoField, value) != true)) {
                    this.PhoneNoField = value;
                    this.RaisePropertyChanged("PhoneNo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=36)]
        public string MobileNo {
            get {
                return this.MobileNoField;
            }
            set {
                if ((object.ReferenceEquals(this.MobileNoField, value) != true)) {
                    this.MobileNoField = value;
                    this.RaisePropertyChanged("MobileNo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=37)]
        public string EMail {
            get {
                return this.EMailField;
            }
            set {
                if ((object.ReferenceEquals(this.EMailField, value) != true)) {
                    this.EMailField = value;
                    this.RaisePropertyChanged("EMail");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=38)]
        public int BloodID {
            get {
                return this.BloodIDField;
            }
            set {
                if ((this.BloodIDField.Equals(value) != true)) {
                    this.BloodIDField = value;
                    this.RaisePropertyChanged("BloodID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=39)]
        public int HospitalID {
            get {
                return this.HospitalIDField;
            }
            set {
                if ((this.HospitalIDField.Equals(value) != true)) {
                    this.HospitalIDField = value;
                    this.RaisePropertyChanged("HospitalID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=40)]
        public int GenderID {
            get {
                return this.GenderIDField;
            }
            set {
                if ((this.GenderIDField.Equals(value) != true)) {
                    this.GenderIDField = value;
                    this.RaisePropertyChanged("GenderID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=41)]
        public string GaurdianName {
            get {
                return this.GaurdianNameField;
            }
            set {
                if ((object.ReferenceEquals(this.GaurdianNameField, value) != true)) {
                    this.GaurdianNameField = value;
                    this.RaisePropertyChanged("GaurdianName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=42)]
        public int IsGaurdianSpouse {
            get {
                return this.IsGaurdianSpouseField;
            }
            set {
                if ((this.IsGaurdianSpouseField.Equals(value) != true)) {
                    this.IsGaurdianSpouseField = value;
                    this.RaisePropertyChanged("IsGaurdianSpouse");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=43)]
        public string ContactName {
            get {
                return this.ContactNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ContactNameField, value) != true)) {
                    this.ContactNameField = value;
                    this.RaisePropertyChanged("ContactName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=44)]
        public int ContRelationId {
            get {
                return this.ContRelationIdField;
            }
            set {
                if ((this.ContRelationIdField.Equals(value) != true)) {
                    this.ContRelationIdField = value;
                    this.RaisePropertyChanged("ContRelationId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=45)]
        public string ContAddress {
            get {
                return this.ContAddressField;
            }
            set {
                if ((object.ReferenceEquals(this.ContAddressField, value) != true)) {
                    this.ContAddressField = value;
                    this.RaisePropertyChanged("ContAddress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=46)]
        public string ContPhoneNo {
            get {
                return this.ContPhoneNoField;
            }
            set {
                if ((object.ReferenceEquals(this.ContPhoneNoField, value) != true)) {
                    this.ContPhoneNoField = value;
                    this.RaisePropertyChanged("ContPhoneNo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=47)]
        public string ContFaxNo {
            get {
                return this.ContFaxNoField;
            }
            set {
                if ((object.ReferenceEquals(this.ContFaxNoField, value) != true)) {
                    this.ContFaxNoField = value;
                    this.RaisePropertyChanged("ContFaxNo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=48)]
        public string ContEmail {
            get {
                return this.ContEmailField;
            }
            set {
                if ((object.ReferenceEquals(this.ContEmailField, value) != true)) {
                    this.ContEmailField = value;
                    this.RaisePropertyChanged("ContEmail");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=49)]
        public string SSN {
            get {
                return this.SSNField;
            }
            set {
                if ((object.ReferenceEquals(this.SSNField, value) != true)) {
                    this.SSNField = value;
                    this.RaisePropertyChanged("SSN");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=50)]
        public byte Blocked {
            get {
                return this.BlockedField;
            }
            set {
                if ((this.BlockedField.Equals(value) != true)) {
                    this.BlockedField = value;
                    this.RaisePropertyChanged("Blocked");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=51)]
        public string Code {
            get {
                return this.CodeField;
            }
            set {
                if ((object.ReferenceEquals(this.CodeField, value) != true)) {
                    this.CodeField = value;
                    this.RaisePropertyChanged("Code");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=52)]
        public string IdentifyMark01 {
            get {
                return this.IdentifyMark01Field;
            }
            set {
                if ((object.ReferenceEquals(this.IdentifyMark01Field, value) != true)) {
                    this.IdentifyMark01Field = value;
                    this.RaisePropertyChanged("IdentifyMark01");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=53)]
        public string IdentifyMark02 {
            get {
                return this.IdentifyMark02Field;
            }
            set {
                if ((object.ReferenceEquals(this.IdentifyMark02Field, value) != true)) {
                    this.IdentifyMark02Field = value;
                    this.RaisePropertyChanged("IdentifyMark02");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=54)]
        public int CompanyID {
            get {
                return this.CompanyIDField;
            }
            set {
                if ((this.CompanyIDField.Equals(value) != true)) {
                    this.CompanyIDField = value;
                    this.RaisePropertyChanged("CompanyID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=55)]
        public int PatientType {
            get {
                return this.PatientTypeField;
            }
            set {
                if ((this.PatientTypeField.Equals(value) != true)) {
                    this.PatientTypeField = value;
                    this.RaisePropertyChanged("PatientType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=56)]
        public int UserID {
            get {
                return this.UserIDField;
            }
            set {
                if ((this.UserIDField.Equals(value) != true)) {
                    this.UserIDField = value;
                    this.RaisePropertyChanged("UserID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=57)]
        public int WorkstationID {
            get {
                return this.WorkstationIDField;
            }
            set {
                if ((this.WorkstationIDField.Equals(value) != true)) {
                    this.WorkstationIDField = value;
                    this.RaisePropertyChanged("WorkstationID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=58)]
        public string FoodAllergies {
            get {
                return this.FoodAllergiesField;
            }
            set {
                if ((object.ReferenceEquals(this.FoodAllergiesField, value) != true)) {
                    this.FoodAllergiesField = value;
                    this.RaisePropertyChanged("FoodAllergies");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=59)]
        public string OtherAllergies {
            get {
                return this.OtherAllergiesField;
            }
            set {
                if ((object.ReferenceEquals(this.OtherAllergiesField, value) != true)) {
                    this.OtherAllergiesField = value;
                    this.RaisePropertyChanged("OtherAllergies");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=60)]
        public string DrugAllergies {
            get {
                return this.DrugAllergiesField;
            }
            set {
                if ((object.ReferenceEquals(this.DrugAllergiesField, value) != true)) {
                    this.DrugAllergiesField = value;
                    this.RaisePropertyChanged("DrugAllergies");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=61)]
        public int PrePatient {
            get {
                return this.PrePatientField;
            }
            set {
                if ((this.PrePatientField.Equals(value) != true)) {
                    this.PrePatientField = value;
                    this.RaisePropertyChanged("PrePatient");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=62)]
        public string PAddress01 {
            get {
                return this.PAddress01Field;
            }
            set {
                if ((object.ReferenceEquals(this.PAddress01Field, value) != true)) {
                    this.PAddress01Field = value;
                    this.RaisePropertyChanged("PAddress01");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=63)]
        public string PAddress02 {
            get {
                return this.PAddress02Field;
            }
            set {
                if ((object.ReferenceEquals(this.PAddress02Field, value) != true)) {
                    this.PAddress02Field = value;
                    this.RaisePropertyChanged("PAddress02");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=64)]
        public string PAddress03 {
            get {
                return this.PAddress03Field;
            }
            set {
                if ((object.ReferenceEquals(this.PAddress03Field, value) != true)) {
                    this.PAddress03Field = value;
                    this.RaisePropertyChanged("PAddress03");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=65)]
        public int PCityID {
            get {
                return this.PCityIDField;
            }
            set {
                if ((this.PCityIDField.Equals(value) != true)) {
                    this.PCityIDField = value;
                    this.RaisePropertyChanged("PCityID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=66)]
        public string PZipCode {
            get {
                return this.PZipCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.PZipCodeField, value) != true)) {
                    this.PZipCodeField = value;
                    this.RaisePropertyChanged("PZipCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=67)]
        public int DietTypeID {
            get {
                return this.DietTypeIDField;
            }
            set {
                if ((this.DietTypeIDField.Equals(value) != true)) {
                    this.DietTypeIDField = value;
                    this.RaisePropertyChanged("DietTypeID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=68)]
        public string PPhoneNo {
            get {
                return this.PPhoneNoField;
            }
            set {
                if ((object.ReferenceEquals(this.PPhoneNoField, value) != true)) {
                    this.PPhoneNoField = value;
                    this.RaisePropertyChanged("PPhoneNo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=69)]
        public string VisaIssueDate {
            get {
                return this.VisaIssueDateField;
            }
            set {
                if ((object.ReferenceEquals(this.VisaIssueDateField, value) != true)) {
                    this.VisaIssueDateField = value;
                    this.RaisePropertyChanged("VisaIssueDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=70)]
        public string VisaExpiryDate {
            get {
                return this.VisaExpiryDateField;
            }
            set {
                if ((object.ReferenceEquals(this.VisaExpiryDateField, value) != true)) {
                    this.VisaExpiryDateField = value;
                    this.RaisePropertyChanged("VisaExpiryDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=71)]
        public string VisaIssuedAt {
            get {
                return this.VisaIssuedAtField;
            }
            set {
                if ((object.ReferenceEquals(this.VisaIssuedAtField, value) != true)) {
                    this.VisaIssuedAtField = value;
                    this.RaisePropertyChanged("VisaIssuedAt");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=72)]
        public string VisaIssuedBy {
            get {
                return this.VisaIssuedByField;
            }
            set {
                if ((object.ReferenceEquals(this.VisaIssuedByField, value) != true)) {
                    this.VisaIssuedByField = value;
                    this.RaisePropertyChanged("VisaIssuedBy");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=73)]
        public string WorkPermitID {
            get {
                return this.WorkPermitIDField;
            }
            set {
                if ((object.ReferenceEquals(this.WorkPermitIDField, value) != true)) {
                    this.WorkPermitIDField = value;
                    this.RaisePropertyChanged("WorkPermitID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=74)]
        public string WPIssuedDate {
            get {
                return this.WPIssuedDateField;
            }
            set {
                if ((object.ReferenceEquals(this.WPIssuedDateField, value) != true)) {
                    this.WPIssuedDateField = value;
                    this.RaisePropertyChanged("WPIssuedDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=75)]
        public string WPExpiryDate {
            get {
                return this.WPExpiryDateField;
            }
            set {
                if ((object.ReferenceEquals(this.WPExpiryDateField, value) != true)) {
                    this.WPExpiryDateField = value;
                    this.RaisePropertyChanged("WPExpiryDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=76)]
        public string WPIssuedAT {
            get {
                return this.WPIssuedATField;
            }
            set {
                if ((object.ReferenceEquals(this.WPIssuedATField, value) != true)) {
                    this.WPIssuedATField = value;
                    this.RaisePropertyChanged("WPIssuedAT");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=77)]
        public int CityAreaId {
            get {
                return this.CityAreaIdField;
            }
            set {
                if ((this.CityAreaIdField.Equals(value) != true)) {
                    this.CityAreaIdField = value;
                    this.RaisePropertyChanged("CityAreaId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=78)]
        public decimal MonthlyIncome {
            get {
                return this.MonthlyIncomeField;
            }
            set {
                if ((this.MonthlyIncomeField.Equals(value) != true)) {
                    this.MonthlyIncomeField = value;
                    this.RaisePropertyChanged("MonthlyIncome");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=79)]
        public int PCityAreaId {
            get {
                return this.PCityAreaIdField;
            }
            set {
                if ((this.PCityAreaIdField.Equals(value) != true)) {
                    this.PCityAreaIdField = value;
                    this.RaisePropertyChanged("PCityAreaId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=80)]
        public string PolicyNo {
            get {
                return this.PolicyNoField;
            }
            set {
                if ((object.ReferenceEquals(this.PolicyNoField, value) != true)) {
                    this.PolicyNoField = value;
                    this.RaisePropertyChanged("PolicyNo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=81)]
        public string PolicyValidFrom {
            get {
                return this.PolicyValidFromField;
            }
            set {
                if ((object.ReferenceEquals(this.PolicyValidFromField, value) != true)) {
                    this.PolicyValidFromField = value;
                    this.RaisePropertyChanged("PolicyValidFrom");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=82)]
        public string PolicyValidTo {
            get {
                return this.PolicyValidToField;
            }
            set {
                if ((object.ReferenceEquals(this.PolicyValidToField, value) != true)) {
                    this.PolicyValidToField = value;
                    this.RaisePropertyChanged("PolicyValidTo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=83)]
        public string ContractNo {
            get {
                return this.ContractNoField;
            }
            set {
                if ((object.ReferenceEquals(this.ContractNoField, value) != true)) {
                    this.ContractNoField = value;
                    this.RaisePropertyChanged("ContractNo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=84)]
        public string MRNo {
            get {
                return this.MRNoField;
            }
            set {
                if ((object.ReferenceEquals(this.MRNoField, value) != true)) {
                    this.MRNoField = value;
                    this.RaisePropertyChanged("MRNo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=85)]
        public string ReferalBasisNo {
            get {
                return this.ReferalBasisNoField;
            }
            set {
                if ((object.ReferenceEquals(this.ReferalBasisNoField, value) != true)) {
                    this.ReferalBasisNoField = value;
                    this.RaisePropertyChanged("ReferalBasisNo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=86)]
        public string RelationCode {
            get {
                return this.RelationCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.RelationCodeField, value) != true)) {
                    this.RelationCodeField = value;
                    this.RaisePropertyChanged("RelationCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=87)]
        public string PatientEmpID {
            get {
                return this.PatientEmpIDField;
            }
            set {
                if ((object.ReferenceEquals(this.PatientEmpIDField, value) != true)) {
                    this.PatientEmpIDField = value;
                    this.RaisePropertyChanged("PatientEmpID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=88)]
        public int FeatureId {
            get {
                return this.FeatureIdField;
            }
            set {
                if ((this.FeatureIdField.Equals(value) != true)) {
                    this.FeatureIdField = value;
                    this.RaisePropertyChanged("FeatureId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=89)]
        public int FunctionId {
            get {
                return this.FunctionIdField;
            }
            set {
                if ((this.FunctionIdField.Equals(value) != true)) {
                    this.FunctionIdField = value;
                    this.RaisePropertyChanged("FunctionId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=90)]
        public string CallContext {
            get {
                return this.CallContextField;
            }
            set {
                if ((object.ReferenceEquals(this.CallContextField, value) != true)) {
                    this.CallContextField = value;
                    this.RaisePropertyChanged("CallContext");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=91)]
        public int GradeId {
            get {
                return this.GradeIdField;
            }
            set {
                if ((this.GradeIdField.Equals(value) != true)) {
                    this.GradeIdField = value;
                    this.RaisePropertyChanged("GradeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=92)]
        public string FirstName2L {
            get {
                return this.FirstName2LField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstName2LField, value) != true)) {
                    this.FirstName2LField = value;
                    this.RaisePropertyChanged("FirstName2L");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=93)]
        public string MiddleName2L {
            get {
                return this.MiddleName2LField;
            }
            set {
                if ((object.ReferenceEquals(this.MiddleName2LField, value) != true)) {
                    this.MiddleName2LField = value;
                    this.RaisePropertyChanged("MiddleName2L");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=94)]
        public string LastName2L {
            get {
                return this.LastName2LField;
            }
            set {
                if ((object.ReferenceEquals(this.LastName2LField, value) != true)) {
                    this.LastName2LField = value;
                    this.RaisePropertyChanged("LastName2L");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=95)]
        public string MaidenName2L {
            get {
                return this.MaidenName2LField;
            }
            set {
                if ((object.ReferenceEquals(this.MaidenName2LField, value) != true)) {
                    this.MaidenName2LField = value;
                    this.RaisePropertyChanged("MaidenName2L");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=96)]
        public string GuardianName2L {
            get {
                return this.GuardianName2LField;
            }
            set {
                if ((object.ReferenceEquals(this.GuardianName2LField, value) != true)) {
                    this.GuardianName2LField = value;
                    this.RaisePropertyChanged("GuardianName2L");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=97)]
        public string SpouseName2L {
            get {
                return this.SpouseName2LField;
            }
            set {
                if ((object.ReferenceEquals(this.SpouseName2LField, value) != true)) {
                    this.SpouseName2LField = value;
                    this.RaisePropertyChanged("SpouseName2L");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=98)]
        public string Address012L {
            get {
                return this.Address012LField;
            }
            set {
                if ((object.ReferenceEquals(this.Address012LField, value) != true)) {
                    this.Address012LField = value;
                    this.RaisePropertyChanged("Address012L");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=99)]
        public string Address022L {
            get {
                return this.Address022LField;
            }
            set {
                if ((object.ReferenceEquals(this.Address022LField, value) != true)) {
                    this.Address022LField = value;
                    this.RaisePropertyChanged("Address022L");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=100)]
        public string Address032L {
            get {
                return this.Address032LField;
            }
            set {
                if ((object.ReferenceEquals(this.Address032LField, value) != true)) {
                    this.Address032LField = value;
                    this.RaisePropertyChanged("Address032L");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=101)]
        public string Remark2L {
            get {
                return this.Remark2LField;
            }
            set {
                if ((object.ReferenceEquals(this.Remark2LField, value) != true)) {
                    this.Remark2LField = value;
                    this.RaisePropertyChanged("Remark2L");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=102)]
        public string ContactName2L {
            get {
                return this.ContactName2LField;
            }
            set {
                if ((object.ReferenceEquals(this.ContactName2LField, value) != true)) {
                    this.ContactName2LField = value;
                    this.RaisePropertyChanged("ContactName2L");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=103)]
        public string contAddress2L {
            get {
                return this.contAddress2LField;
            }
            set {
                if ((object.ReferenceEquals(this.contAddress2LField, value) != true)) {
                    this.contAddress2LField = value;
                    this.RaisePropertyChanged("contAddress2L");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=104)]
        public string IdentifyMark012L {
            get {
                return this.IdentifyMark012LField;
            }
            set {
                if ((object.ReferenceEquals(this.IdentifyMark012LField, value) != true)) {
                    this.IdentifyMark012LField = value;
                    this.RaisePropertyChanged("IdentifyMark012L");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=105)]
        public string IdentifyMark022L {
            get {
                return this.IdentifyMark022LField;
            }
            set {
                if ((object.ReferenceEquals(this.IdentifyMark022LField, value) != true)) {
                    this.IdentifyMark022LField = value;
                    this.RaisePropertyChanged("IdentifyMark022L");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=106)]
        public string PAddress012L {
            get {
                return this.PAddress012LField;
            }
            set {
                if ((object.ReferenceEquals(this.PAddress012LField, value) != true)) {
                    this.PAddress012LField = value;
                    this.RaisePropertyChanged("PAddress012L");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=107)]
        public string PAddress022L {
            get {
                return this.PAddress022LField;
            }
            set {
                if ((object.ReferenceEquals(this.PAddress022LField, value) != true)) {
                    this.PAddress022LField = value;
                    this.RaisePropertyChanged("PAddress022L");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=108)]
        public string PAddress032L {
            get {
                return this.PAddress032LField;
            }
            set {
                if ((object.ReferenceEquals(this.PAddress032LField, value) != true)) {
                    this.PAddress032LField = value;
                    this.RaisePropertyChanged("PAddress032L");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=109)]
        public string VisaIssuedAt2L {
            get {
                return this.VisaIssuedAt2LField;
            }
            set {
                if ((object.ReferenceEquals(this.VisaIssuedAt2LField, value) != true)) {
                    this.VisaIssuedAt2LField = value;
                    this.RaisePropertyChanged("VisaIssuedAt2L");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=110)]
        public string VisaIssuedBy2L {
            get {
                return this.VisaIssuedBy2LField;
            }
            set {
                if ((object.ReferenceEquals(this.VisaIssuedBy2LField, value) != true)) {
                    this.VisaIssuedBy2LField = value;
                    this.RaisePropertyChanged("VisaIssuedBy2L");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=111)]
        public string WPIssuedAT2L {
            get {
                return this.WPIssuedAT2LField;
            }
            set {
                if ((object.ReferenceEquals(this.WPIssuedAT2LField, value) != true)) {
                    this.WPIssuedAT2LField = value;
                    this.RaisePropertyChanged("WPIssuedAT2L");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=112)]
        public string EmpRelationID {
            get {
                return this.EmpRelationIDField;
            }
            set {
                if ((object.ReferenceEquals(this.EmpRelationIDField, value) != true)) {
                    this.EmpRelationIDField = value;
                    this.RaisePropertyChanged("EmpRelationID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=113)]
        public int IntDocID {
            get {
                return this.IntDocIDField;
            }
            set {
                if ((this.IntDocIDField.Equals(value) != true)) {
                    this.IntDocIDField = value;
                    this.RaisePropertyChanged("IntDocID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=114)]
        public string PhotoPath {
            get {
                return this.PhotoPathField;
            }
            set {
                if ((object.ReferenceEquals(this.PhotoPathField, value) != true)) {
                    this.PhotoPathField = value;
                    this.RaisePropertyChanged("PhotoPath");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=115)]
        public string InsuranceCardExpiry {
            get {
                return this.InsuranceCardExpiryField;
            }
            set {
                if ((object.ReferenceEquals(this.InsuranceCardExpiryField, value) != true)) {
                    this.InsuranceCardExpiryField = value;
                    this.RaisePropertyChanged("InsuranceCardExpiry");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=116)]
        public int ScheduleID {
            get {
                return this.ScheduleIDField;
            }
            set {
                if ((this.ScheduleIDField.Equals(value) != true)) {
                    this.ScheduleIDField = value;
                    this.RaisePropertyChanged("ScheduleID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=117)]
        public string PlaceOfBirth {
            get {
                return this.PlaceOfBirthField;
            }
            set {
                if ((object.ReferenceEquals(this.PlaceOfBirthField, value) != true)) {
                    this.PlaceOfBirthField = value;
                    this.RaisePropertyChanged("PlaceOfBirth");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=118)]
        public int Isvip {
            get {
                return this.IsvipField;
            }
            set {
                if ((this.IsvipField.Equals(value) != true)) {
                    this.IsvipField = value;
                    this.RaisePropertyChanged("Isvip");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=119)]
        public string Familyname {
            get {
                return this.FamilynameField;
            }
            set {
                if ((object.ReferenceEquals(this.FamilynameField, value) != true)) {
                    this.FamilynameField = value;
                    this.RaisePropertyChanged("Familyname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=120)]
        public string Familyname2L {
            get {
                return this.Familyname2LField;
            }
            set {
                if ((object.ReferenceEquals(this.Familyname2LField, value) != true)) {
                    this.Familyname2LField = value;
                    this.RaisePropertyChanged("Familyname2L");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=121)]
        public int SecurityTag {
            get {
                return this.SecurityTagField;
            }
            set {
                if ((this.SecurityTagField.Equals(value) != true)) {
                    this.SecurityTagField = value;
                    this.RaisePropertyChanged("SecurityTag");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=122)]
        public int DonotDisturb {
            get {
                return this.DonotDisturbField;
            }
            set {
                if ((this.DonotDisturbField.Equals(value) != true)) {
                    this.DonotDisturbField = value;
                    this.RaisePropertyChanged("DonotDisturb");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://Wipro.NXG", ConfigurationName="FrontOfficeServiceClient.FrontOfficeServiceContract")]
    public interface FrontOfficeServiceContract {
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchtBandPrintingCount", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchtBandPrintingCountResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchtBandPrintingCountNextGenCustomE" +
            "xceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchtBandPrintingCount(int AdmissionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchtBandPrintingCount", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchtBandPrintingCountResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchtBandPrintingCountAsync(int AdmissionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="SavePatientBandPrintingHistory", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SavePatientBandPrintingHistoryRespons" +
            "e")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/SavePatientBandPrintingHistoryNextGen" +
            "CustomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        string SavePatientBandPrintingHistory(System.Data.DataSet dsBandPrinting);
        
        [System.ServiceModel.OperationContractAttribute(Action="SavePatientBandPrintingHistory", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SavePatientBandPrintingHistoryRespons" +
            "e")]
        System.Threading.Tasks.Task<string> SavePatientBandPrintingHistoryAsync(System.Data.DataSet dsBandPrinting);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/SaveCorporatehealthCheckUpDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveCorporatehealthCheckUpDetailsResp" +
            "onse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/SaveCorporatehealthCheckUpDetailsNext" +
            "GenCustomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        bool SaveCorporatehealthCheckUpDetails(int CorporateHealthCheckUpId, System.Data.DataSet dsEmployeeDetails, int HosiptalId, int userId, int workstationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/SaveCorporatehealthCheckUpDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveCorporatehealthCheckUpDetailsResp" +
            "onse")]
        System.Threading.Tasks.Task<bool> SaveCorporatehealthCheckUpDetailsAsync(int CorporateHealthCheckUpId, System.Data.DataSet dsEmployeeDetails, int HosiptalId, int userId, int workstationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/SaveServicePatientGroupBill", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveServicePatientGroupBillResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/SaveServicePatientGroupBillNextGenCus" +
            "tomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        string SaveServicePatientGroupBill(int titleId, string firstname, string middlename, string lastname, int genderId, int age, int AgeUoMID, int doctorId, string companyId, decimal amount, string sessionId, int workstationId, int intuserId, int hospitalId, System.Data.DataTable dtPackage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/SaveServicePatientGroupBill", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveServicePatientGroupBillResponse")]
        System.Threading.Tasks.Task<string> SaveServicePatientGroupBillAsync(int titleId, string firstname, string middlename, string lastname, int genderId, int age, int AgeUoMID, int doctorId, string companyId, decimal amount, string sessionId, int workstationId, int intuserId, int hospitalId, System.Data.DataTable dtPackage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/GetCorporatehealthCheckUpDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetCorporatehealthCheckUpDetailsRespo" +
            "nse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/GetCorporatehealthCheckUpDetailsNextG" +
            "enCustomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet GetCorporatehealthCheckUpDetails(int CorporateHealthCheckUpId, int companyId, string FromDate, string ToDate, int userId, int workstationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/GetCorporatehealthCheckUpDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetCorporatehealthCheckUpDetailsRespo" +
            "nse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetCorporatehealthCheckUpDetailsAsync(int CorporateHealthCheckUpId, int companyId, string FromDate, string ToDate, int userId, int workstationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/UpdateCorporateCheckUpDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/UpdateCorporateCheckUpDetailsResponse" +
            "")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/UpdateCorporateCheckUpDetailsNextGenC" +
            "ustomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        bool UpdateCorporateCheckUpDetails(int CorporateHealthCheckUpDetailId, int billNo, int userId, int workstationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/UpdateCorporateCheckUpDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/UpdateCorporateCheckUpDetailsResponse" +
            "")]
        System.Threading.Tasks.Task<bool> UpdateCorporateCheckUpDetailsAsync(int CorporateHealthCheckUpDetailId, int billNo, int userId, int workstationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/DeleteDoctorSessions", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/DeleteDoctorSessionsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/DeleteDoctorSessionsNextGenCustomExce" +
            "ptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        int DeleteDoctorSessions(int intConfigId, int intDocId, int intUserId, int intWorkStationId, int intHospId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/DeleteDoctorSessions", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/DeleteDoctorSessionsResponse")]
        System.Threading.Tasks.Task<int> DeleteDoctorSessionsAsync(int intConfigId, int intDocId, int intUserId, int intWorkStationId, int intHospId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/DoctorSessionsExtend", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveDoctorSessionsExtendResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/SaveDoctorSessionsExtendNextGenCustom" +
            "ExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        int SaveDoctorSessionsExtend(string strConfigId, int intDocId, string strToDateTime, int intUserId, int intWorkStationId, int intHospId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/DoctorSessionsExtend", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveDoctorSessionsExtendResponse")]
        System.Threading.Tasks.Task<int> SaveDoctorSessionsExtendAsync(string strConfigId, int intDocId, string strToDateTime, int intUserId, int intWorkStationId, int intHospId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/DoctorSessionsCopy", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveDoctorSessionsCopyResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/SaveDoctorSessionsCopyNextGenCustomEx" +
            "ceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        int SaveDoctorSessionsCopy(string strConfigId, int intFromDocId, int intToDocId, int intUserId, int intWorkStationId, int intHospId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/DoctorSessionsCopy", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveDoctorSessionsCopyResponse")]
        System.Threading.Tasks.Task<int> SaveDoctorSessionsCopyAsync(string strConfigId, int intFromDocId, int intToDocId, int intUserId, int intWorkStationId, int intHospId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchPatientDetailsUCAF", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchPatientDetailsUCAFResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchPatientDetailsUCAFNextGenCustomE" +
            "xceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchPatientDetailsUCAF(string strPatId, string strRegCode, bool BlnDeleted, int intUserId, int intWorkStnId, int intError, byte IsReg, int LanguageID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchPatientDetailsUCAF", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchPatientDetailsUCAFResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchPatientDetailsUCAFAsync(string strPatId, string strRegCode, bool BlnDeleted, int intUserId, int intWorkStnId, int intError, byte IsReg, int LanguageID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/GetHospitalEmployees", ReplyAction="http://Wipro.NXG/ServiceContract1/GetHospitalEmployees")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/GetHospitalEmployeesNextGenCustomExce" +
            "ptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet GetHospitalEmployees(int intHospitalId, int intUserID, int intWorkStID, int IsMedical, int MedicalType, int intError, int intLanguageID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/GetHospitalEmployees", ReplyAction="http://Wipro.NXG/ServiceContract1/GetHospitalEmployees")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetHospitalEmployeesAsync(int intHospitalId, int intUserID, int intWorkStID, int IsMedical, int MedicalType, int intError, int intLanguageID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/SavePatientMobileNo (http://wipro.nxg/ServiceCo" +
            "ntract1/SavePatientMobileNo)", ReplyAction="http://Wipro.NXG/ServiceContract1/SavePatientMobileNo (http://wipro.nxg/ServiceCo" +
            "ntract1/SavePatientMobileNo)")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/SavePatientMobileNoNextGenCustomExcep" +
            "tionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        int SavePatientMobileNo(int PatientID, string MobileNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/SavePatientMobileNo (http://wipro.nxg/ServiceCo" +
            "ntract1/SavePatientMobileNo)", ReplyAction="http://Wipro.NXG/ServiceContract1/SavePatientMobileNo (http://wipro.nxg/ServiceCo" +
            "ntract1/SavePatientMobileNo)")]
        System.Threading.Tasks.Task<int> SavePatientMobileNoAsync(int PatientID, string MobileNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchFeatureAuthenticatedUsers", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchFeatureAuthenticatedUsersRespons" +
            "e")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchFeatureAuthenticatedUsersNextGen" +
            "CustomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchFeatureAuthenticatedUsers(int intUserId, int intWorkStationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchFeatureAuthenticatedUsers", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchFeatureAuthenticatedUsersRespons" +
            "e")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchFeatureAuthenticatedUsersAsync(int intUserId, int intWorkStationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchDiscount", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchDiscountResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchDiscountNextGenCustomExceptionFa" +
            "ult", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchDiscount(int Tbl, string name, int langid, int param1, int param2, string param3);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchDiscount", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchDiscountResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchDiscountAsync(int Tbl, string name, int langid, int param1, int param2, string param3);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchServicesMODA", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchServicesMODAResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchServicesMODANextGenCustomExcepti" +
            "onFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchServicesMODA(int intTableId, string strFilter, int IntUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchServicesMODA", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchServicesMODAResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchServicesMODAAsync(int intTableId, string strFilter, int IntUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/GetSpecializationConfigMODA", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetSpecializationConfigMODAResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/GetSpecializationConfigMODANextGenCus" +
            "tomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet GetSpecializationConfigMODA(int intType, int intResult, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/GetSpecializationConfigMODA", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetSpecializationConfigMODAResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetSpecializationConfigMODAAsync(int intType, int intResult, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchPinBlockMODA", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchPinBlockMODAResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchPinBlockMODANextGenCustomExcepti" +
            "onFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchPinBlockMODA(int intType, string strFilter, int intUserID, int intWorkStationID, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchPinBlockMODA", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchPinBlockMODAResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchPinBlockMODAAsync(int intType, string strFilter, int intUserID, int intWorkStationID, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchPatientDetailsMODA", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchPatientDetailsMODAResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchPatientDetailsMODANextGenCustomE" +
            "xceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchPatientDetailsMODA(string strPatId, string strRegCode, bool BlnDeleted, int intUserId, int intWorkStnId, int intError, byte IsReg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchPatientDetailsMODA", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchPatientDetailsMODAResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchPatientDetailsMODAAsync(string strPatId, string strRegCode, bool BlnDeleted, int intUserId, int intWorkStnId, int intError, byte IsReg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/GetSchedulerConfigurationsMODA", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetSchedulerConfigurationsMODARespons" +
            "e")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/GetSchedulerConfigurationsMODANextGen" +
            "CustomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet GetSchedulerConfigurationsMODA(int intHospitalID, string Filter, int intUserID, int intWorkStationID, int intError, string strOrder);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/GetSchedulerConfigurationsMODA", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetSchedulerConfigurationsMODARespons" +
            "e")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetSchedulerConfigurationsMODAAsync(int intHospitalID, string Filter, int intUserID, int intWorkStationID, int intError, string strOrder);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/SaveClinicRoomMap", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveClinicRoomMapResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/SaveClinicRoomMapNextGenCustomExcepti" +
            "onFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        string SaveClinicRoomMap(int ClinicID, string ClinicName, string ClinicName2L, int Blocked, int Hospitalid, int intUserId, int Status, int intWorkStationId, int Error, int intFeatureId, int intFunctionId, string strCallContext);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/SaveClinicRoomMap", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveClinicRoomMapResponse")]
        System.Threading.Tasks.Task<string> SaveClinicRoomMapAsync(int ClinicID, string ClinicName, string ClinicName2L, int Blocked, int Hospitalid, int intUserId, int Status, int intWorkStationId, int Error, int intFeatureId, int intFunctionId, string strCallContext);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/SaveRoomMap", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveRoomMapResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/SaveRoomMapNextGenCustomExceptionFaul" +
            "t", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        string SaveRoomMap(int ClinicRoomID, int ClinicID, string ClinicRoomName, string ClinicRoomName2L, int Blocked, int Hospitalid, int intUserId, int Status, int intWorkStationId, int Error, int intFeatureId, int intFunctionId, string strCallContext);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/SaveRoomMap", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveRoomMapResponse")]
        System.Threading.Tasks.Task<string> SaveRoomMapAsync(int ClinicRoomID, int ClinicID, string ClinicRoomName, string ClinicRoomName2L, int Blocked, int Hospitalid, int intUserId, int Status, int intWorkStationId, int Error, int intFeatureId, int intFunctionId, string strCallContext);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchClinicRooms", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchClinicRoomsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchClinicRoomsNextGenCustomExceptio" +
            "nFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchClinicRooms(int ClinicID, int HospitalID, string Tbl, int intUserID, int intWorkStationID, int Error, int intFeatureid, int intFunctionid, string strCallContext);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchClinicRooms", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchClinicRoomsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchClinicRoomsAsync(int ClinicID, int HospitalID, string Tbl, int intUserID, int intWorkStationID, int Error, int intFeatureid, int intFunctionid, string strCallContext);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchDependantPatients", ReplyAction="http://Wipro.NXG/ServiceContract1/FetchDependantPatients")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchDependantPatientsNextGenCustomEx" +
            "ceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchDependantPatients(string PatientEmpID, string RegCode, string tbl, int UserId, int intError, int tagid, string FamilyHeadID, string MilitaryID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchDependantPatients", ReplyAction="http://Wipro.NXG/ServiceContract1/FetchDependantPatients")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchDependantPatientsAsync(string PatientEmpID, string RegCode, string tbl, int UserId, int intError, int tagid, string FamilyHeadID, string MilitaryID);
        
        [System.ServiceModel.OperationContractAttribute(Action="SavePINBlock", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SavePINBlockResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/SavePINBlockNextGenCustomExceptionFau" +
            "lt", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        bool SavePINBlock(System.Data.DataSet dsRequisition, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="SavePINBlock", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SavePINBlockResponse")]
        System.Threading.Tasks.Task<bool> SavePINBlockAsync(System.Data.DataSet dsRequisition, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="SavePatientVisitOutCome", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SavePatientVisitOutComeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/SavePatientVisitOutComeNextGenCustomE" +
            "xceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        int SavePatientVisitOutCome(System.Data.DataSet PatientVisitOutcomeDetails, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="SavePatientVisitOutCome", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SavePatientVisitOutComeResponse")]
        System.Threading.Tasks.Task<int> SavePatientVisitOutComeAsync(System.Data.DataSet PatientVisitOutcomeDetails, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="Wipro.NxG.Scheduler.FetchOutComeDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchOutComeDetailsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchOutComeDetailsNextGenCustomExcep" +
            "tionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchOutComeDetails(System.DateTime ConsutationDate, int SpecialiseID, int HospitalID, int UserId, int WorkstationID, int intError, string strRegCode, string strDoctorCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="Wipro.NxG.Scheduler.FetchOutComeDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchOutComeDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchOutComeDetailsAsync(System.DateTime ConsutationDate, int SpecialiseID, int HospitalID, int UserId, int WorkstationID, int intError, string strRegCode, string strDoctorCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="SaveBulkUHID", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveBulkUHIDResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/SaveBulkUHIDNextGenCustomExceptionFau" +
            "lt", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        int SaveBulkUHID(int Number, short uhidGenType, string remarks, int intUserId, int intWorkStationId, int intError, int hospitalID);
        
        [System.ServiceModel.OperationContractAttribute(Action="SaveBulkUHID", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveBulkUHIDResponse")]
        System.Threading.Tasks.Task<int> SaveBulkUHIDAsync(int Number, short uhidGenType, string remarks, int intUserId, int intWorkStationId, int intError, int hospitalID);
        
        [System.ServiceModel.OperationContractAttribute(Action="GenerateUHID", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GenerateUHIDResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/GenerateUHIDNextGenCustomExceptionFau" +
            "lt", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        int GenerateUHID(int uhidSeq, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="GenerateUHID", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GenerateUHIDResponse")]
        System.Threading.Tasks.Task<int> GenerateUHIDAsync(int uhidSeq, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetUHIDSequenceBlockingData", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetUHIDSequenceBlockingDataResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/GetUHIDSequenceBlockingDataNextGenCus" +
            "tomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet GetUHIDSequenceBlockingData(int status, int userID, int workStationID, int error);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetUHIDSequenceBlockingData", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetUHIDSequenceBlockingDataResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetUHIDSequenceBlockingDataAsync(int status, int userID, int workStationID, int error);
        
        [System.ServiceModel.OperationContractAttribute(Action="Wipro.NxG.Scheduler.GetClinicCodeData", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetClinicCodeDataResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/GetClinicCodeDataNextGenCustomExcepti" +
            "onFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet GetClinicCodeData(string strFilter, int UserId, int WorkstationID, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="Wipro.NxG.Scheduler.GetClinicCodeData", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetClinicCodeDataResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetClinicCodeDataAsync(string strFilter, int UserId, int WorkstationID, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="Wipro.NxG.Scheduler.GetConsultationData", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetConsultationDataResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/GetConsultationDataNextGenCustomExcep" +
            "tionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet GetConsultationData(string strSelect, string strFilter, int UserId, int WorkstationID, int intError, string strFromDate, string strToDate, int HospitalID);
        
        [System.ServiceModel.OperationContractAttribute(Action="Wipro.NxG.Scheduler.GetConsultationData", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetConsultationDataResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetConsultationDataAsync(string strSelect, string strFilter, int UserId, int WorkstationID, int intError, string strFromDate, string strToDate, int HospitalID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NxG/ServiceContract1/GetSmartSearchResultsparamCode", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetSmartSearchResultsparamCodeRespons" +
            "e")]
        System.Data.DataSet GetSmartSearchResultsparamCode(string ProcedureName, int Type, string Filter, int TagID, int Param1, int Param2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NxG/ServiceContract1/GetSmartSearchResultsparamCode", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetSmartSearchResultsparamCodeRespons" +
            "e")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetSmartSearchResultsparamCodeAsync(string ProcedureName, int Type, string Filter, int TagID, int Param1, int Param2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NxG/ServiceContract1/FetchSubSpecialities", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchSubSpecialitiesResponse")]
        System.Data.DataSet FetchSubSpecialities(int SpecialiseID, string Tbl, int UserId, int WorkstationID, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NxG/ServiceContract1/FetchSubSpecialities", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchSubSpecialitiesResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchSubSpecialitiesAsync(int SpecialiseID, string Tbl, int UserId, int WorkstationID, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="Wipro.NxG.Scheduler.GetDoctorsClinicCodes", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetDoctorsClinicCodesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/GetDoctorsClinicCodesNextGenCustomExc" +
            "eptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet GetDoctorsClinicCodes(int intTblID, string strFilter, int intLanguageID, int intUserID, int intWorkStationID, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="Wipro.NxG.Scheduler.GetDoctorsClinicCodes", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetDoctorsClinicCodesResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetDoctorsClinicCodesAsync(int intTblID, string strFilter, int intLanguageID, int intUserID, int intWorkStationID, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="Wipro.NxG.Scheduler.WSFetchSpecilizationofDoctor", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchSpecilizationofDoctorResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchSpecilizationofDoctorNextGenCust" +
            "omExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchSpecilizationofDoctor(int intTblID, string strFilter, int intLanguageID, int intUserID, int intWorkStationID, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="Wipro.NxG.Scheduler.WSFetchSpecilizationofDoctor", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchSpecilizationofDoctorResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchSpecilizationofDoctorAsync(int intTblID, string strFilter, int intLanguageID, int intUserID, int intWorkStationID, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchPatientAllVisits", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchPatientAllVisitsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchPatientAllVisitsNextGenCustomExc" +
            "eptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchPatientAllVisits(int PatientID, string TBL, int intUserId, int intWorkStationId, int hospitalID, int specializationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchPatientAllVisits", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchPatientAllVisitsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchPatientAllVisitsAsync(int PatientID, string TBL, int intUserId, int intWorkStationId, int hospitalID, int specializationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="SaveConsultationOrderMODA", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveConsultationOrderMODAResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/SaveConsultationOrderMODANextGenCusto" +
            "mExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        int SaveConsultationOrderMODA(int BillableConsultationID, int PatientId, int intRefDoctorID, int IntSpeclizationID, string strBillNo, int ActionType, int intUserID, int intWorkstationID, int intError, string strCallContext, int HospitalId);
        
        [System.ServiceModel.OperationContractAttribute(Action="SaveConsultationOrderMODA", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveConsultationOrderMODAResponse")]
        System.Threading.Tasks.Task<int> SaveConsultationOrderMODAAsync(int BillableConsultationID, int PatientId, int intRefDoctorID, int IntSpeclizationID, string strBillNo, int ActionType, int intUserID, int intWorkstationID, int intError, string strCallContext, int HospitalId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SavePatientMODA", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SavePatientMODAResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/SavePatientMODANextGenCustomException" +
            "Fault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        string SavePatientMODA(System.Data.DataSet dsPatient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SavePatientMODA", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SavePatientMODAResponse")]
        System.Threading.Tasks.Task<string> SavePatientMODAAsync(System.Data.DataSet dsPatient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/UpdatePatientMODA", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/UpdatePatientMODAResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/UpdatePatientMODANextGenCustomExcepti" +
            "onFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        string UpdatePatientMODA(System.Data.DataSet dsPatient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/UpdatePatientMODA", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/UpdatePatientMODAResponse")]
        System.Threading.Tasks.Task<string> UpdatePatientMODAAsync(System.Data.DataSet dsPatient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SaveDoctorAvaliableMODA", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveDoctorAvaliableMODAResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/SaveDoctorAvaliableMODANextGenCustomE" +
            "xceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        int SaveDoctorAvaliableMODA(System.Data.DataSet objDSSave);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SaveDoctorAvaliableMODA", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveDoctorAvaliableMODAResponse")]
        System.Threading.Tasks.Task<int> SaveDoctorAvaliableMODAAsync(System.Data.DataSet objDSSave);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/SaveIPOrders", ReplyAction="http://Wipro.NXG/ServiceContract1/SaveIPOrders")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/SaveIPOrdersNextGenCustomExceptionFau" +
            "lt", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        bool SaveIPOrders(System.Data.DataSet objDS, int intIPID, int patientID, int intConsultationID, byte bytBlocked, System.Data.DataSet objProcDS, System.Data.DataSet dsRequisition, int intUserid, int intWorkstationid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/SaveIPOrders", ReplyAction="http://Wipro.NXG/ServiceContract1/SaveIPOrders")]
        System.Threading.Tasks.Task<bool> SaveIPOrdersAsync(System.Data.DataSet objDS, int intIPID, int patientID, int intConsultationID, byte bytBlocked, System.Data.DataSet objProcDS, System.Data.DataSet dsRequisition, int intUserid, int intWorkstationid);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetWorkFlowID", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetWorkFlowIDResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/GetWorkFlowIDNextGenCustomExceptionFa" +
            "ult", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        int GetWorkFlowID(int TaskID, string WorkFlow);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetWorkFlowID", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetWorkFlowIDResponse")]
        System.Threading.Tasks.Task<int> GetWorkFlowIDAsync(int TaskID, string WorkFlow);
        
        [System.ServiceModel.OperationContractAttribute(Action="Wipro.NxG.Scheduler.GetConsultationDataMODA", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetConsultationDataMODAResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/GetConsultationDataMODANextGenCustomE" +
            "xceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet GetConsultationDataMODA(string strSelect, string strFilter, int UserId, int WorkstationID, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="Wipro.NxG.Scheduler.GetConsultationDataMODA", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetConsultationDataMODAResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetConsultationDataMODAAsync(string strSelect, string strFilter, int UserId, int WorkstationID, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SaveBillMODA", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveBillMODAResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/SaveBillMODANextGenCustomExceptionFau" +
            "lt", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        string SaveBillMODA(System.Data.DataSet dsBill, string BillPrefix, string ParentBillId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SaveBillMODA", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveBillMODAResponse")]
        System.Threading.Tasks.Task<string> SaveBillMODAAsync(System.Data.DataSet dsBill, string BillPrefix, string ParentBillId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SaveCheckInWithClinicCode", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveCheckInWithClinicCodeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/SaveCheckInWithClinicCodeNextGenCusto" +
            "mExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        string SaveCheckInWithClinicCode(
                    System.Data.DataSet dsChekIn, 
                    int AdmissionID, 
                    int PatientID, 
                    int HospitalID, 
                    int Investigation, 
                    int IpOpProcedures, 
                    int Pharmacy, 
                    int VisitID, 
                    int VisitType, 
                    int DoctorID, 
                    bool ISExternal, 
                    int EpisodeID, 
                    int RefDoctorID, 
                    int intFeatureId, 
                    int intFunctionId, 
                    string strCallContext, 
                    bool CheckIn, 
                    int intUserId, 
                    int intWorkStationId, 
                    int intError, 
                    System.Data.DataSet Diseasecode, 
                    int ActiveInsID, 
                    byte IsCollectablebyEmployer, 
                    byte IsDeductablebyEmployer, 
                    byte IsSupplimentarybyEmployer, 
                    byte IsExcessbyEmployer, 
                    int IsNewCheckin, 
                    int SpecialisationID, 
                    int PatientType, 
                    int BillType, 
                    int EmpClinicCodeID, 
                    int referralOrderID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SaveCheckInWithClinicCode", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveCheckInWithClinicCodeResponse")]
        System.Threading.Tasks.Task<string> SaveCheckInWithClinicCodeAsync(
                    System.Data.DataSet dsChekIn, 
                    int AdmissionID, 
                    int PatientID, 
                    int HospitalID, 
                    int Investigation, 
                    int IpOpProcedures, 
                    int Pharmacy, 
                    int VisitID, 
                    int VisitType, 
                    int DoctorID, 
                    bool ISExternal, 
                    int EpisodeID, 
                    int RefDoctorID, 
                    int intFeatureId, 
                    int intFunctionId, 
                    string strCallContext, 
                    bool CheckIn, 
                    int intUserId, 
                    int intWorkStationId, 
                    int intError, 
                    System.Data.DataSet Diseasecode, 
                    int ActiveInsID, 
                    byte IsCollectablebyEmployer, 
                    byte IsDeductablebyEmployer, 
                    byte IsSupplimentarybyEmployer, 
                    byte IsExcessbyEmployer, 
                    int IsNewCheckin, 
                    int SpecialisationID, 
                    int PatientType, 
                    int BillType, 
                    int EmpClinicCodeID, 
                    int referralOrderID);
        
        [System.ServiceModel.OperationContractAttribute(Action="SavePrintCardCountDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SavePrintCardCountDetailsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/SavePrintCardCountDetailsNextGenCusto" +
            "mExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        int SavePrintCardCountDetails(int PatientID, int HospitalID, int intUserId, int intWorkStationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="SavePrintCardCountDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SavePrintCardCountDetailsResponse")]
        System.Threading.Tasks.Task<int> SavePrintCardCountDetailsAsync(int PatientID, int HospitalID, int intUserId, int intWorkStationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetFetchPatientsInfo", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetFetchPatientsInfoResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/GetFetchPatientsInfoNextGenCustomExce" +
            "ptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet GetFetchPatientsInfo(string RegCode, int intUserId, int intWorkStationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetFetchPatientsInfo", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetFetchPatientsInfoResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetFetchPatientsInfoAsync(string RegCode, int intUserId, int intWorkStationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetFetchPatientDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetFetchPatientDetailsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/GetFetchPatientDetailsNextGenCustomEx" +
            "ceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet GetFetchPatientDetails(int intPatientID, string RegCode, string strTabletype, int intUserID, int intWorkStationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetFetchPatientDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetFetchPatientDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetFetchPatientDetailsAsync(int intPatientID, string RegCode, string strTabletype, int intUserID, int intWorkStationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/GetPatientReferralWorklist", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetPatientReferralWorklistResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/GetPatientReferralWorklistNextGenCust" +
            "omExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet GetPatientReferralWorklist(string UHID, string fromDate, string toDate, int TableId, int intWorkStationId, string PatientType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/GetPatientReferralWorklist", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetPatientReferralWorklistResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetPatientReferralWorklistAsync(string UHID, string fromDate, string toDate, int TableId, int intWorkStationId, string PatientType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/GetDoctorsOnSpecializeID", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetDoctorsOnSpecializeIDResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/GetDoctorsOnSpecializeIDNextGenCustom" +
            "ExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet GetDoctorsOnSpecializeID(int specializeID, int intWorkStationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/GetDoctorsOnSpecializeID", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetDoctorsOnSpecializeIDResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetDoctorsOnSpecializeIDAsync(int specializeID, int intWorkStationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="SaveReferralOrderDoctors", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveReferralOrderDoctorsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/SaveReferralOrderDoctorsNextGenCustom" +
            "ExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        int SaveReferralOrderDoctors(string referrals, int userId, int intWorkStationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="SaveReferralOrderDoctors", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveReferralOrderDoctorsResponse")]
        System.Threading.Tasks.Task<int> SaveReferralOrderDoctorsAsync(string referrals, int userId, int intWorkStationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetSchedulePatientInfo", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetSchedulePatientInfoResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/GetSchedulePatientInfoNextGenCustomEx" +
            "ceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet GetSchedulePatientInfo(int scheduleid, int intUserId, int intWorkStationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetSchedulePatientInfo", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetSchedulePatientInfoResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetSchedulePatientInfoAsync(int scheduleid, int intUserId, int intWorkStationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/EndPatientEpisode", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/EndPatientEpisodeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/EndPatientEpisodeNextGenCustomExcepti" +
            "onFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        bool EndPatientEpisode(int episodeID, string reason, int userId, int workStationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/EndPatientEpisode", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/EndPatientEpisodeResponse")]
        System.Threading.Tasks.Task<bool> EndPatientEpisodeAsync(int episodeID, string reason, int userId, int workStationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SavePatientChildGroupMapping", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SavePatientChildGroupMappingResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/SavePatientChildGroupMappingNextGenCu" +
            "stomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        int SavePatientChildGroupMapping(string PatientID, System.Data.DataTable ChildGroups, int userId, int intWorkStationId, int HospitalId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SavePatientChildGroupMapping", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SavePatientChildGroupMappingResponse")]
        System.Threading.Tasks.Task<int> SavePatientChildGroupMappingAsync(string PatientID, System.Data.DataTable ChildGroups, int userId, int intWorkStationId, int HospitalId);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchPatientChildGroupMapping", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchPatientChildGroupMappingResponse" +
            "")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchPatientChildGroupMappingNextGenC" +
            "ustomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchPatientChildGroupMapping(string UHID, int intUserID, int intWorkStationId, int HospitalId);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchPatientChildGroupMapping", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchPatientChildGroupMappingResponse" +
            "")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchPatientChildGroupMappingAsync(string UHID, int intUserID, int intWorkStationId, int HospitalId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SaveCheckInWithoutClinicCode", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveCheckInWithoutClinicCodeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/SaveCheckInWithoutClinicCodeNextGenCu" +
            "stomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        string SaveCheckInWithoutClinicCode(
                    System.Data.DataSet dsChekIn, 
                    int AdmissionID, 
                    int PatientID, 
                    int HospitalID, 
                    int Investigation, 
                    int IpOpProcedures, 
                    int Pharmacy, 
                    int VisitID, 
                    int VisitType, 
                    int DoctorID, 
                    bool ISExternal, 
                    int EpisodeID, 
                    int RefDoctorID, 
                    int intFeatureId, 
                    int intFunctionId, 
                    string strCallContext, 
                    bool CheckIn, 
                    int intUserId, 
                    int intWorkStationId, 
                    int intError, 
                    System.Data.DataSet Diseasecode, 
                    int ActiveInsID, 
                    byte IsCollectablebyEmployer, 
                    byte IsDeductablebyEmployer, 
                    byte IsSupplimentarybyEmployer, 
                    byte IsExcessbyEmployer, 
                    int IsNewCheckin, 
                    int SpecialisationID, 
                    int PatientType, 
                    int BillType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SaveCheckInWithoutClinicCode", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveCheckInWithoutClinicCodeResponse")]
        System.Threading.Tasks.Task<string> SaveCheckInWithoutClinicCodeAsync(
                    System.Data.DataSet dsChekIn, 
                    int AdmissionID, 
                    int PatientID, 
                    int HospitalID, 
                    int Investigation, 
                    int IpOpProcedures, 
                    int Pharmacy, 
                    int VisitID, 
                    int VisitType, 
                    int DoctorID, 
                    bool ISExternal, 
                    int EpisodeID, 
                    int RefDoctorID, 
                    int intFeatureId, 
                    int intFunctionId, 
                    string strCallContext, 
                    bool CheckIn, 
                    int intUserId, 
                    int intWorkStationId, 
                    int intError, 
                    System.Data.DataSet Diseasecode, 
                    int ActiveInsID, 
                    byte IsCollectablebyEmployer, 
                    byte IsDeductablebyEmployer, 
                    byte IsSupplimentarybyEmployer, 
                    byte IsExcessbyEmployer, 
                    int IsNewCheckin, 
                    int SpecialisationID, 
                    int PatientType, 
                    int BillType);
        
        [System.ServiceModel.OperationContractAttribute(Action="SaveModifyDoctorSpecialisationMapping", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveModifyDoctorSpecialisationMapping" +
            "Response")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/SaveModifyDoctorSpecialisationMapping" +
            "NextGenCustomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        bool SaveModifyDoctorSpecialisationMapping(int intEmpID, string strSpecialisationID, int intUserID, int intWorkStationID, int intError, int HospitalID);
        
        [System.ServiceModel.OperationContractAttribute(Action="SaveModifyDoctorSpecialisationMapping", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveModifyDoctorSpecialisationMapping" +
            "Response")]
        System.Threading.Tasks.Task<bool> SaveModifyDoctorSpecialisationMappingAsync(int intEmpID, string strSpecialisationID, int intUserID, int intWorkStationID, int intError, int HospitalID);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetDoctorSpecialisationMapping", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetDoctorSpecialisationMappingRespons" +
            "e")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/GetDoctorSpecialisationMappingNextGen" +
            "CustomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet GetDoctorSpecialisationMapping(int intEmpID, string TblID, int intUserID, int intWorkStationID, int intError, int HospitalID);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetDoctorSpecialisationMapping", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetDoctorSpecialisationMappingRespons" +
            "e")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetDoctorSpecialisationMappingAsync(int intEmpID, string TblID, int intUserID, int intWorkStationID, int intError, int HospitalID);
        
        [System.ServiceModel.OperationContractAttribute(Action="UnMapPatientDependents", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/UnMapPatientDependentsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/UnMapPatientDependentsNextGenCustomEx" +
            "ceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        int UnMapPatientDependents(int intPatientId, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="UnMapPatientDependents", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/UnMapPatientDependentsResponse")]
        System.Threading.Tasks.Task<int> UnMapPatientDependentsAsync(int intPatientId, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchPatientActivityListOnVisitID", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchPatientActivityListOnVisitIDResp" +
            "onse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchPatientActivityListOnVisitIDNext" +
            "GenCustomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchPatientActivityListOnVisitID(int intEpisodeID, int intVisitID, int intPatientID, string strTbl, int intUserID, int intWorkStationID, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchPatientActivityListOnVisitID", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchPatientActivityListOnVisitIDResp" +
            "onse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchPatientActivityListOnVisitIDAsync(int intEpisodeID, int intVisitID, int intPatientID, string strTbl, int intUserID, int intWorkStationID, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="SaveActivityList", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveActivityListResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/SaveActivityListNextGenCustomExceptio" +
            "nFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        int SaveActivityList(int intPatientID, int intVisitID, int intEpisodeID, string strXMLActivityList, int intUserID, int intWorkStationID, int intError, int intHospitalID);
        
        [System.ServiceModel.OperationContractAttribute(Action="SaveActivityList", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveActivityListResponse")]
        System.Threading.Tasks.Task<int> SaveActivityListAsync(int intPatientID, int intVisitID, int intEpisodeID, string strXMLActivityList, int intUserID, int intWorkStationID, int intError, int intHospitalID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchActivePackage", ReplyAction="http://Wipro.NXG/ServiceContract1/FetchActivePackage")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchActivePackageNextGenCustomExcept" +
            "ionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchActivePackage(int patientId, int userId, string strTableId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchActivePackage", ReplyAction="http://Wipro.NXG/ServiceContract1/FetchActivePackage")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchActivePackageAsync(int patientId, int userId, string strTableId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchPackageUtilization", ReplyAction="http://Wipro.NXG/ServiceContract1/FetchPackageUtilization")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchPackageUtilizationNextGenCustomE" +
            "xceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchPackageUtilization(int patientId, int billId, int packageId, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchPackageUtilization", ReplyAction="http://Wipro.NXG/ServiceContract1/FetchPackageUtilization")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchPackageUtilizationAsync(int patientId, int billId, int packageId, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/SavePackageUtilization", ReplyAction="http://Wipro.NXG/ServiceContract1/SavePackageUtilization")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/SavePackageUtilizationNextGenCustomEx" +
            "ceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        bool SavePackageUtilization(System.Data.DataSet dsPackageUtil, int userId, int billId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/SavePackageUtilization", ReplyAction="http://Wipro.NXG/ServiceContract1/SavePackageUtilization")]
        System.Threading.Tasks.Task<bool> SavePackageUtilizationAsync(System.Data.DataSet dsPackageUtil, int userId, int billId);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchMultipleInsurances", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchMultipleInsurancesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchMultipleInsurancesNextGenCustomE" +
            "xceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchMultipleInsurances(int intPatientID);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchMultipleInsurances", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchMultipleInsurancesResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchMultipleInsurancesAsync(int intPatientID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/CancelPackageItemUtilization", ReplyAction="http://Wipro.NXG/ServiceContract1/CancelPackageItemUtilization")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/CancelPackageItemUtilizationNextGenCu" +
            "stomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        bool CancelPackageItemUtilization(System.Data.DataSet dsPackageUtil, int userId, int billId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/CancelPackageItemUtilization", ReplyAction="http://Wipro.NXG/ServiceContract1/CancelPackageItemUtilization")]
        System.Threading.Tasks.Task<bool> CancelPackageItemUtilizationAsync(System.Data.DataSet dsPackageUtil, int userId, int billId);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetBillDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetBillDetailsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/GetBillDetailsNextGenCustomExceptionF" +
            "ault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet GetBillDetails(int PatientID, int UserId, int WorkstationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetBillDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetBillDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetBillDetailsAsync(int PatientID, int UserId, int WorkstationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="SaveNewConPriority", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveNewConPriorityResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/SaveNewConPriorityNextGenCustomExcept" +
            "ionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        int SaveNewConPriority(int ConsultID, int ConsultTypeID, int intUserId, int intworkStation, int HospitalID, int OldConsultationtypeID, string TokeNo, int RemarksID);
        
        [System.ServiceModel.OperationContractAttribute(Action="SaveNewConPriority", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveNewConPriorityResponse")]
        System.Threading.Tasks.Task<int> SaveNewConPriorityAsync(int ConsultID, int ConsultTypeID, int intUserId, int intworkStation, int HospitalID, int OldConsultationtypeID, string TokeNo, int RemarksID);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchPatientAdmissionLetters", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchPatientAdmissionLettersResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchPatientAdmissionLettersNextGenCu" +
            "stomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchPatientAdmissionLetters(int intIPID, int intUserId, int intWorkstationid);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchPatientAdmissionLetters", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchPatientAdmissionLettersResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchPatientAdmissionLettersAsync(int intIPID, int intUserId, int intWorkstationid);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchAuthenticatedUsers", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchAuthenticatedUsersResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchAuthenticatedUsersNextGenCustomE" +
            "xceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchAuthenticatedUsers(string searchFilter, int intUserId, int intWorkstationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchAuthenticatedUsers", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchAuthenticatedUsersResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchAuthenticatedUsersAsync(string searchFilter, int intUserId, int intWorkstationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchFetchPatientMonitoringDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchFetchPatientMonitoringDetailsRes" +
            "ponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchFetchPatientMonitoringDetailsNex" +
            "tGenCustomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchFetchPatientMonitoringDetails(int intPatientID, int intType, string strConsFilter, int intUserID, int intWorkstationID, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchFetchPatientMonitoringDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchFetchPatientMonitoringDetailsRes" +
            "ponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchFetchPatientMonitoringDetailsAsync(int intPatientID, int intType, string strConsFilter, int intUserID, int intWorkstationID, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="fillDoctorAvailabilityDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/fillDoctorAvailabilityDetailsResponse" +
            "")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/fillDoctorAvailabilityDetailsNextGenC" +
            "ustomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet fillDoctorAvailabilityDetails(int SpecilizationId, int DoctorId, int userId, int WorkStationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="fillDoctorAvailabilityDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/fillDoctorAvailabilityDetailsResponse" +
            "")]
        System.Threading.Tasks.Task<System.Data.DataSet> fillDoctorAvailabilityDetailsAsync(int SpecilizationId, int DoctorId, int userId, int WorkStationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchDoctorSpecializations", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchDoctorSpecializationsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchDoctorSpecializationsNextGenCust" +
            "omExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchDoctorSpecializations(string strType, string strFilter, int intUserID, int intWorkstationID, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchDoctorSpecializations", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchDoctorSpecializationsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchDoctorSpecializationsAsync(string strType, string strFilter, int intUserID, int intWorkstationID, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchPatientNationalityIds", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchPatientNationalityIdsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchPatientNationalityIdsNextGenCust" +
            "omExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchPatientNationalityIds(int intPatientID, int UserID, int WorkStation, int HospID);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchPatientNationalityIds", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchPatientNationalityIdsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchPatientNationalityIdsAsync(int intPatientID, int UserID, int WorkStation, int HospID);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchItemPriceForMultipleItems", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchItemPriceForMultipleItemsRespons" +
            "e")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchItemPriceForMultipleItemsNextGen" +
            "CustomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchItemPriceForMultipleItems(System.Data.DataTable dtItems, int intTariffId, int intSpecialisationId, int intBedTypeID, int intUserId, int intWorkstationid);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchItemPriceForMultipleItems", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchItemPriceForMultipleItemsRespons" +
            "e")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchItemPriceForMultipleItemsAsync(System.Data.DataTable dtItems, int intTariffId, int intSpecialisationId, int intBedTypeID, int intUserId, int intWorkstationid);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchHospitalCompanyDetailsNew", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchHospitalCompanyDetailsNewRespons" +
            "e")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchHospitalCompanyDetailsNewNextGen" +
            "CustomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchHospitalCompanyDetailsNew(int CompanyID, string PatientType, int intUserID, int intWorkStationID, int intError, int HospitalID);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchHospitalCompanyDetailsNew", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchHospitalCompanyDetailsNewRespons" +
            "e")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchHospitalCompanyDetailsNewAsync(int CompanyID, string PatientType, int intUserID, int intWorkStationID, int intError, int HospitalID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/SavePatientIntimationLetter", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SavePatientIntimationLetterResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/SavePatientIntimationLetterNextGenCus" +
            "tomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        int SavePatientIntimationLetter(System.Data.DataSet DsSave, int intFeatureId, int intUserID, int intWorkstationID, string strCallContext);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/SavePatientIntimationLetter", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SavePatientIntimationLetterResponse")]
        System.Threading.Tasks.Task<int> SavePatientIntimationLetterAsync(System.Data.DataSet DsSave, int intFeatureId, int intUserID, int intWorkstationID, string strCallContext);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchPatientIntimationLetter", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchPatientIntimationLetterResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchPatientIntimationLetterNextGenCu" +
            "stomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchPatientIntimationLetter(string strFilter, int intUserID, int intWorkstationID, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchPatientIntimationLetter", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchPatientIntimationLetterResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchPatientIntimationLetterAsync(string strFilter, int intUserID, int intWorkstationID, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetAppointmentRequestDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetAppointmentRequestDetailsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/GetAppointmentRequestDetailsNextGenCu" +
            "stomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet GetAppointmentRequestDetails(int intAppointmentRequestID, string sRegCode, int DoctorId, int SpecialiseID, string Fromdate, string Todate, int status);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetAppointmentRequestDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetAppointmentRequestDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetAppointmentRequestDetailsAsync(int intAppointmentRequestID, string sRegCode, int DoctorId, int SpecialiseID, string Fromdate, string Todate, int status);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchDoctorDetailsForInAndOut", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchDoctorDetailsForInAndOutResponse" +
            "")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchDoctorDetailsForInAndOutNextGenC" +
            "ustomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchDoctorDetailsForInAndOut(int DeptId, int DocId, int HospitalID, int intWorkStation);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchDoctorDetailsForInAndOut", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchDoctorDetailsForInAndOutResponse" +
            "")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchDoctorDetailsForInAndOutAsync(int DeptId, int DocId, int HospitalID, int intWorkStation);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchDoctorInOutReasons", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchDoctorInOutReasonsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchDoctorInOutReasonsNextGenCustomE" +
            "xceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchDoctorInOutReasons(string strFilter, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchDoctorInOutReasons", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchDoctorInOutReasonsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchDoctorInOutReasonsAsync(string strFilter, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="SaveDoctorInOutDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveDoctorInOutDetailsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/SaveDoctorInOutDetailsNextGenCustomEx" +
            "ceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        int SaveDoctorInOutDetails(int HospitalId, int intUserId, int intworkStation, System.Data.DataTable dtDoctorDet);
        
        [System.ServiceModel.OperationContractAttribute(Action="SaveDoctorInOutDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveDoctorInOutDetailsResponse")]
        System.Threading.Tasks.Task<int> SaveDoctorInOutDetailsAsync(int HospitalId, int intUserId, int intworkStation, System.Data.DataTable dtDoctorDet);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchConsultationDoctorDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchConsultationDoctorDetailsRespons" +
            "e")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchConsultationDoctorDetailsNextGen" +
            "CustomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        string FetchConsultationDoctorDetails(int ServiceId, int ServiceItemId, int SpecialiseID, int HospitalID, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchConsultationDoctorDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchConsultationDoctorDetailsRespons" +
            "e")]
        System.Threading.Tasks.Task<string> FetchConsultationDoctorDetailsAsync(int ServiceId, int ServiceItemId, int SpecialiseID, int HospitalID, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="fetchTenativeAppointmentsPatientWise", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/fetchTenativeAppointmentsPatientWiseR" +
            "esponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/fetchTenativeAppointmentsPatientWiseN" +
            "extGenCustomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet fetchTenativeAppointmentsPatientWise(int PatientId, string currDate, int intUserId, int HospitalID, int intWorkStationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="fetchTenativeAppointmentsPatientWise", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/fetchTenativeAppointmentsPatientWiseR" +
            "esponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> fetchTenativeAppointmentsPatientWiseAsync(int PatientId, string currDate, int intUserId, int HospitalID, int intWorkStationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchOnlyDoctorDepartments", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchOnlyDoctorDepartmentsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchOnlyDoctorDepartmentsNextGenCust" +
            "omExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchOnlyDoctorDepartments(int LocationId, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchOnlyDoctorDepartments", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchOnlyDoctorDepartmentsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchOnlyDoctorDepartmentsAsync(int LocationId, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchGroupFutureSchedules", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchGroupFutureSchedulesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchGroupFutureSchedulesNextGenCusto" +
            "mExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchGroupFutureSchedules(int PatientGroupId, int PatientID, int intWorkStationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchGroupFutureSchedules", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchGroupFutureSchedulesResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchGroupFutureSchedulesAsync(int PatientGroupId, int PatientID, int intWorkStationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="SaveGroupScheduleAddPatient", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveGroupScheduleAddPatientResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/SaveGroupScheduleAddPatientNextGenCus" +
            "tomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        int SaveGroupScheduleAddPatient(
                    int PatientGroupId, 
                    int PatientID, 
                    string Name, 
                    int Age, 
                    int AgeUOMID, 
                    string Phone, 
                    string Email, 
                    string Remarks, 
                    int GenderID, 
                    string Name2l, 
                    int VisitID, 
                    string SSN, 
                    string ContactNo, 
                    int blocked, 
                    int Hospitalid, 
                    int AppointmentTypeID, 
                    int SessionTypeID, 
                    int UserID, 
                    int WorkStationID, 
                    System.Data.DataTable Resources, 
                    int Error);
        
        [System.ServiceModel.OperationContractAttribute(Action="SaveGroupScheduleAddPatient", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveGroupScheduleAddPatientResponse")]
        System.Threading.Tasks.Task<int> SaveGroupScheduleAddPatientAsync(
                    int PatientGroupId, 
                    int PatientID, 
                    string Name, 
                    int Age, 
                    int AgeUOMID, 
                    string Phone, 
                    string Email, 
                    string Remarks, 
                    int GenderID, 
                    string Name2l, 
                    int VisitID, 
                    string SSN, 
                    string ContactNo, 
                    int blocked, 
                    int Hospitalid, 
                    int AppointmentTypeID, 
                    int SessionTypeID, 
                    int UserID, 
                    int WorkStationID, 
                    System.Data.DataTable Resources, 
                    int Error);
        
        [System.ServiceModel.OperationContractAttribute(Action="DeleteMultiGroupSchedule", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/DeleteMultiGroupScheduleResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/DeleteMultiGroupScheduleNextGenCustom" +
            "ExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        bool DeleteMultiGroupSchedule(string ScheduleID, int PatientID, bool Blocked, string strCancellationRemarks, int intUserid, int intWorkstationid, int intHospitalID, int intServiceID, int intCancelReasonID, int intActionTypeID);
        
        [System.ServiceModel.OperationContractAttribute(Action="DeleteMultiGroupSchedule", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/DeleteMultiGroupScheduleResponse")]
        System.Threading.Tasks.Task<bool> DeleteMultiGroupScheduleAsync(string ScheduleID, int PatientID, bool Blocked, string strCancellationRemarks, int intUserid, int intWorkstationid, int intHospitalID, int intServiceID, int intCancelReasonID, int intActionTypeID);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchAssignedOPPackages", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchAssignedOPPackagesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchAssignedOPPackagesNextGenCustomE" +
            "xceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchAssignedOPPackages(int PatientID, int PackageID, int UserID, int WorkStationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchAssignedOPPackages", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchAssignedOPPackagesResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchAssignedOPPackagesAsync(int PatientID, int PackageID, int UserID, int WorkStationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="SaveOPPAckageAssignmentDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveOPPAckageAssignmentDetailsRespons" +
            "e")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/SaveOPPAckageAssignmentDetailsNextGen" +
            "CustomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        int SaveOPPAckageAssignmentDetails(int PatientId, int PackageId, string FromDate, string ToDate, int count, int minDays, int UserID, int intworkStation, int HospitalId);
        
        [System.ServiceModel.OperationContractAttribute(Action="SaveOPPAckageAssignmentDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveOPPAckageAssignmentDetailsRespons" +
            "e")]
        System.Threading.Tasks.Task<int> SaveOPPAckageAssignmentDetailsAsync(int PatientId, int PackageId, string FromDate, string ToDate, int count, int minDays, int UserID, int intworkStation, int HospitalId);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchAdminMastersSpecimen", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchAdminMastersSpecimenResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchAdminMastersSpecimenNextGenCusto" +
            "mExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchAdminMastersSpecimen(int Type, string Filter, int UserID, int WorkStationID, int Error);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchAdminMastersSpecimen", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchAdminMastersSpecimenResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchAdminMastersSpecimenAsync(int Type, string Filter, int UserID, int WorkStationID, int Error);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchComonAdminMastersForOVR", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchComonAdminMastersForOVRResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchComonAdminMastersForOVRNextGenCu" +
            "stomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchComonAdminMastersForOVR(int TableId, string Filter, int UserId, int intWorkStationId, int Error);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchComonAdminMastersForOVR", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchComonAdminMastersForOVRResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchComonAdminMastersForOVRAsync(int TableId, string Filter, int UserId, int intWorkStationId, int Error);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchOccuranceSubTyes", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchOccuranceSubTyesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchOccuranceSubTyesNextGenCustomExc" +
            "eptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchOccuranceSubTyes(string Filter, int UserId, int intWorkStationId, int Error);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchOccuranceSubTyes", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchOccuranceSubTyesResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchOccuranceSubTyesAsync(string Filter, int UserId, int intWorkStationId, int Error);
        
        [System.ServiceModel.OperationContractAttribute(Action="SaveOVRIncidentRequestDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveOVRIncidentRequestDetailsResponse" +
            "")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/SaveOVRIncidentRequestDetailsNextGenC" +
            "ustomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        int SaveOVRIncidentRequestDetails(
                    int IncidentTypeId, 
                    string IncidentDateTime, 
                    int HospDeptId, 
                    int ReqType, 
                    string FactualDescription, 
                    string Assessment, 
                    bool IsPhysicianNotified, 
                    int PhysicianId, 
                    bool IsMDSeepatient, 
                    string physicianEnterdDate, 
                    int Severity, 
                    System.Data.DataTable RequestDetails, 
                    System.Data.DataTable WitnessInformation, 
                    System.Data.DataTable OVRIncidentTypeinfo, 
                    int STATUS, 
                    int UserId, 
                    int WorkStationId, 
                    int Error, 
                    int InitiatingDeptID, 
                    string FilePath, 
                    int HospitalID);
        
        [System.ServiceModel.OperationContractAttribute(Action="SaveOVRIncidentRequestDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveOVRIncidentRequestDetailsResponse" +
            "")]
        System.Threading.Tasks.Task<int> SaveOVRIncidentRequestDetailsAsync(
                    int IncidentTypeId, 
                    string IncidentDateTime, 
                    int HospDeptId, 
                    int ReqType, 
                    string FactualDescription, 
                    string Assessment, 
                    bool IsPhysicianNotified, 
                    int PhysicianId, 
                    bool IsMDSeepatient, 
                    string physicianEnterdDate, 
                    int Severity, 
                    System.Data.DataTable RequestDetails, 
                    System.Data.DataTable WitnessInformation, 
                    System.Data.DataTable OVRIncidentTypeinfo, 
                    int STATUS, 
                    int UserId, 
                    int WorkStationId, 
                    int Error, 
                    int InitiatingDeptID, 
                    string FilePath, 
                    int HospitalID);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetOVRIncidentsWorkListDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetOVRIncidentsWorkListDetailsRespons" +
            "e")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/GetOVRIncidentsWorkListDetailsNextGen" +
            "CustomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet GetOVRIncidentsWorkListDetails(string FromDate, string ToDate, int StatusId, int EmpId, int UserId, int WorkStnId, int Error, int DepartmentId, bool ISQOM, int HospitalId);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetOVRIncidentsWorkListDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetOVRIncidentsWorkListDetailsRespons" +
            "e")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetOVRIncidentsWorkListDetailsAsync(string FromDate, string ToDate, int StatusId, int EmpId, int UserId, int WorkStnId, int Error, int DepartmentId, bool ISQOM, int HospitalId);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchOVRIncidentReqDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchOVRIncidentReqDetailsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchOVRIncidentReqDetailsNextGenCust" +
            "omExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchOVRIncidentReqDetails(int OVRIncReqId, string Table, int UserId, int WorkStnId, int Error, int HospitalId);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchOVRIncidentReqDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchOVRIncidentReqDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchOVRIncidentReqDetailsAsync(int OVRIncReqId, string Table, int UserId, int WorkStnId, int Error, int HospitalId);
        
        [System.ServiceModel.OperationContractAttribute(Action="SaveOVRIncidentSectionWise", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveOVRIncidentSectionWiseResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/SaveOVRIncidentSectionWiseNextGenCust" +
            "omExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        int SaveOVRIncidentSectionWise(
                    int OvrIncidentId, 
                    int SectionId, 
                    string HODFactors, 
                    string HODAction, 
                    string HODPreventions, 
                    int HODRiskLevel, 
                    string RespondingDeptAction, 
                    bool IsHODAck, 
                    bool IsRespDeptAck, 
                    bool IsQOMAck, 
                    int RespondingDeptId, 
                    int status, 
                    int UserId, 
                    int WorkStationId, 
                    int Error, 
                    bool formComplete, 
                    bool properCasueIdentified, 
                    bool properTimeFrame, 
                    bool ActionCompliesStandard, 
                    bool EffectiveCorrectiveAction, 
                    int FurtherActionTaken, 
                    int CodeOfCat, 
                    int CodeOfSubCat, 
                    int CodeOfCause, 
                    int Severity, 
                    string Remarks, 
                    string FilePath, 
                    int HospitalID);
        
        [System.ServiceModel.OperationContractAttribute(Action="SaveOVRIncidentSectionWise", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveOVRIncidentSectionWiseResponse")]
        System.Threading.Tasks.Task<int> SaveOVRIncidentSectionWiseAsync(
                    int OvrIncidentId, 
                    int SectionId, 
                    string HODFactors, 
                    string HODAction, 
                    string HODPreventions, 
                    int HODRiskLevel, 
                    string RespondingDeptAction, 
                    bool IsHODAck, 
                    bool IsRespDeptAck, 
                    bool IsQOMAck, 
                    int RespondingDeptId, 
                    int status, 
                    int UserId, 
                    int WorkStationId, 
                    int Error, 
                    bool formComplete, 
                    bool properCasueIdentified, 
                    bool properTimeFrame, 
                    bool ActionCompliesStandard, 
                    bool EffectiveCorrectiveAction, 
                    int FurtherActionTaken, 
                    int CodeOfCat, 
                    int CodeOfSubCat, 
                    int CodeOfCause, 
                    int Severity, 
                    string Remarks, 
                    string FilePath, 
                    int HospitalID);
        
        [System.ServiceModel.OperationContractAttribute(Action="FillCodeOfSubCategoryTyes", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FillCodeOfSubCategoryTyesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FillCodeOfSubCategoryTyesNextGenCusto" +
            "mExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FillCodeOfSubCategoryTyes(int CodeOfCatId, int intWorkStationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="FillCodeOfSubCategoryTyes", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FillCodeOfSubCategoryTyesResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FillCodeOfSubCategoryTyesAsync(int CodeOfCatId, int intWorkStationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetOvrEmpPermissions", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetOvrEmpPermissionsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/GetOvrEmpPermissionsNextGenCustomExce" +
            "ptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet GetOvrEmpPermissions(int EmpID, int WorkStnId);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetOvrEmpPermissions", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetOvrEmpPermissionsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetOvrEmpPermissionsAsync(int EmpID, int WorkStnId);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetTestTaskStatusForOVR", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetTestTaskStatusForOVRResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/GetTestTaskStatusForOVRNextGenCustomE" +
            "xceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet GetTestTaskStatusForOVR(int intUserId, int intWorkStationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetTestTaskStatusForOVR", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetTestTaskStatusForOVRResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetTestTaskStatusForOVRAsync(int intUserId, int intWorkStationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="DayWiseUnbilledVisits", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/DayWiseUnbilledVisitsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/DayWiseUnbilledVisitsNextGenCustomExc" +
            "eptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        string DayWiseUnbilledVisits(string frmDate, string toDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="DayWiseUnbilledVisits", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/DayWiseUnbilledVisitsResponse")]
        System.Threading.Tasks.Task<string> DayWiseUnbilledVisitsAsync(string frmDate, string toDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetOPOrdersForBilling", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetOPOrdersForBillingResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/GetOPOrdersForBillingNextGenCustomExc" +
            "eptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        string GetOPOrdersForBilling(long lngIPID, int IntWorkStationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetOPOrdersForBilling", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetOPOrdersForBillingResponse")]
        System.Threading.Tasks.Task<string> GetOPOrdersForBillingAsync(long lngIPID, int IntWorkStationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchPatientNewTestOrders", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchPatientNewTestOrdersResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchPatientNewTestOrdersNextGenCusto" +
            "mExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchPatientNewTestOrders(string FromDate, string ToDate, int PatientID, int AdmissionID, int intUserID, int intWorkStnId);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchPatientNewTestOrders", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchPatientNewTestOrdersResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchPatientNewTestOrdersAsync(string FromDate, string ToDate, int PatientID, int AdmissionID, int intUserID, int intWorkStnId);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchPatientVisitsForGOE_Moda", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchPatientVisitsForGOE_ModaResponse" +
            "")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchPatientVisitsForGOE_ModaNextGenC" +
            "ustomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchPatientVisitsForGOE_Moda(int PatientID, int intUserID, int intWorkStnId);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchPatientVisitsForGOE_Moda", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchPatientVisitsForGOE_ModaResponse" +
            "")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchPatientVisitsForGOE_ModaAsync(int PatientID, int intUserID, int intWorkStnId);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetCostEstimationDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetCostEstimationDetailsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/GetCostEstimationDetailsNextGenCustom" +
            "ExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet GetCostEstimationDetails(int PatientId, int TarrifId, int DoctId, int PatientType, int IPId, string SurgeryIds, int intUserId, int intWorkStationId, int intHospitalid, int intBedTypeID);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetCostEstimationDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetCostEstimationDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetCostEstimationDetailsAsync(int PatientId, int TarrifId, int DoctId, int PatientType, int IPId, string SurgeryIds, int intUserId, int intWorkStationId, int intHospitalid, int intBedTypeID);
        
        [System.ServiceModel.OperationContractAttribute(Action="SaveCostEstimationDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveCostEstimationDetailsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/SaveCostEstimationDetailsNextGenCusto" +
            "mExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        int SaveCostEstimationDetails(int PatientId, decimal EstimatedAmount, decimal CPAY, System.Data.DataTable dtServices, int intUserId, int intWorkStationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="SaveCostEstimationDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveCostEstimationDetailsResponse")]
        System.Threading.Tasks.Task<int> SaveCostEstimationDetailsAsync(int PatientId, decimal EstimatedAmount, decimal CPAY, System.Data.DataTable dtServices, int intUserId, int intWorkStationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetHospitalVATRegistration", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetHospitalVATRegistrationResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/GetHospitalVATRegistrationNextGenCust" +
            "omExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet GetHospitalVATRegistration(string Type, int HospitalId, int intUserID, int intWorkStationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetHospitalVATRegistration", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetHospitalVATRegistrationResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetHospitalVATRegistrationAsync(string Type, int HospitalId, int intUserID, int intWorkStationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetMasterVATConfig", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetMasterVATConfigResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/GetMasterVATConfigNextGenCustomExcept" +
            "ionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet GetMasterVATConfig(int PatientType, int HospitalId, int TaxType);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetMasterVATConfig", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetMasterVATConfigResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetMasterVATConfigAsync(int PatientType, int HospitalId, int TaxType);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetItemVATDetailsFromItemMaster", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetItemVATDetailsFromItemMasterRespon" +
            "se")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/GetItemVATDetailsFromItemMasterNextGe" +
            "nCustomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet GetItemVATDetailsFromItemMaster(int itemId, int HospitalId);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetItemVATDetailsFromItemMaster", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetItemVATDetailsFromItemMasterRespon" +
            "se")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetItemVATDetailsFromItemMasterAsync(int itemId, int HospitalId);
        
        [System.ServiceModel.OperationContractAttribute(Action="SaveUserAppointmentSpecialityMapping", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveUserAppointmentSpecialityMappingR" +
            "esponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/SaveUserAppointmentSpecialityMappingN" +
            "extGenCustomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        int SaveUserAppointmentSpecialityMapping(int SID, System.Data.DataTable dtServices, int intUserId, int intWorkStationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="SaveUserAppointmentSpecialityMapping", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveUserAppointmentSpecialityMappingR" +
            "esponse")]
        System.Threading.Tasks.Task<int> SaveUserAppointmentSpecialityMappingAsync(int SID, System.Data.DataTable dtServices, int intUserId, int intWorkStationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="fetchUserAppointmentSpecialityMapping", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/fetchUserAppointmentSpecialityMapping" +
            "Response")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/fetchUserAppointmentSpecialityMapping" +
            "NextGenCustomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet fetchUserAppointmentSpecialityMapping(int SID, int intWorkStationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="fetchUserAppointmentSpecialityMapping", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/fetchUserAppointmentSpecialityMapping" +
            "Response")]
        System.Threading.Tasks.Task<System.Data.DataSet> fetchUserAppointmentSpecialityMappingAsync(int SID, int intWorkStationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/GetWorkListDetailsPatientCheckIn", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetWorkListDetailsPatientCheckInRespo" +
            "nse")]
        System.Data.DataSet GetWorkListDetailsPatientCheckIn(string strWorkListName, int TableId, int startrow, int endrow, string strfiltercondition, int intUserId, int intWorkStationId, System.Data.DataSet dsDBParams, string FromDate, string ToDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/GetWorkListDetailsPatientCheckIn", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetWorkListDetailsPatientCheckInRespo" +
            "nse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetWorkListDetailsPatientCheckInAsync(string strWorkListName, int TableId, int startrow, int endrow, string strfiltercondition, int intUserId, int intWorkStationId, System.Data.DataSet dsDBParams, string FromDate, string ToDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/ResourceAavailability_Check", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/ResourceAavailability_CheckResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/ResourceAavailability_CheckNextGenCus" +
            "tomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        string ResourceAavailability_Check(string strFromDate, string strToDate, string strDoctorId, System.Data.DataTable dtItems);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/ResourceAavailability_Check", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/ResourceAavailability_CheckResponse")]
        System.Threading.Tasks.Task<string> ResourceAavailability_CheckAsync(string strFromDate, string strToDate, string strDoctorId, System.Data.DataTable dtItems);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SaveDiscountPerf", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveDiscountPerfResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/SaveDiscountPerfNextGenCustomExceptio" +
            "nFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        bool SaveDiscountPerf(string jsonStringForDisc, string jsonStringForVAT, long lngBillID, int intAuthorisedBy, string strReason, int intDiscountTypeID, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SaveDiscountPerf", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveDiscountPerfResponse")]
        System.Threading.Tasks.Task<bool> SaveDiscountPerfAsync(string jsonStringForDisc, string jsonStringForVAT, long lngBillID, int intAuthorisedBy, string strReason, int intDiscountTypeID, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetItemVATDetailsFromItemMasterOld", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetItemVATDetailsFromItemMasterOldRes" +
            "ponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/GetItemVATDetailsFromItemMasterOldNex" +
            "tGenCustomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet GetItemVATDetailsFromItemMasterOld(int itemId, int HospitalId, string BillDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetItemVATDetailsFromItemMasterOld", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetItemVATDetailsFromItemMasterOldRes" +
            "ponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetItemVATDetailsFromItemMasterOldAsync(int itemId, int HospitalId, string BillDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetMasterVATConfigOld", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetMasterVATConfigOldResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/GetMasterVATConfigOldNextGenCustomExc" +
            "eptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet GetMasterVATConfigOld(int PatientType, int HospitalId, int TaxType, string BillDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetMasterVATConfigOld", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetMasterVATConfigOldResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetMasterVATConfigOldAsync(int PatientType, int HospitalId, int TaxType, string BillDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchPrescriptionData", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchPrescriptionDataResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchPrescriptionDataNextGenCustomExc" +
            "eptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchPrescriptionData(int intIPID, int intUserid, int intWorkstationid);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchPrescriptionData", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchPrescriptionDataResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchPrescriptionDataAsync(int intIPID, int intUserid, int intWorkstationid);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchNoofWalkins", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchNoofWalkinsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchNoofWalkinsNextGenCustomExceptio" +
            "nFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchNoofWalkins(int intEmpCliccodeID, int intUserid, int intWorkstationid);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchNoofWalkins", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchNoofWalkinsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchNoofWalkinsAsync(int intEmpCliccodeID, int intUserid, int intWorkstationid);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchVisitoutcomelaststatus", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchVisitoutcomelaststatusResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchVisitoutcomelaststatusNextGenCus" +
            "tomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchVisitoutcomelaststatus(int PatientId, int Empcliniccodeid);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchVisitoutcomelaststatus", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchVisitoutcomelaststatusResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchVisitoutcomelaststatusAsync(int PatientId, int Empcliniccodeid);
        
        [System.ServiceModel.OperationContractAttribute(Action="SaveSchoolInfo", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveSchoolInfoResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/SaveSchoolInfoNextGenCustomExceptionF" +
            "ault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        string SaveSchoolInfo(int SchoolID, string SchoolName, string SchoolName2l, int SchoolTypeId, string SchoolAddress, string SchoolContactNumber, string Remarks, int UserId, int WorkStationId, int Error, bool Blocked);
        
        [System.ServiceModel.OperationContractAttribute(Action="SaveSchoolInfo", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveSchoolInfoResponse")]
        System.Threading.Tasks.Task<string> SaveSchoolInfoAsync(int SchoolID, string SchoolName, string SchoolName2l, int SchoolTypeId, string SchoolAddress, string SchoolContactNumber, string Remarks, int UserId, int WorkStationId, int Error, bool Blocked);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchSchool", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchSchoolResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchSchoolNextGenCustomExceptionFaul" +
            "t", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchSchool(int SchoolID);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchSchool", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchSchoolResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchSchoolAsync(int SchoolID);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchSSNYakeenVerify", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchSSNYakeenVerifyResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchSSNYakeenVerifyNextGenCustomExce" +
            "ptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchSSNYakeenVerify(string SSN);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchSSNYakeenVerify", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchSSNYakeenVerifyResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchSSNYakeenVerifyAsync(string SSN);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchSaveYakeenToken", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchSaveYakeenTokenResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchSaveYakeenTokenNextGenCustomExce" +
            "ptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchSaveYakeenToken(int UserID, int WorkStationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchSaveYakeenToken", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchSaveYakeenTokenResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchSaveYakeenTokenAsync(int UserID, int WorkStationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="SaveYakeenToken", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveYakeenTokenResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/SaveYakeenTokenNextGenCustomException" +
            "Fault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        string SaveYakeenToken(System.Data.DataSet dsJWTToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="SaveYakeenToken", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveYakeenTokenResponse")]
        System.Threading.Tasks.Task<string> SaveYakeenTokenAsync(System.Data.DataSet dsJWTToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchYakeenMasters", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchYakeenMastersResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchYakeenMastersNextGenCustomExcept" +
            "ionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchYakeenMasters(int YakeenNationalityId, string YakeenGenderCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchYakeenMasters", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchYakeenMastersResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchYakeenMastersAsync(int YakeenNationalityId, string YakeenGenderCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetHijriDate", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetHijriDateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/GetHijriDateNextGenCustomExceptionFau" +
            "lt", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        string GetHijriDate(string strFilter);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetHijriDate", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetHijriDateResponse")]
        System.Threading.Tasks.Task<string> GetHijriDateAsync(string strFilter);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchAllNationalities", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchAllNationalitiesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchAllNationalitiesNextGenCustomExc" +
            "eptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchAllNationalities(string Filter);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchAllNationalities", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchAllNationalitiesResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchAllNationalitiesAsync(string Filter);
        
        [System.ServiceModel.OperationContractAttribute(Action="UpdatePatientsYakeen", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/UpdatePatientsYakeenResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/UpdatePatientsYakeenNextGenCustomExce" +
            "ptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        bool UpdatePatientsYakeen(int PatientID, System.Data.DataSet dsPatientYakeen, int intUserId, int intWorkStationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="UpdatePatientsYakeen", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/UpdatePatientsYakeenResponse")]
        System.Threading.Tasks.Task<bool> UpdatePatientsYakeenAsync(int PatientID, System.Data.DataSet dsPatientYakeen, int intUserId, int intWorkStationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="InsertPatientsYakeen", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/InsertPatientsYakeenResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/InsertPatientsYakeenNextGenCustomExce" +
            "ptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        string InsertPatientsYakeen(System.Data.DataSet dsYakeenPatient);
        
        [System.ServiceModel.OperationContractAttribute(Action="InsertPatientsYakeen", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/InsertPatientsYakeenResponse")]
        System.Threading.Tasks.Task<string> InsertPatientsYakeenAsync(System.Data.DataSet dsYakeenPatient);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchPatientEMRVisits", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchPatientEMRVisitsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchPatientEMRVisitsNextGenCustomExc" +
            "eptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchPatientEMRVisits(int PatientID, int HospitalD);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchPatientEMRVisits", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchPatientEMRVisitsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchPatientEMRVisitsAsync(int PatientID, int HospitalD);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchRegHospitalConfiguration", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchRegHospitalConfigurationResponse" +
            "")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchRegHospitalConfigurationNextGenC" +
            "ustomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchRegHospitalConfiguration(int Type, int Result, int HospitalID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchRegHospitalConfiguration", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchRegHospitalConfigurationResponse" +
            "")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchRegHospitalConfigurationAsync(int Type, int Result, int HospitalID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/GetFOBillDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetFOBillDetailsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/GetFOBillDetailsNextGenCustomExceptio" +
            "nFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet GetFOBillDetails(string strSelect, string strFilter, string strOrder, int intUserId, int intWorkStId, int user, string PatientType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/GetFOBillDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetFOBillDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetFOBillDetailsAsync(string strSelect, string strFilter, string strOrder, int intUserId, int intWorkStId, int user, string PatientType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/GetScrollReportData", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetScrollReportDataResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/GetScrollReportDataNextGenCustomExcep" +
            "tionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet GetScrollReportData(int intScrollId, string strTbl, int intUserId, int intWorkStationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/GetScrollReportData", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetScrollReportDataResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetScrollReportDataAsync(int intScrollId, string strTbl, int intUserId, int intWorkStationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/GetHospScrollReportData", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetHospScrollReportDataResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/GetHospScrollReportDataNextGenCustomE" +
            "xceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet GetHospScrollReportData(int intScrollId, string strTbl, int intUserId, int intWorkStationId, int intLocationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/GetHospScrollReportData", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetHospScrollReportDataResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetHospScrollReportDataAsync(int intScrollId, string strTbl, int intUserId, int intWorkStationId, int intLocationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/GetSpecializationConfig", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetSpecializationConfigResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/GetSpecializationConfigNextGenCustomE" +
            "xceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet GetSpecializationConfig(int intType, int intResult, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/GetSpecializationConfig", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetSpecializationConfigResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetSpecializationConfigAsync(int intType, int intResult, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/EstimateBill", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/EstimateBillResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/EstimateBillNextGenCustomExceptionFau" +
            "lt", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet EstimateBill(System.Data.DataSet dsEstimate, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/EstimateBill", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/EstimateBillResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> EstimateBillAsync(System.Data.DataSet dsEstimate, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchPatientHistoryDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchPatientHistoryDetailsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchPatientHistoryDetailsNextGenCust" +
            "omExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchPatientHistoryDetails(string sSelect, string sFilter, string sOrder, int intUserID, int intWorkStationID, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchPatientHistoryDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchPatientHistoryDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchPatientHistoryDetailsAsync(string sSelect, string sFilter, string sOrder, int intUserID, int intWorkStationID, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchDiscountsConfig", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchDiscountsConfigResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchDiscountsConfigNextGenCustomExce" +
            "ptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchDiscountsConfig(int DiscountId, string strTableId, int FeatureId, int FunctionId, string CallContext, int UserId, int WstationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchDiscountsConfig", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchDiscountsConfigResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchDiscountsConfigAsync(int DiscountId, string strTableId, int FeatureId, int FunctionId, string CallContext, int UserId, int WstationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/GetDiscountsConfiglang", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetDiscountsConfiglangResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/GetDiscountsConfiglangNextGenCustomEx" +
            "ceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet GetDiscountsConfiglang(int DiscountId, string strTableId, int FeatureId, int FunctionId, string CallContext, int UserId, int WstationId, int intError, int intLanguageId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/GetDiscountsConfiglang", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetDiscountsConfiglangResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetDiscountsConfiglangAsync(int DiscountId, string strTableId, int FeatureId, int FunctionId, string CallContext, int UserId, int WstationId, int intError, int intLanguageId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/DisplayARApprovals", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/DisplayARApprovalsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/DisplayARApprovalsNextGenCustomExcept" +
            "ionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet DisplayARApprovals(int Type, string Filter, int UserID, int WorkStnID, int Error);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/DisplayARApprovals", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/DisplayARApprovalsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> DisplayARApprovalsAsync(int Type, string Filter, int UserID, int WorkStnID, int Error);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchBillDetailsAdv", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchBillDetailsAdvResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchBillDetailsAdvNextGenCustomExcep" +
            "tionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchBillDetailsAdv(int Type, string Filter, int intUserID, int intWorkStnId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchBillDetailsAdv", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchBillDetailsAdvResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchBillDetailsAdvAsync(int Type, string Filter, int intUserID, int intWorkStnId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchPackageStructure", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchPackageStructureResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchPackageStructureNextGenCustomExc" +
            "eptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchPackageStructure(int intPackageID, int intID, int intLevel, string strType, int intUserID, int intWorkStnId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchPackageStructure", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchPackageStructureResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchPackageStructureAsync(int intPackageID, int intID, int intLevel, string strType, int intUserID, int intWorkStnId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchPackageLOA", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchPackageLOAResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchPackageLOANextGenCustomException" +
            "Fault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchPackageLOA(int intType, string strFilter, int intUserID, int intWorkStationID, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchPackageLOA", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchPackageLOAResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchPackageLOAAsync(int intType, string strFilter, int intUserID, int intWorkStationID, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchHospitalPackageLOA", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchHospitalPackageLOAResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchHospitalPackageLOANextGenCustomE" +
            "xceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchHospitalPackageLOA(int intType, string strFilter, int intUserID, int intWorkStationID, int intError, int HospitalID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchHospitalPackageLOA", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchHospitalPackageLOAResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchHospitalPackageLOAAsync(int intType, string strFilter, int intUserID, int intWorkStationID, int intError, int HospitalID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchPinBlock", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchPinBlockResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchPinBlockNextGenCustomExceptionFa" +
            "ult", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchPinBlock(int intType, string strFilter, int intUserID, int intWorkStationID, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchPinBlock", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchPinBlockResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchPinBlockAsync(int intType, string strFilter, int intUserID, int intWorkStationID, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/GetOPPackagePrice", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetOPPackagePriceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/GetOPPackagePriceNextGenCustomExcepti" +
            "onFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet GetOPPackagePrice(int intPackageID, int intType, int iUserId, int iWstationId, int iError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/GetOPPackagePrice", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetOPPackagePriceResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetOPPackagePriceAsync(int intPackageID, int intType, int iUserId, int iWstationId, int iError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/UpdateAgreementData", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/UpdateAgreementDataResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/UpdateAgreementDataNextGenCustomExcep" +
            "tionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet UpdateAgreementData(System.Data.DataSet dsAggData, int intEligibleBedTypeID, int intGradeID, int PType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/UpdateAgreementData", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/UpdateAgreementDataResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> UpdateAgreementDataAsync(System.Data.DataSet dsAggData, int intEligibleBedTypeID, int intGradeID, int PType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchOPBillDetailsForMapping", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchOPBillDetailsForMappingResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchOPBillDetailsForMappingNextGenCu" +
            "stomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchOPBillDetailsForMapping(string strBillNo, string strTableId, int IntUserId, int intWorkStationId, int intError, int FeatureId, int FunctionId, string CallContext, int intLangID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchOPBillDetailsForMapping", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchOPBillDetailsForMappingResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchOPBillDetailsForMappingAsync(string strBillNo, string strTableId, int IntUserId, int intWorkStationId, int intError, int FeatureId, int FunctionId, string CallContext, int intLangID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchPatientClinicalConditions", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchPatientClinicalConditionsRespons" +
            "e")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchPatientClinicalConditionsNextGen" +
            "CustomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchPatientClinicalConditions(int intEpisodeID, int intUserId, int intWorkStationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchPatientClinicalConditions", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchPatientClinicalConditionsRespons" +
            "e")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchPatientClinicalConditionsAsync(int intEpisodeID, int intUserId, int intWorkStationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchEpisodeID_old", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchEpisodeID_oldResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchEpisodeID_oldNextGenCustomExcept" +
            "ionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        int FetchEpisodeID_old(string SFilter, int intUserId, int intWorkStationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchEpisodeID_old", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchEpisodeID_oldResponse")]
        System.Threading.Tasks.Task<int> FetchEpisodeID_oldAsync(string SFilter, int intUserId, int intWorkStationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchEpisodeID", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchEpisodeIDResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchEpisodeIDNextGenCustomExceptionF" +
            "ault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchEpisodeID(string SFilter, int intUserId, int intWorkStationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchEpisodeID", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchEpisodeIDResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchEpisodeIDAsync(string SFilter, int intUserId, int intWorkStationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchMaxCollectable", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchMaxCollectableResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchMaxCollectableNextGenCustomExcep" +
            "tionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        decimal FetchMaxCollectable(System.DateTime dtFromdate, System.DateTime dtToDate, int intPatientID, int intGradeID, int intCompanyID, int intSpecialisationID, int intLOAID, string strtbl, int intUserId, int intWorkStationId, int intError, int intFeatureId, int intFunctionId, string strCallContext);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchMaxCollectable", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchMaxCollectableResponse")]
        System.Threading.Tasks.Task<decimal> FetchMaxCollectableAsync(System.DateTime dtFromdate, System.DateTime dtToDate, int intPatientID, int intGradeID, int intCompanyID, int intSpecialisationID, int intLOAID, string strtbl, int intUserId, int intWorkStationId, int intError, int intFeatureId, int intFunctionId, string strCallContext);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchMaxCollectableForPharmacy", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchMaxCollectableForPharmacyRespons" +
            "e")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchMaxCollectableForPharmacyNextGen" +
            "CustomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchMaxCollectableForPharmacy(System.DateTime dtFromdate, System.DateTime dtToDate, int intPatientID, int intGradeID, int intCompanyID, int intSpecialisationID, int intLOAID, string strtbl, int intUserId, int intWorkStationId, int intError, int intFeatureId, int intFunctionId, string strCallContext);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchMaxCollectableForPharmacy", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchMaxCollectableForPharmacyRespons" +
            "e")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchMaxCollectableForPharmacyAsync(System.DateTime dtFromdate, System.DateTime dtToDate, int intPatientID, int intGradeID, int intCompanyID, int intSpecialisationID, int intLOAID, string strtbl, int intUserId, int intWorkStationId, int intError, int intFeatureId, int intFunctionId, string strCallContext);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchScheduledConsultations", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchScheduledConsultationsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchScheduledConsultationsNextGenCus" +
            "tomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchScheduledConsultations(int PatientId, int NoOFdays, int HospitalID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchScheduledConsultations", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchScheduledConsultationsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchScheduledConsultationsAsync(int PatientId, int NoOFdays, int HospitalID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchModuleArabizationStatus", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchModuleArabizationStatusResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchModuleArabizationStatusNextGenCu" +
            "stomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchModuleArabizationStatus(int ModuleId, int Table, int UserId, int WorkStationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchModuleArabizationStatus", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchModuleArabizationStatusResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchModuleArabizationStatusAsync(int ModuleId, int Table, int UserId, int WorkStationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/WSCheckFollowUpLimit", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/WSCheckFollowUpLimitResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/WSCheckFollowUpLimitNextGenCustomExce" +
            "ptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        bool WSCheckFollowUpLimit(int ServiceID, int SpecialiseID, int OrderTypeID, int PatientID, int UserID, int WorkStationID, int Error);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/WSCheckFollowUpLimit", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/WSCheckFollowUpLimitResponse")]
        System.Threading.Tasks.Task<bool> WSCheckFollowUpLimitAsync(int ServiceID, int SpecialiseID, int OrderTypeID, int PatientID, int UserID, int WorkStationID, int Error);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/GetBillPrintDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetBillPrintDetailsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/GetBillPrintDetailsNextGenCustomExcep" +
            "tionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet GetBillPrintDetails(string strBillID, string strBillNo, int IntUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/GetBillPrintDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetBillPrintDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetBillPrintDetailsAsync(string strBillID, string strBillNo, int IntUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/GetGradeDoctorSpecializationWS", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetGradeDoctorSpecializationWSRespons" +
            "e")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/GetGradeDoctorSpecializationWSNextGen" +
            "CustomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet GetGradeDoctorSpecializationWS(int PatientId, int DoctorId, int SpecializationId, int ServiceId, string Table, int UserId, int WorkstationId, int Error);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/GetGradeDoctorSpecializationWS", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetGradeDoctorSpecializationWSRespons" +
            "e")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetGradeDoctorSpecializationWSAsync(int PatientId, int DoctorId, int SpecializationId, int ServiceId, string Table, int UserId, int WorkstationId, int Error);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchBillDetailsforPrinting", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchBillDetailsforPrintingResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchBillDetailsforPrintingNextGenCus" +
            "tomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchBillDetailsforPrinting(string strBillNo, int IntUserId, int intWorkStationId, int intError, int LangID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchBillDetailsforPrinting", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchBillDetailsforPrintingResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchBillDetailsforPrintingAsync(string strBillNo, int IntUserId, int intWorkStationId, int intError, int LangID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/GetDiscBillDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetDiscBillDetailsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/GetDiscBillDetailsNextGenCustomExcept" +
            "ionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet GetDiscBillDetails(long lngBillID, string strBillNo, long lngIPID, int intPatientType, int intTableID, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/GetDiscBillDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetDiscBillDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetDiscBillDetailsAsync(long lngBillID, string strBillNo, long lngIPID, int intPatientType, int intTableID, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/GetDiscBillDetailsTagID", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetDiscBillDetailsTagIDResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/GetDiscBillDetailsTagIDNextGenCustomE" +
            "xceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet GetDiscBillDetailsTagID(long lngBillID, string strBillNo, long lngIPID, int intPatientType, int intTableID, int intUserId, int intWorkStationId, int intError, int tagid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/GetDiscBillDetailsTagID", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetDiscBillDetailsTagIDResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetDiscBillDetailsTagIDAsync(long lngBillID, string strBillNo, long lngIPID, int intPatientType, int intTableID, int intUserId, int intWorkStationId, int intError, int tagid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/GetTableDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetTableDetailsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/GetTableDetailsNextGenCustomException" +
            "Fault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet GetTableDetails(string strTableName, string strColName, string strParam);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/GetTableDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetTableDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetTableDetailsAsync(string strTableName, string strColName, string strParam);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchConsultationConfig", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchConsultationConfigResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchConsultationConfigNextGenCustomE" +
            "xceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchConsultationConfig(int DocID, int HospitalID, string TBL, int UserID, int WorkstationID, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchConsultationConfig", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchConsultationConfigResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchConsultationConfigAsync(int DocID, int HospitalID, string TBL, int UserID, int WorkstationID, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchMaxDaywiseAppointments", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchMaxDaywiseAppointmentsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchMaxDaywiseAppointmentsNextGenCus" +
            "tomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchMaxDaywiseAppointments(int DocID, int HospitalID, string TBL, int UserId, int WstationId, int intError, System.DateTime Appointmentdate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchMaxDaywiseAppointments", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchMaxDaywiseAppointmentsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchMaxDaywiseAppointmentsAsync(int DocID, int HospitalID, string TBL, int UserId, int WstationId, int intError, System.DateTime Appointmentdate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchConsultations_Perf", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchConsultations_PerfResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchConsultations_PerfNextGenCustomE" +
            "xceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchConsultations_Perf(int intTableId, string strFilter, int intUserId, int intWorkStationId, int intError, int LangID, int DoctorID, System.DateTime OrderDate, int hospitalID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchConsultations_Perf", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchConsultations_PerfResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchConsultations_PerfAsync(int intTableId, string strFilter, int intUserId, int intWorkStationId, int intError, int LangID, int DoctorID, System.DateTime OrderDate, int hospitalID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SaveBill", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveBillResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/SaveBillNextGenCustomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        string SaveBill(System.Data.DataSet dsBill, string BillPrefix, string ParentBillId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SaveBill", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveBillResponse")]
        System.Threading.Tasks.Task<string> SaveBillAsync(System.Data.DataSet dsBill, string BillPrefix, string ParentBillId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/UpdatePatientDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/UpdatePatientDetailsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/UpdatePatientDetailsNextGenCustomExce" +
            "ptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        int UpdatePatientDetails(System.Data.DataSet ds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/UpdatePatientDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/UpdatePatientDetailsResponse")]
        System.Threading.Tasks.Task<int> UpdatePatientDetailsAsync(System.Data.DataSet ds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SaveDeposit", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveDepositResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/SaveDepositNextGenCustomExceptionFaul" +
            "t", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        string SaveDeposit(System.Data.DataSet dsDeposit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SaveDeposit", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveDepositResponse")]
        System.Threading.Tasks.Task<string> SaveDepositAsync(System.Data.DataSet dsDeposit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SaveReceipt", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveReceiptResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/SaveReceiptNextGenCustomExceptionFaul" +
            "t", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        string SaveReceipt(System.Data.DataSet dsReceipt);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SaveReceipt", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveReceiptResponse")]
        System.Threading.Tasks.Task<string> SaveReceiptAsync(System.Data.DataSet dsReceipt);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/CancelBill", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/CancelBillResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/CancelBillNextGenCustomExceptionFault" +
            "", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        bool CancelBill(System.Data.DataSet dsBillDetails);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/CancelBill", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/CancelBillResponse")]
        System.Threading.Tasks.Task<bool> CancelBillAsync(System.Data.DataSet dsBillDetails);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SaveDiscount", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveDiscountResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/SaveDiscountNextGenCustomExceptionFau" +
            "lt", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        bool SaveDiscount(System.Data.DataSet dsDiscount, long lngBillID, int intAuthorisedBy, string strReason, int intDiscountTypeID, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SaveDiscount", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveDiscountResponse")]
        System.Threading.Tasks.Task<bool> SaveDiscountAsync(System.Data.DataSet dsDiscount, long lngBillID, int intAuthorisedBy, string strReason, int intDiscountTypeID, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SaveRegConfiguration", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveRegConfigurationResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/SaveRegConfigurationNextGenCustomExce" +
            "ptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        bool SaveRegConfiguration(System.Data.DataSet dsConfig, int intUserId, int intWorkStationId, int intError, int Hospitalid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SaveRegConfiguration", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveRegConfigurationResponse")]
        System.Threading.Tasks.Task<bool> SaveRegConfigurationAsync(System.Data.DataSet dsConfig, int intUserId, int intWorkStationId, int intError, int Hospitalid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SaveUHIDmerging", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveUHIDmergingResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/SaveUHIDmergingNextGenCustomException" +
            "Fault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        bool SaveUHIDmerging(int ParentID, System.Data.DataSet dsChild, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SaveUHIDmerging", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveUHIDmergingResponse")]
        System.Threading.Tasks.Task<bool> SaveUHIDmergingAsync(int ParentID, System.Data.DataSet dsChild, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SaveScrollReport", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveScrollReportResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/SaveScrollReportNextGenCustomExceptio" +
            "nFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        string SaveScrollReport(System.Data.DataSet dsScroll, int intScrollModuleId, int ScrollUserId, int intUserId, int intWorkStationId, int intRoutID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SaveScrollReport", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveScrollReportResponse")]
        System.Threading.Tasks.Task<string> SaveScrollReportAsync(System.Data.DataSet dsScroll, int intScrollModuleId, int ScrollUserId, int intUserId, int intWorkStationId, int intRoutID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/UpdateDeposit", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/UpdateDepositResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/UpdateDepositNextGenCustomExceptionFa" +
            "ult", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        int UpdateDeposit(int EntryID, int BlockId, decimal Amount, int intUserID, int intWorkStationID, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/UpdateDeposit", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/UpdateDepositResponse")]
        System.Threading.Tasks.Task<int> UpdateDepositAsync(int EntryID, int BlockId, decimal Amount, int intUserID, int intWorkStationID, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/UpdateDepositIPID", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/UpdateDepositIPIDResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/UpdateDepositIPIDNextGenCustomExcepti" +
            "onFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        int UpdateDepositIPID(int EntryID, int BlockId, decimal Amount, int intUserID, int intWorkStationID, int intError, int intIPID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/UpdateDepositIPID", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/UpdateDepositIPIDResponse")]
        System.Threading.Tasks.Task<int> UpdateDepositIPIDAsync(int EntryID, int BlockId, decimal Amount, int intUserID, int intWorkStationID, int intError, int intIPID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/UpdateBillPrintStatus", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/UpdateBillPrintStatusResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/UpdateBillPrintStatusNextGenCustomExc" +
            "eptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        int UpdateBillPrintStatus(string BillID, bool IsPrint, int intUserID, int intWorkStationID, int intError, int FeatureId, int FunctionId, string CallContext);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/UpdateBillPrintStatus", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/UpdateBillPrintStatusResponse")]
        System.Threading.Tasks.Task<int> UpdateBillPrintStatusAsync(string BillID, bool IsPrint, int intUserID, int intWorkStationID, int intError, int FeatureId, int FunctionId, string CallContext);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/IsItemSlotConfigured", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/IsItemSlotConfiguredResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/IsItemSlotConfiguredNextGenCustomExce" +
            "ptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        bool IsItemSlotConfigured(int ServiceID, int ServiceItemID, int TableID, int UserID, int WorkStationID, int Error, int Hospitalid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/IsItemSlotConfigured", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/IsItemSlotConfiguredResponse")]
        System.Threading.Tasks.Task<bool> IsItemSlotConfiguredAsync(int ServiceID, int ServiceItemID, int TableID, int UserID, int WorkStationID, int Error, int Hospitalid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchLOAonEMPID", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetLOAonEMPIDResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/GetLOAonEMPIDNextGenCustomExceptionFa" +
            "ult", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet GetLOAonEMPID(int intPatientID, string strEmpID, int intCompanyID, int intDoctorID, int intUserID, int intWorkStationID, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchLOAonEMPID", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetLOAonEMPIDResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetLOAonEMPIDAsync(int intPatientID, string strEmpID, int intCompanyID, int intDoctorID, int intUserID, int intWorkStationID, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/DeleteDiscount", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/DeleteDiscountResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/DeleteDiscountNextGenCustomExceptionF" +
            "ault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        bool DeleteDiscount(int DisID, int BillID, int intAuthorisedBy, string strReason, int intUserId, int intWorkStationId, int intError, double amt, int type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/DeleteDiscount", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/DeleteDiscountResponse")]
        System.Threading.Tasks.Task<bool> DeleteDiscountAsync(int DisID, int BillID, int intAuthorisedBy, string strReason, int intUserId, int intWorkStationId, int intError, double amt, int type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/DeleteDiscountNew", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/DeleteDiscountNewResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/DeleteDiscountNewNextGenCustomExcepti" +
            "onFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        bool DeleteDiscountNew(string jsonStringForVAT, int DisID, int BillID, int intAuthorisedBy, string strReason, int intUserId, int intWorkStationId, int intError, double amt, int type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/DeleteDiscountNew", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/DeleteDiscountNewResponse")]
        System.Threading.Tasks.Task<bool> DeleteDiscountNewAsync(string jsonStringForVAT, int DisID, int BillID, int intAuthorisedBy, string strReason, int intUserId, int intWorkStationId, int intError, double amt, int type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/ModifyPayerPatientList", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/ModifyPayerPatientListResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/ModifyPayerPatientListNextGenCustomEx" +
            "ceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        string ModifyPayerPatientList(System.Data.DataSet dsPatient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/ModifyPayerPatientList", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/ModifyPayerPatientListResponse")]
        System.Threading.Tasks.Task<string> ModifyPayerPatientListAsync(System.Data.DataSet dsPatient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SavePayerPatientList", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SavePayerPatientListResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/SavePayerPatientListNextGenCustomExce" +
            "ptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        string SavePayerPatientList(System.Data.DataSet dsPatient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SavePayerPatientList", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SavePayerPatientListResponse")]
        System.Threading.Tasks.Task<string> SavePayerPatientListAsync(System.Data.DataSet dsPatient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchPayerPatientList", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchPayerPatientListResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchPayerPatientListNextGenCustomExc" +
            "eptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchPayerPatientList(string strPatId, bool BlnDeleted, int intUserId, int intWorkStnId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchPayerPatientList", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchPayerPatientListResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchPayerPatientListAsync(string strPatId, bool BlnDeleted, int intUserId, int intWorkStnId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchPayerPatientListTagID", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchPayerPatientListTagIDResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchPayerPatientListTagIDNextGenCust" +
            "omExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchPayerPatientListTagID(string strPatId, bool BlnDeleted, int intUserId, int intWorkStnId, int intError, int tagId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchPayerPatientListTagID", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchPayerPatientListTagIDResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchPayerPatientListTagIDAsync(string strPatId, bool BlnDeleted, int intUserId, int intWorkStnId, int intError, int tagId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/CheckEmpId", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/CheckEmpIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/CheckEmpIdNextGenCustomExceptionFault" +
            "", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        int CheckEmpId(string EmpId, int CompanyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/CheckEmpId", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/CheckEmpIdResponse")]
        System.Threading.Tasks.Task<int> CheckEmpIdAsync(string EmpId, int CompanyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SaveConsultationConfig", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveConsultationConfigResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/SaveConsultationConfigNextGenCustomEx" +
            "ceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        bool SaveConsultationConfig(int DocID, int HospitalID, System.Data.DataSet dsConsultationConfig, int UserID, int WorkstationID, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SaveConsultationConfig", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveConsultationConfigResponse")]
        System.Threading.Tasks.Task<bool> SaveConsultationConfigAsync(int DocID, int HospitalID, System.Data.DataSet dsConsultationConfig, int UserID, int WorkstationID, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SavePatient", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SavePatientResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/SavePatientNextGenCustomExceptionFaul" +
            "t", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        string SavePatient(System.Data.DataSet dsPatient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SavePatient", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SavePatientResponse")]
        System.Threading.Tasks.Task<string> SavePatientAsync(System.Data.DataSet dsPatient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SavePrePatient", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SavePrePatientResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/SavePrePatientNextGenCustomExceptionF" +
            "ault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        string SavePrePatient(System.Data.DataSet dsPatient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SavePrePatient", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SavePrePatientResponse")]
        System.Threading.Tasks.Task<string> SavePrePatientAsync(System.Data.DataSet dsPatient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/UpdatePatient", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/UpdatePatientResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/UpdatePatientNextGenCustomExceptionFa" +
            "ult", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        string UpdatePatient(System.Data.DataSet dsPatient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/UpdatePatient", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/UpdatePatientResponse")]
        System.Threading.Tasks.Task<string> UpdatePatientAsync(System.Data.DataSet dsPatient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SaveModifyInpatients", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveModifyInpatientsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/SaveModifyInpatientsNextGenCustomExce" +
            "ptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        string SaveModifyInpatients(bool blnFlag, System.Data.DataSet objDS, int intUserID, int intWorkStationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SaveModifyInpatients", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveModifyInpatientsResponse")]
        System.Threading.Tasks.Task<string> SaveModifyInpatientsAsync(bool blnFlag, System.Data.DataSet objDS, int intUserID, int intWorkStationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="SetBillDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SetBillDetailsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/SetBillDetailsNextGenCustomExceptionF" +
            "ault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet SetBillDetails(System.Data.DataSet dsBillDetails, int IntUserId, int intWorkStationId, int intError, int LangID);
        
        [System.ServiceModel.OperationContractAttribute(Action="SetBillDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SetBillDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> SetBillDetailsAsync(System.Data.DataSet dsBillDetails, int IntUserId, int intWorkStationId, int intError, int LangID);
        
        [System.ServiceModel.OperationContractAttribute(Action="SetBillDetailsValue", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SetBillDetailsNewResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/SetBillDetailsNewNextGenCustomExcepti" +
            "onFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        Reports.FrontOfficeServiceClient.SetBillDetailsNewResponse SetBillDetailsNew(Reports.FrontOfficeServiceClient.SetBillDetailsNewRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="SetBillDetailsValue", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SetBillDetailsNewResponse")]
        System.Threading.Tasks.Task<Reports.FrontOfficeServiceClient.SetBillDetailsNewResponse> SetBillDetailsNewAsync(Reports.FrontOfficeServiceClient.SetBillDetailsNewRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="ProcessBillDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/ProcessBillDetailsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/ProcessBillDetailsNextGenCustomExcept" +
            "ionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet ProcessBillDetails(System.Data.DataSet DsCreditBillDetails, int BillType, int Priority, System.Data.DataSet dsOrderAndProfile, string strFilterDeposit, int IntUserId, int intWorkStationId, int intTransType);
        
        [System.ServiceModel.OperationContractAttribute(Action="ProcessBillDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/ProcessBillDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> ProcessBillDetailsAsync(System.Data.DataSet DsCreditBillDetails, int BillType, int Priority, System.Data.DataSet dsOrderAndProfile, string strFilterDeposit, int IntUserId, int intWorkStationId, int intTransType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SaveTempBillDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveTempBillDetailsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/SaveTempBillDetailsNextGenCustomExcep" +
            "tionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        int SaveTempBillDetails(System.Data.DataSet dtTempBillDetails, string strSessionId, string strAdmissionUHID, int intPatientType, int intBillType, int intPatienId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SaveTempBillDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveTempBillDetailsResponse")]
        System.Threading.Tasks.Task<int> SaveTempBillDetailsAsync(System.Data.DataSet dtTempBillDetails, string strSessionId, string strAdmissionUHID, int intPatientType, int intBillType, int intPatienId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SaveIPTempBillDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveIPTempBillDetailsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/SaveIPTempBillDetailsNextGenCustomExc" +
            "eptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        int SaveIPTempBillDetails(System.Data.DataSet dtTempBillDetails, string strSessionId, string strAdmissionUHID, int intPatientType, int intBillType, int intPatienId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SaveIPTempBillDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveIPTempBillDetailsResponse")]
        System.Threading.Tasks.Task<int> SaveIPTempBillDetailsAsync(System.Data.DataSet dtTempBillDetails, string strSessionId, string strAdmissionUHID, int intPatientType, int intBillType, int intPatienId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SaveTempBillDetailsForOP", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveTempBillDetailsForOPResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/SaveTempBillDetailsForOPNextGenCustom" +
            "ExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        int SaveTempBillDetailsForOP(System.Data.DataSet dtTempBillDetails, string strSessionId, string strAdmissionUHID, int intPatientType, int intBillType, int intPatienId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SaveTempBillDetailsForOP", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveTempBillDetailsForOPResponse")]
        System.Threading.Tasks.Task<int> SaveTempBillDetailsForOPAsync(System.Data.DataSet dtTempBillDetails, string strSessionId, string strAdmissionUHID, int intPatientType, int intBillType, int intPatienId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/GetBillDetailsWithCardorCash", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetBillDetailsWithCardorCashResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/GetBillDetailsWithCardorCashNextGenCu" +
            "stomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet GetBillDetailsWithCardorCash(string strBillId, string strTableID, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/GetBillDetailsWithCardorCash", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetBillDetailsWithCardorCashResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetBillDetailsWithCardorCashAsync(string strBillId, string strTableID, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/GetBedRentals", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetBedRentalsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/GetBedRentalsNextGenCustomExceptionFa" +
            "ult", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet GetBedRentals();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/GetBedRentals", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetBedRentalsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetBedRentalsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/GetTempBillDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetTempBillDetailsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/GetTempBillDetailsNextGenCustomExcept" +
            "ionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet GetTempBillDetails(System.Data.DataTable dtBreakUpRequisition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/GetTempBillDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetTempBillDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetTempBillDetailsAsync(System.Data.DataTable dtBreakUpRequisition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SaveTempLOAContribution", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveTempLOAContributionResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/SaveTempLOAContributionNextGenCustomE" +
            "xceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        int SaveTempLOAContribution(System.Data.DataTable dtLOAContribution, string strSessionId, string strAdmissionUHID, int intPatientType, int intBillType, int intPatienId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SaveTempLOAContribution", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveTempLOAContributionResponse")]
        System.Threading.Tasks.Task<int> SaveTempLOAContributionAsync(System.Data.DataTable dtLOAContribution, string strSessionId, string strAdmissionUHID, int intPatientType, int intBillType, int intPatienId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SaveDoctorAvaliable", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveDoctorAvaliableResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/SaveDoctorAvaliableNextGenCustomExcep" +
            "tionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        int SaveDoctorAvaliable(System.Data.DataSet objDSSave);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SaveDoctorAvaliable", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveDoctorAvaliableResponse")]
        System.Threading.Tasks.Task<int> SaveDoctorAvaliableAsync(System.Data.DataSet objDSSave);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/CheckNationalID", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/CheckNationalIDResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/CheckNationalIDNextGenCustomException" +
            "Fault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        string CheckNationalID(string NationalId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/CheckNationalID", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/CheckNationalIDResponse")]
        System.Threading.Tasks.Task<string> CheckNationalIDAsync(string NationalId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/ValidateResourceSlots", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/ValidateResourceSlotsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/ValidateResourceSlotsNextGenCustomExc" +
            "eptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet ValidateResourceSlots(int DoctorID, System.DateTime Fromdate, System.DateTime Todate, int IntUserId, int intWorkStationId, int error);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/ValidateResourceSlots", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/ValidateResourceSlotsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> ValidateResourceSlotsAsync(int DoctorID, System.DateTime Fromdate, System.DateTime Todate, int IntUserId, int intWorkStationId, int error);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/ValidateResourceSlotsAvail", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/ValidateResourceSlotsAvailResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/ValidateResourceSlotsAvailNextGenCust" +
            "omExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet ValidateResourceSlotsAvail(int DoctorID, System.DateTime Fromdate, int HospitalID, int FeatureId, int FunctionId, string CallContext);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/ValidateResourceSlotsAvail", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/ValidateResourceSlotsAvailResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> ValidateResourceSlotsAvailAsync(int DoctorID, System.DateTime Fromdate, int HospitalID, int FeatureId, int FunctionId, string CallContext);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SaveCheckInBillType", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveCheckInBillTypeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/SaveCheckInBillTypeNextGenCustomExcep" +
            "tionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        string SaveCheckInBillType(
                    System.Data.DataSet dsChekIn, 
                    int AdmissionID, 
                    int PatientID, 
                    int HospitalID, 
                    int Investigation, 
                    int IpOpProcedures, 
                    int Pharmacy, 
                    int VisitID, 
                    int VisitType, 
                    int DoctorID, 
                    bool ISExternal, 
                    int EpisodeID, 
                    int RefDoctorID, 
                    int intFeatureId, 
                    int intFunctionId, 
                    string strCallContext, 
                    bool CheckIn, 
                    int intUserId, 
                    int intWorkStationId, 
                    int intError, 
                    System.Data.DataSet Diseasecode, 
                    int ActiveInsID, 
                    byte IsCollectablebyEmployer, 
                    byte IsDeductablebyEmployer, 
                    byte IsSupplimentarybyEmployer, 
                    byte IsExcessbyEmployer, 
                    int IsNewCheckin, 
                    int SpecialisationID, 
                    int PatientType, 
                    int BillType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SaveCheckInBillType", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveCheckInBillTypeResponse")]
        System.Threading.Tasks.Task<string> SaveCheckInBillTypeAsync(
                    System.Data.DataSet dsChekIn, 
                    int AdmissionID, 
                    int PatientID, 
                    int HospitalID, 
                    int Investigation, 
                    int IpOpProcedures, 
                    int Pharmacy, 
                    int VisitID, 
                    int VisitType, 
                    int DoctorID, 
                    bool ISExternal, 
                    int EpisodeID, 
                    int RefDoctorID, 
                    int intFeatureId, 
                    int intFunctionId, 
                    string strCallContext, 
                    bool CheckIn, 
                    int intUserId, 
                    int intWorkStationId, 
                    int intError, 
                    System.Data.DataSet Diseasecode, 
                    int ActiveInsID, 
                    byte IsCollectablebyEmployer, 
                    byte IsDeductablebyEmployer, 
                    byte IsSupplimentarybyEmployer, 
                    byte IsExcessbyEmployer, 
                    int IsNewCheckin, 
                    int SpecialisationID, 
                    int PatientType, 
                    int BillType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SaveCheckInBillTypeMODA", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveCheckInBillTypeMODAResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/SaveCheckInBillTypeMODANextGenCustomE" +
            "xceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        string SaveCheckInBillTypeMODA(
                    System.Data.DataSet dsChekIn, 
                    int AdmissionID, 
                    int PatientID, 
                    int HospitalID, 
                    int Investigation, 
                    int IpOpProcedures, 
                    int Pharmacy, 
                    int VisitID, 
                    int VisitType, 
                    int DoctorID, 
                    bool ISExternal, 
                    int EpisodeID, 
                    int RefDoctorID, 
                    int intFeatureId, 
                    int intFunctionId, 
                    string strCallContext, 
                    bool CheckIn, 
                    int intUserId, 
                    int intWorkStationId, 
                    int intError, 
                    System.Data.DataSet Diseasecode, 
                    int ActiveInsID, 
                    byte IsCollectablebyEmployer, 
                    byte IsDeductablebyEmployer, 
                    byte IsSupplimentarybyEmployer, 
                    byte IsExcessbyEmployer, 
                    int IsNewCheckin, 
                    int SpecialisationID, 
                    int PatientType, 
                    int BillType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SaveCheckInBillTypeMODA", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveCheckInBillTypeMODAResponse")]
        System.Threading.Tasks.Task<string> SaveCheckInBillTypeMODAAsync(
                    System.Data.DataSet dsChekIn, 
                    int AdmissionID, 
                    int PatientID, 
                    int HospitalID, 
                    int Investigation, 
                    int IpOpProcedures, 
                    int Pharmacy, 
                    int VisitID, 
                    int VisitType, 
                    int DoctorID, 
                    bool ISExternal, 
                    int EpisodeID, 
                    int RefDoctorID, 
                    int intFeatureId, 
                    int intFunctionId, 
                    string strCallContext, 
                    bool CheckIn, 
                    int intUserId, 
                    int intWorkStationId, 
                    int intError, 
                    System.Data.DataSet Diseasecode, 
                    int ActiveInsID, 
                    byte IsCollectablebyEmployer, 
                    byte IsDeductablebyEmployer, 
                    byte IsSupplimentarybyEmployer, 
                    byte IsExcessbyEmployer, 
                    int IsNewCheckin, 
                    int SpecialisationID, 
                    int PatientType, 
                    int BillType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/GetAllCheckInDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetAllCheckInDetailsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/GetAllCheckInDetailsNextGenCustomExce" +
            "ptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet GetAllCheckInDetails(int IPID, int PackageId, string TableId, int intUserID, int intWorkStationID, int intError, int HospitalID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/GetAllCheckInDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetAllCheckInDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetAllCheckInDetailsAsync(int IPID, int PackageId, string TableId, int intUserID, int intWorkStationID, int intError, int HospitalID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/CancelCheckin", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/CancelCheckinResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/CancelCheckinNextGenCustomExceptionFa" +
            "ult", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        int CancelCheckin(int IPID, int PatientID, int UserID, int WorkStationID, int FeatureID, int FunctionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/CancelCheckin", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/CancelCheckinResponse")]
        System.Threading.Tasks.Task<int> CancelCheckinAsync(int IPID, int PatientID, int UserID, int WorkStationID, int FeatureID, int FunctionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/GetPackages", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetPackagesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/GetPackagesNextGenCustomExceptionFaul" +
            "t", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet GetPackages(string REGCODE, string Tbl, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/GetPackages", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetPackagesResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetPackagesAsync(string REGCODE, string Tbl, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/GetFetchRecallNewOrder", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetFetchRecallNewOrderResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/GetFetchRecallNewOrderNextGenCustomEx" +
            "ceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet GetFetchRecallNewOrder(int Pid, int intUserID, int intFeatureID, int HospitalID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/GetFetchRecallNewOrder", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetFetchRecallNewOrderResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetFetchRecallNewOrderAsync(int Pid, int intUserID, int intFeatureID, int HospitalID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/GetApprovalStatus", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetApprovalStatusResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/GetApprovalStatusNextGenCustomExcepti" +
            "onFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet GetApprovalStatus(System.Data.DataSet dsApproval);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/GetApprovalStatus", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetApprovalStatusResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetApprovalStatusAsync(System.Data.DataSet dsApproval);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchSurgeryConfigurations", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchSurgeryConfigurationsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchSurgeryConfigurationsNextGenCust" +
            "omExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchSurgeryConfigurations();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchSurgeryConfigurations", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchSurgeryConfigurationsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchSurgeryConfigurationsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchADVProcedureDetailsLangIDADV", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchADVProcedureDetailsLangIDADVResp" +
            "onse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchADVProcedureDetailsLangIDADVNext" +
            "GenCustomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchADVProcedureDetailsLangIDADV(int min, int max, string ProcedureName, string Type, string Filter, int UserId, int WstationId, int intError, int intLanguageID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchADVProcedureDetailsLangIDADV", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchADVProcedureDetailsLangIDADVResp" +
            "onse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchADVProcedureDetailsLangIDADVAsync(int min, int max, string ProcedureName, string Type, string Filter, int UserId, int WstationId, int intError, int intLanguageID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/GetADVProcedureDetailsHospitalADV", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchProcedureHospitalDetailsADVRespo" +
            "nse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchProcedureHospitalDetailsADVNextG" +
            "enCustomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchProcedureHospitalDetailsADV(int min, int max, string ProcedureName, string Type, string Filter, int UserId, int WstationId, int intError, int intLanguageID, int intHospitalID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/GetADVProcedureDetailsHospitalADV", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchProcedureHospitalDetailsADVRespo" +
            "nse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchProcedureHospitalDetailsADVAsync(int min, int max, string ProcedureName, string Type, string Filter, int UserId, int WstationId, int intError, int intLanguageID, int intHospitalID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/GetRegistrationFee", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetRegistrationFeeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/GetRegistrationFeeNextGenCustomExcept" +
            "ionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet GetRegistrationFee(int intPatientId, int intTable, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/GetRegistrationFee", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetRegistrationFeeResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetRegistrationFeeAsync(int intPatientId, int intTable, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/GetPriceTarifDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetPriceTarifDetailsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/GetPriceTarifDetailsNextGenCustomExce" +
            "ptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet GetPriceTarifDetails(int GradeID, int Receiverid, int Payerid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/GetPriceTarifDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetPriceTarifDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetPriceTarifDetailsAsync(int GradeID, int Receiverid, int Payerid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/GetCheckinDetailForBill", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetCheckinDetailForBillResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/GetCheckinDetailForBillNextGenCustomE" +
            "xceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet GetCheckinDetailForBill(int IPID, int PackageId, string TableId, int intUserID, int intWorkStationID, int intError, int intHospitalid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/GetCheckinDetailForBill", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetCheckinDetailForBillResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetCheckinDetailForBillAsync(int IPID, int PackageId, string TableId, int intUserID, int intWorkStationID, int intError, int intHospitalid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/GetCheckinIssues", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetCheckinIssuesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/GetCheckinIssuesNextGenCustomExceptio" +
            "nFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet GetCheckinIssues(long lngIPID, int intDefTariffID, int intTariffID, int intEBedType, int intLoacationID, string strDischargeDateTime, int intServiceID, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/GetCheckinIssues", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetCheckinIssuesResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetCheckinIssuesAsync(long lngIPID, int intDefTariffID, int intTariffID, int intEBedType, int intLoacationID, string strDischargeDateTime, int intServiceID, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/GetOnlineAppointDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetOnlineAppointDetailsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/GetOnlineAppointDetailsNextGenCustomE" +
            "xceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet GetOnlineAppointDetails(string ProcedureName, string Filter, int UserId, int WstationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/GetOnlineAppointDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetOnlineAppointDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetOnlineAppointDetailsAsync(string ProcedureName, string Filter, int UserId, int WstationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/GetSchedulerConfigOfResources", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetSchedulerConfigOfResourcesResponse" +
            "")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/GetSchedulerConfigOfResourcesNextGenC" +
            "ustomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet GetSchedulerConfigOfResources(string Filter, int intUserID, int intWorkStationID, int intError, string strOrder, int HospitalID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/GetSchedulerConfigOfResources", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetSchedulerConfigOfResourcesResponse" +
            "")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetSchedulerConfigOfResourcesAsync(string Filter, int intUserID, int intWorkStationID, int intError, string strOrder, int HospitalID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SaveOnlineAppointDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveOnlineAppointDetailsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/SaveOnlineAppointDetailsNextGenCustom" +
            "ExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        bool SaveOnlineAppointDetails(string Filter, int UserId, int WstationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SaveOnlineAppointDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveOnlineAppointDetailsResponse")]
        System.Threading.Tasks.Task<bool> SaveOnlineAppointDetailsAsync(string Filter, int UserId, int WstationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/DeclineAppointments", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/DeclineAppointmentsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/DeclineAppointmentsNextGenCustomExcep" +
            "tionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        bool DeclineAppointments(string strRequestID, int UserId, int WstationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/DeclineAppointments", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/DeclineAppointmentsResponse")]
        System.Threading.Tasks.Task<bool> DeclineAppointmentsAsync(string strRequestID, int UserId, int WstationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/GetPatientDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetPatientDetailsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/GetPatientDetailsNextGenCustomExcepti" +
            "onFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet GetPatientDetails(string ProcedureName, string Type, string Filter, int UserId, int WstationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/GetPatientDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetPatientDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetPatientDetailsAsync(string ProcedureName, string Type, string Filter, int UserId, int WstationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/GetServiceItems", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetServiceItemsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/GetServiceItemsNextGenCustomException" +
            "Fault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        string GetServiceItems(int serviceitemid, int hospitalid, int langid, int UserId, int WstationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/GetServiceItems", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetServiceItemsResponse")]
        System.Threading.Tasks.Task<string> GetServiceItemsAsync(int serviceitemid, int hospitalid, int langid, int UserId, int WstationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/GetServiceItemsByServiceId", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetServiceItemsByServiceIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/GetServiceItemsByServiceIdNextGenCust" +
            "omExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        string GetServiceItemsByServiceId(int serviceitemid, int hospitalid, int langid, int UserId, int WstationId, int intError, int ServiceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/GetServiceItemsByServiceId", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetServiceItemsByServiceIdResponse")]
        System.Threading.Tasks.Task<string> GetServiceItemsByServiceIdAsync(int serviceitemid, int hospitalid, int langid, int UserId, int WstationId, int intError, int ServiceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchCountryCities", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchCountryCitiesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchCountryCitiesNextGenCustomExcept" +
            "ionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchCountryCities(int intCountryID, int intStateID, int intCityID, int intUserID, int intworkStnID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchCountryCities", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchCountryCitiesResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchCountryCitiesAsync(int intCountryID, int intStateID, int intCityID, int intUserID, int intworkStnID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchFollowupdays", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchFollowupdaysResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchFollowupdaysNextGenCustomExcepti" +
            "onFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchFollowupdays(int DocID, int SpecilaseId, int UserId, int WstationId, int intError, int PatientID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchFollowupdays", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchFollowupdaysResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchFollowupdaysAsync(int DocID, int SpecilaseId, int UserId, int WstationId, int intError, int PatientID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchMaxconsultdays", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchMaxconsultdaysResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchMaxconsultdaysNextGenCustomExcep" +
            "tionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchMaxconsultdays(int DocID, string TBL, int UserId, int WstationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchMaxconsultdays", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchMaxconsultdaysResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchMaxconsultdaysAsync(int DocID, string TBL, int UserId, int WstationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/getDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/getDetailsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/getDetailsNextGenCustomExceptionFault" +
            "", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet getDetails(int patientid, string datefrom, string dateto, string tableid, int intUserId, int intWorkstationid, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/getDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/getDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> getDetailsAsync(int patientid, string datefrom, string dateto, string tableid, int intUserId, int intWorkstationid, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/getDetailsintServiceId", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/getDetailsintServiceIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/getDetailsintServiceIdNextGenCustomEx" +
            "ceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet getDetailsintServiceId(int patientid, string datefrom, string dateto, string tableid, int intUserId, int intWorkstationid, int intError, int intServiceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/getDetailsintServiceId", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/getDetailsintServiceIdResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> getDetailsintServiceIdAsync(int patientid, string datefrom, string dateto, string tableid, int intUserId, int intWorkstationid, int intError, int intServiceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/getcompBillDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/getcompBillDetailsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/getcompBillDetailsNextGenCustomExcept" +
            "ionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet getcompBillDetails(int companyid, string datefrom, string dateto, string tableid, int intUserId, int intWorkstationid, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/getcompBillDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/getcompBillDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> getcompBillDetailsAsync(int companyid, string datefrom, string dateto, string tableid, int intUserId, int intWorkstationid, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/UpdatePatientPayerDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/UpdatePatientPayerDetailsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/UpdatePatientPayerDetailsNextGenCusto" +
            "mExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        string UpdatePatientPayerDetails(System.Data.DataSet dsPatient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/UpdatePatientPayerDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/UpdatePatientPayerDetailsResponse")]
        System.Threading.Tasks.Task<string> UpdatePatientPayerDetailsAsync(System.Data.DataSet dsPatient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/CheckInsurance", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/CheckInsuranceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/CheckInsuranceNextGenCustomExceptionF" +
            "ault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        string CheckInsurance(string Insurance);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/CheckInsurance", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/CheckInsuranceResponse")]
        System.Threading.Tasks.Task<string> CheckInsuranceAsync(string Insurance);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/CheckInsuranceCompanyID", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/CheckInsuranceCompanyIDResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/CheckInsuranceCompanyIDNextGenCustomE" +
            "xceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        string CheckInsuranceCompanyID(string Insurance, int CompanyID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/CheckInsuranceCompanyID", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/CheckInsuranceCompanyIDResponse")]
        System.Threading.Tasks.Task<string> CheckInsuranceCompanyIDAsync(string Insurance, int CompanyID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SavePatient_PartOne", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SavePatient_PartOneResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/SavePatient_PartOneNextGenCustomExcep" +
            "tionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        string SavePatient_PartOne(System.Data.DataSet dsPatient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SavePatient_PartOne", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SavePatient_PartOneResponse")]
        System.Threading.Tasks.Task<string> SavePatient_PartOneAsync(System.Data.DataSet dsPatient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/UpdatePatient_PartOne", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/UpdatePatient_PartOneResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/UpdatePatient_PartOneNextGenCustomExc" +
            "eptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        string UpdatePatient_PartOne(System.Data.DataSet dsPatient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/UpdatePatient_PartOne", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/UpdatePatient_PartOneResponse")]
        System.Threading.Tasks.Task<string> UpdatePatient_PartOneAsync(System.Data.DataSet dsPatient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SaveAndUpdatePatient_PartTwo", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveAndUpdatePatient_PartTwoResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/SaveAndUpdatePatient_PartTwoNextGenCu" +
            "stomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        string SaveAndUpdatePatient_PartTwo(System.Data.DataSet dsPatient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SaveAndUpdatePatient_PartTwo", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveAndUpdatePatient_PartTwoResponse")]
        System.Threading.Tasks.Task<string> SaveAndUpdatePatient_PartTwoAsync(System.Data.DataSet dsPatient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/GetProcServiceItems", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetProcServiceItemsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/GetProcServiceItemsNextGenCustomExcep" +
            "tionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet GetProcServiceItems(int serviceitemid, int hospitalid, int langid, int UserId, int WstationId, int intError, int ServiceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/GetProcServiceItems", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetProcServiceItemsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetProcServiceItemsAsync(int serviceitemid, int hospitalid, int langid, int UserId, int WstationId, int intError, int ServiceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/GetPrimaryDistinctConsultants", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetPrimaryDistinctConsultantsResponse" +
            "")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/GetPrimaryDistinctConsultantsNextGenC" +
            "ustomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet GetPrimaryDistinctConsultants(int hospitalId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/GetPrimaryDistinctConsultants", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetPrimaryDistinctConsultantsResponse" +
            "")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetPrimaryDistinctConsultantsAsync(int hospitalId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/GetIPDemographicDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetIPDemographicDetailsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/GetIPDemographicDetailsNextGenCustomE" +
            "xceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet GetIPDemographicDetails(int intIPID, int intUserID, System.Nullable<int> intWorkStationID, System.Nullable<int> intFeatureId, System.Nullable<int> intFunctionId, string CallContext, bool LanguageID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/GetIPDemographicDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetIPDemographicDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetIPDemographicDetailsAsync(int intIPID, int intUserID, System.Nullable<int> intWorkStationID, System.Nullable<int> intFeatureId, System.Nullable<int> intFunctionId, string CallContext, bool LanguageID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NxG.HIS/EmergencyServiceContract/SavePatientAdmission", ReplyAction="http://Wipro.NxG.HIS/EmergencyServiceContract/SavePatientAdmission")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/SavePatientAdmissionNextGenCustomExce" +
            "ptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        string SavePatientAdmission(System.Data.DataSet dsPatient, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NxG.HIS/EmergencyServiceContract/SavePatientAdmission", ReplyAction="http://Wipro.NxG.HIS/EmergencyServiceContract/SavePatientAdmission")]
        System.Threading.Tasks.Task<string> SavePatientAdmissionAsync(System.Data.DataSet dsPatient, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NxG.HIS/EmergencyServiceContract/GetActiveAdmissions", ReplyAction="http://Wipro.NxG.HIS/EmergencyServiceContract/GetActiveAdmissions")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/GetActiveAdmissionsNextGenCustomExcep" +
            "tionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        short GetActiveAdmissions(int AdmissionID, int intWorkStationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NxG.HIS/EmergencyServiceContract/GetActiveAdmissions", ReplyAction="http://Wipro.NxG.HIS/EmergencyServiceContract/GetActiveAdmissions")]
        System.Threading.Tasks.Task<short> GetActiveAdmissionsAsync(int AdmissionID, int intWorkStationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/GetSchedulerConfigurations", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetSchedulerConfigurationsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/GetSchedulerConfigurationsNextGenCust" +
            "omExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet GetSchedulerConfigurations(int intHospitalID, string Filter, int intUserID, int intWorkStationID, int intError, string strOrder);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/GetSchedulerConfigurations", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetSchedulerConfigurationsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetSchedulerConfigurationsAsync(int intHospitalID, string Filter, int intUserID, int intWorkStationID, int intError, string strOrder);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchAllBillDetailsAdv", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchAllBillDetailsAdvResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchAllBillDetailsAdvNextGenCustomEx" +
            "ceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchAllBillDetailsAdv(int Type, string Filter, int intUserID, int intWorkStnId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchAllBillDetailsAdv", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchAllBillDetailsAdvResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchAllBillDetailsAdvAsync(int Type, string Filter, int intUserID, int intWorkStnId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchPatientAuditDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchPatientAuditDetailsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchPatientAuditDetailsNextGenCustom" +
            "ExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchPatientAuditDetails(string orderType, string strFilter, int userID, int workStationID, int error, string order, short languageID, int featureID, int functionID, string callContext, int startRow, int endRow);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchPatientAuditDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchPatientAuditDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchPatientAuditDetailsAsync(string orderType, string strFilter, int userID, int workStationID, int error, string order, short languageID, int featureID, int functionID, string callContext, int startRow, int endRow);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchPatientAuditTrailDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchPatientAuditTrailDetailsResponse" +
            "")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchPatientAuditTrailDetailsNextGenC" +
            "ustomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchPatientAuditTrailDetails(int AuditID, string sRegCode, string TBL, short deleted, int iUserId, int iWorkStnId, int iError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchPatientAuditTrailDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchPatientAuditTrailDetailsResponse" +
            "")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchPatientAuditTrailDetailsAsync(int AuditID, string sRegCode, string TBL, short deleted, int iUserId, int iWorkStnId, int iError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchPatientAuditTrailDetailsMODA", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchPatientAuditTrailDetailsMODAResp" +
            "onse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchPatientAuditTrailDetailsMODANext" +
            "GenCustomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchPatientAuditTrailDetailsMODA(int AuditID, string sRegCode, string TBL, short deleted, int iUserId, int iWorkStnId, int iError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchPatientAuditTrailDetailsMODA", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchPatientAuditTrailDetailsMODAResp" +
            "onse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchPatientAuditTrailDetailsMODAAsync(int AuditID, string sRegCode, string TBL, short deleted, int iUserId, int iWorkStnId, int iError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/SaveCashierScrollAmt", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveCashierScrollAmtResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/SaveCashierScrollAmtNextGenCustomExce" +
            "ptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        int SaveCashierScrollAmt(int ScrollUserID, System.DateTime LastScrollDate, System.DateTime ENDDATE, int ExpecedAmount, int userid, string TransactionDetails);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/SaveCashierScrollAmt", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveCashierScrollAmtResponse")]
        System.Threading.Tasks.Task<int> SaveCashierScrollAmtAsync(int ScrollUserID, System.DateTime LastScrollDate, System.DateTime ENDDATE, int ExpecedAmount, int userid, string TransactionDetails);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchCashierScrollAmt", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchCashierScrollAmtResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchCashierScrollAmtNextGenCustomExc" +
            "eptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchCashierScrollAmt(string ScrollUserID, int intUserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchCashierScrollAmt", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchCashierScrollAmtResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchCashierScrollAmtAsync(string ScrollUserID, int intUserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetPendingOrders", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetPendingOrdersResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/GetPendingOrdersNextGenCustomExceptio" +
            "nFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet GetPendingOrders(long lngIPID, int intUserID, int IntWorkStationID, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetPendingOrders", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetPendingOrdersResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetPendingOrdersAsync(long lngIPID, int intUserID, int IntWorkStationID, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/SavePendingOrdersClearence", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SavePendingOrdersClearenceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/SavePendingOrdersClearenceNextGenCust" +
            "omExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        int SavePendingOrdersClearence(int IPID, int ServiceID, int OrderID, string OrderNo, int OrderItemID, int ServiceItemID, string Remarks, int userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/SavePendingOrdersClearence", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SavePendingOrdersClearenceResponse")]
        System.Threading.Tasks.Task<int> SavePendingOrdersClearenceAsync(int IPID, int ServiceID, int OrderID, string OrderNo, int OrderItemID, int ServiceItemID, string Remarks, int userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetPendingOrdersClearence", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetPendingOrdersClearenceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/GetPendingOrdersClearenceNextGenCusto" +
            "mExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet GetPendingOrdersClearence(int TBL, int IPID);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetPendingOrdersClearence", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetPendingOrdersClearenceResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetPendingOrdersClearenceAsync(int TBL, int IPID);
        
        [System.ServiceModel.OperationContractAttribute(Action="SaveDoctorInOutTime", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveDoctorInOutTimeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/SaveDoctorInOutTimeNextGenCustomExcep" +
            "tionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        int SaveDoctorInOutTime(System.Data.DataSet objDSSave);
        
        [System.ServiceModel.OperationContractAttribute(Action="SaveDoctorInOutTime", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveDoctorInOutTimeResponse")]
        System.Threading.Tasks.Task<int> SaveDoctorInOutTimeAsync(System.Data.DataSet objDSSave);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchDoctorInOutTime", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchDoctorInOutTimeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchDoctorInOutTimeNextGenCustomExce" +
            "ptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchDoctorInOutTime(int DocID, int HospitalID, System.DateTime Scheduledatedate, int sessionid, int UserId, int WorkstationID, int intError, int intTbl);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchDoctorInOutTime", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchDoctorInOutTimeResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchDoctorInOutTimeAsync(int DocID, int HospitalID, System.DateTime Scheduledatedate, int sessionid, int UserId, int WorkstationID, int intError, int intTbl);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchDoctorFacilities", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchDoctorFacilitiesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchDoctorFacilitiesNextGenCustomExc" +
            "eptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchDoctorFacilities(System.DateTime Fromdate, System.DateTime Todate, int UserId, int WorkstationID, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchDoctorFacilities", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchDoctorFacilitiesResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchDoctorFacilitiesAsync(System.DateTime Fromdate, System.DateTime Todate, int UserId, int WorkstationID, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/GetEvents", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetEventsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/GetEventsNextGenCustomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet GetEvents(int intTableId, string strFilter, int IntUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/GetEvents", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetEventsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetEventsAsync(int intTableId, string strFilter, int IntUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/SaveCorporateHealthCheckUp", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveCorporateHealthCheckUpResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/SaveCorporateHealthCheckUpNextGenCust" +
            "omExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        int SaveCorporateHealthCheckUp(int CorporateHealthCheckUpId, int CompanyID, string FromDate, string ToDate, int EventId, string FileName, int HospitalId, int Blocked, int intUserid, int intWorkstationid, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/SaveCorporateHealthCheckUp", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveCorporateHealthCheckUpResponse")]
        System.Threading.Tasks.Task<int> SaveCorporateHealthCheckUpAsync(int CorporateHealthCheckUpId, int CompanyID, string FromDate, string ToDate, int EventId, string FileName, int HospitalId, int Blocked, int intUserid, int intWorkstationid, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SavePatients", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SavePatientDeatilsResponse")]
        string SavePatientDeatils(Reports.FrontOfficeServiceClient.PatientDetails patient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SavePatients", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SavePatientDeatilsResponse")]
        System.Threading.Tasks.Task<string> SavePatientDeatilsAsync(Reports.FrontOfficeServiceClient.PatientDetails patient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SavePatientPassportDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SavePatientPassportDetailsResponse")]
        string SavePatientPassportDetails(Reports.FrontOfficeServiceClient.PatientDetails patient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SavePatientPassportDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SavePatientPassportDetailsResponse")]
        System.Threading.Tasks.Task<string> SavePatientPassportDetailsAsync(Reports.FrontOfficeServiceClient.PatientDetails patient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SaveClinicVisitRequest", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveClinicVisitRequestResponse")]
        int SaveClinicVisitRequest(int intVisitRequestId, int intPatientId, int intDoctorId, int intHospitalId, System.DateTime dtVisitDate, int intUserid, int intWorkstationid, string strVisitReason, int intdocSpecID, string strClinicCode, string isFit, int intSavedPatientId, int Blocked);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SaveClinicVisitRequest", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveClinicVisitRequestResponse")]
        System.Threading.Tasks.Task<int> SaveClinicVisitRequestAsync(int intVisitRequestId, int intPatientId, int intDoctorId, int intHospitalId, System.DateTime dtVisitDate, int intUserid, int intWorkstationid, string strVisitReason, int intdocSpecID, string strClinicCode, string isFit, int intSavedPatientId, int Blocked);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchClinicVisitWorklist", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchClinicVisitWorklistResponse")]
        System.Data.DataSet FetchClinicVisitWorklist(int intPatientID, System.DateTime dtFromDate, System.DateTime dtToDate, int intWorkstationID, int intAdmissionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchClinicVisitWorklist", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchClinicVisitWorklistResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchClinicVisitWorklistAsync(int intPatientID, System.DateTime dtFromDate, System.DateTime dtToDate, int intWorkstationID, int intAdmissionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SavePatientAddressDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SavePatientAddressDetailsResponse")]
        string SavePatientAddressDetails(Reports.FrontOfficeServiceClient.PatientDetails patient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SavePatientAddressDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SavePatientAddressDetailsResponse")]
        System.Threading.Tasks.Task<string> SavePatientAddressDetailsAsync(Reports.FrontOfficeServiceClient.PatientDetails patient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SavePatientOtherDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SavePatientOtherDetailsResponse")]
        string SavePatientOtherDetails(Reports.FrontOfficeServiceClient.PatientDetails patient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SavePatientOtherDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SavePatientOtherDetailsResponse")]
        System.Threading.Tasks.Task<string> SavePatientOtherDetailsAsync(Reports.FrontOfficeServiceClient.PatientDetails patient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SavePatientRegistrationDetailsNew", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SavePatientRegistrationDetailsNewResp" +
            "onse")]
        string SavePatientRegistrationDetailsNew(string strXMLPatientDetails, string strXMLFoodAllergies, string strXMLDrugAllergies, string strXMLOtherAllergies, int intuserID, int WorkstnID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SavePatientRegistrationDetailsNew", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SavePatientRegistrationDetailsNewResp" +
            "onse")]
        System.Threading.Tasks.Task<string> SavePatientRegistrationDetailsNewAsync(string strXMLPatientDetails, string strXMLFoodAllergies, string strXMLDrugAllergies, string strXMLOtherAllergies, int intuserID, int WorkstnID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SaveCountryNewMaster ", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveCountryNewMasterResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/SaveCountryNewMasterNextGenCustomExce" +
            "ptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        long SaveCountryNewMaster(System.Data.DataSet dscountrynewmaster, byte IsInsert);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SaveCountryNewMaster ", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveCountryNewMasterResponse")]
        System.Threading.Tasks.Task<long> SaveCountryNewMasterAsync(System.Data.DataSet dscountrynewmaster, byte IsInsert);
        
        [System.ServiceModel.OperationContractAttribute(Action="SaveApprovalRequest", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveApprovalRequestResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/SaveApprovalRequestNextGenCustomExcep" +
            "tionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        int SaveApprovalRequest(System.Data.DataSet dsSendToSave, string strAppDetail, int intUserID, int intWorkstationID, int intFeatureID, int intFunctionID, string strCallContext, int intUcafID);
        
        [System.ServiceModel.OperationContractAttribute(Action="SaveApprovalRequest", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveApprovalRequestResponse")]
        System.Threading.Tasks.Task<int> SaveApprovalRequestAsync(System.Data.DataSet dsSendToSave, string strAppDetail, int intUserID, int intWorkstationID, int intFeatureID, int intFunctionID, string strCallContext, int intUcafID);
        
        [System.ServiceModel.OperationContractAttribute(Action="SaveConsultationOrder", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveConsultationOrderResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/SaveConsultationOrderNextGenCustomExc" +
            "eptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        int SaveConsultationOrder(int BillableConsultationID, int PatientId, int intRefDoctorID, int IntSpeclizationID, string strBillNo, int ActionType, int intUserID, int intWorkstationID, int intError, string strCallContext, int HospitalId, int ScheduleID);
        
        [System.ServiceModel.OperationContractAttribute(Action="SaveConsultationOrder", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveConsultationOrderResponse")]
        System.Threading.Tasks.Task<int> SaveConsultationOrderAsync(int BillableConsultationID, int PatientId, int intRefDoctorID, int IntSpeclizationID, string strBillNo, int ActionType, int intUserID, int intWorkstationID, int intError, string strCallContext, int HospitalId, int ScheduleID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/GetRaiseConsultationOrder", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetRaiseConsultationOrderResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/GetRaiseConsultationOrderNextGenCusto" +
            "mExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet GetRaiseConsultationOrder(int intMin, int intMax, string strConsFilter, int intUserID, int intWorkstationID, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/GetRaiseConsultationOrder", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetRaiseConsultationOrderResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetRaiseConsultationOrderAsync(int intMin, int intMax, string strConsFilter, int intUserID, int intWorkstationID, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchData", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchDataResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchDataNextGenCustomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchData(string strSP, int intMin, int intMax, int intType, string strConsFilter, int intUserID, int intWorkstationID, int intError, int HospitalId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchData", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchDataResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchDataAsync(string strSP, int intMin, int intMax, int intType, string strConsFilter, int intUserID, int intWorkstationID, int intError, int HospitalId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchPrescripton", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchPrescriptonResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchPrescriptonNextGenCustomExceptio" +
            "nFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchPrescripton(int intMin, int intMax, int intType, string strFilter, int intUserID, int intWorkstationID, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchPrescripton", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchPrescriptonResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchPrescriptonAsync(int intMin, int intMax, int intType, string strFilter, int intUserID, int intWorkstationID, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/GetLOA_Deatils", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetLOA_DeatilsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/GetLOA_DeatilsNextGenCustomExceptionF" +
            "ault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet GetLOA_Deatils(int intMin, int intMax, int intType, string strFilter, int intUserID, int intWorkstationID, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/GetLOA_Deatils", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetLOA_DeatilsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetLOA_DeatilsAsync(int intMin, int intMax, int intType, string strFilter, int intUserID, int intWorkstationID, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="NewFetchPatientFile", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/NewFetchPatientFileResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/NewFetchPatientFileNextGenCustomExcep" +
            "tionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet NewFetchPatientFile(int EpisodeID, int VisitID, int MonitorID, string TBL, int intUserId, int intWorkStationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="NewFetchPatientFile", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/NewFetchPatientFileResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> NewFetchPatientFileAsync(int EpisodeID, int VisitID, int MonitorID, string TBL, int intUserId, int intWorkStationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/ValidationTest", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/ValidationTestResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/ValidationTestNextGenCustomExceptionF" +
            "ault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet ValidationTest(string strDoctorID, int intPatientID, System.DateTime schDate, int intFeatureID, int intFunctionID, string CallContext, int intUserID, int intWorkstationID, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/ValidationTest", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/ValidationTestResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> ValidationTestAsync(string strDoctorID, int intPatientID, System.DateTime schDate, int intFeatureID, int intFunctionID, string CallContext, int intUserID, int intWorkstationID, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/ValidationTests", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/ValidationTestsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/ValidationTestsNextGenCustomException" +
            "Fault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet ValidationTests(string strDoctorID, int intPatientID, System.DateTime schDate, int intFeatureID, int intFunctionID, string CallContext, int intUserID, int intWorkstationID, int intError, int Type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/ValidationTests", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/ValidationTestsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> ValidationTestsAsync(string strDoctorID, int intPatientID, System.DateTime schDate, int intFeatureID, int intFunctionID, string CallContext, int intUserID, int intWorkstationID, int intError, int Type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/ValidationTest_New", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/ValidationTest_NewResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/ValidationTest_NewNextGenCustomExcept" +
            "ionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet ValidationTest_New(string strDoctorID, int intPatientID, System.DateTime schDate, int intFeatureID, int intFunctionID, string CallContext, int intUserID, int intWorkstationID, int intError, string Table, string specialiseID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/ValidationTest_New", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/ValidationTest_NewResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> ValidationTest_NewAsync(string strDoctorID, int intPatientID, System.DateTime schDate, int intFeatureID, int intFunctionID, string CallContext, int intUserID, int intWorkstationID, int intError, string Table, string specialiseID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/GetMasters", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetMastersResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/GetMastersNextGenCustomExceptionFault" +
            "", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet GetMasters(string strTableIds, string[] strTableNames, int UserId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/GetMasters", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetMastersResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetMastersAsync(string strTableIds, string[] strTableNames, int UserId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/GetMastersTagID", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetMastersTagIDResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/GetMastersTagIDNextGenCustomException" +
            "Fault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet GetMastersTagID(string strTableIds, string[] strTableNames, int UserId, int intError, int tagId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/GetMastersTagID", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetMastersTagIDResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetMastersTagIDAsync(string strTableIds, string[] strTableNames, int UserId, int intError, int tagId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchPatientDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchPatientDetailsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchPatientDetailsNextGenCustomExcep" +
            "tionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchPatientDetails(string strPatId, string strRegCode, bool BlnDeleted, int intUserId, int intWorkStnId, int intError, byte IsReg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchPatientDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchPatientDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchPatientDetailsAsync(string strPatId, string strRegCode, bool BlnDeleted, int intUserId, int intWorkStnId, int intError, byte IsReg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchPatientDetailsOPIP", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchPatientDetailsOPIPResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchPatientDetailsOPIPNextGenCustomE" +
            "xceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchPatientDetailsOPIP(string strPatId, string strRegCode, bool BlnDeleted, int intUserId, int intWorkStnId, int intError, byte IsReg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchPatientDetailsOPIP", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchPatientDetailsOPIPResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchPatientDetailsOPIPAsync(string strPatId, string strRegCode, bool BlnDeleted, int intUserId, int intWorkStnId, int intError, byte IsReg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SaveIPTempBillDetailsPerf", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveIPTempBillDetailsPerfResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/SaveIPTempBillDetailsPerfNextGenCusto" +
            "mExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        int SaveIPTempBillDetailsPerf(System.Data.DataSet dtTempBillDetails, string strSessionId, string strAdmissionUHID, int intPatientType, int intBillType, int intPatienId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SaveIPTempBillDetailsPerf", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveIPTempBillDetailsPerfResponse")]
        System.Threading.Tasks.Task<int> SaveIPTempBillDetailsPerfAsync(System.Data.DataSet dtTempBillDetails, string strSessionId, string strAdmissionUHID, int intPatientType, int intBillType, int intPatienId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SaveIPTempBillDetailsPerfNewForIP", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveIPTempBillDetailsPerfNewForIPResp" +
            "onse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/SaveIPTempBillDetailsPerfNewForIPNext" +
            "GenCustomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        int SaveIPTempBillDetailsPerfNewForIP(System.Data.DataSet dtTempBillDetails, string strSessionId, string strAdmissionUHID, int intPatientType, int intBillType, int intPatienId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SaveIPTempBillDetailsPerfNewForIP", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveIPTempBillDetailsPerfNewForIPResp" +
            "onse")]
        System.Threading.Tasks.Task<int> SaveIPTempBillDetailsPerfNewForIPAsync(System.Data.DataSet dtTempBillDetails, string strSessionId, string strAdmissionUHID, int intPatientType, int intBillType, int intPatienId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchPatientDetails_IPBillPerf", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchPatientDetails_IPBillPerfRespons" +
            "e")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchPatientDetails_IPBillPerfNextGen" +
            "CustomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchPatientDetails_IPBillPerf(string strRegCode, int IPID, string Status, string PatientType, int HospitalId, int intUserId, int intWorkStnId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchPatientDetails_IPBillPerf", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchPatientDetails_IPBillPerfRespons" +
            "e")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchPatientDetails_IPBillPerfAsync(string strRegCode, int IPID, string Status, string PatientType, int HospitalId, int intUserId, int intWorkStnId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchPatientDetailsLangID", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchPatientDetailsLangIDResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchPatientDetailsLangIDNextGenCusto" +
            "mExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchPatientDetailsLangID(string strPatId, string strRegCode, bool BlnDeleted, int intUserId, int intWorkStnId, int intError, byte IsReg, int LanguageID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchPatientDetailsLangID", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchPatientDetailsLangIDResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchPatientDetailsLangIDAsync(string strPatId, string strRegCode, bool BlnDeleted, int intUserId, int intWorkStnId, int intError, byte IsReg, int LanguageID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchPatientDetailsLangIDPatientData", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchPatientDetailsLangIDPatientDataR" +
            "esponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchPatientDetailsLangIDPatientDataN" +
            "extGenCustomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchPatientDetailsLangIDPatientData(string strPatId, string strRegCode, bool BlnDeleted, int intUserId, int intWorkStnId, int intError, byte IsReg, int LanguageID, string TblNums);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchPatientDetailsLangIDPatientData", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchPatientDetailsLangIDPatientDataR" +
            "esponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchPatientDetailsLangIDPatientDataAsync(string strPatId, string strRegCode, bool BlnDeleted, int intUserId, int intWorkStnId, int intError, byte IsReg, int LanguageID, string TblNums);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchPatientDetailsLangIDMODA", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchPatientDetailsLangIDMODAResponse" +
            "")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchPatientDetailsLangIDMODANextGenC" +
            "ustomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchPatientDetailsLangIDMODA(string strPatId, string strRegCode, bool BlnDeleted, int intUserId, int intWorkStnId, int intError, byte IsReg, int LanguageID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchPatientDetailsLangIDMODA", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchPatientDetailsLangIDMODAResponse" +
            "")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchPatientDetailsLangIDMODAAsync(string strPatId, string strRegCode, bool BlnDeleted, int intUserId, int intWorkStnId, int intError, byte IsReg, int LanguageID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchSingleMaster", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchSingleMasterResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchSingleMasterNextGenCustomExcepti" +
            "onFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchSingleMaster(int intTableId, string StrFilter, int UserId, int WstationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchSingleMaster", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchSingleMasterResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchSingleMasterAsync(int intTableId, string StrFilter, int UserId, int WstationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchSingleMastTagId", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchSingleMastTagIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchSingleMastTagIdNextGenCustomExce" +
            "ptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchSingleMastTagId(int intTableId, string StrFilter, int UserId, int WstationId, int intError, int TagId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchSingleMastTagId", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchSingleMastTagIdResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchSingleMastTagIdAsync(int intTableId, string StrFilter, int UserId, int WstationId, int intError, int TagId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchOrganizationDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchOrganizationDetailsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchOrganizationDetailsNextGenCustom" +
            "ExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchOrganizationDetails(int intTableId, string strFilter, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchOrganizationDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchOrganizationDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchOrganizationDetailsAsync(int intTableId, string strFilter, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchDefaultTariff", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchDefaultTariffResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchDefaultTariffNextGenCustomExcept" +
            "ionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        int FetchDefaultTariff(string strFilter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchDefaultTariff", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchDefaultTariffResponse")]
        System.Threading.Tasks.Task<int> FetchDefaultTariffAsync(string strFilter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchADVProcedureDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchADVProcedureDetailsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchADVProcedureDetailsNextGenCustom" +
            "ExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchADVProcedureDetails(string ProcedureName, string Type, string Filter, int UserId, int WstationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchADVProcedureDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchADVProcedureDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchADVProcedureDetailsAsync(string ProcedureName, string Type, string Filter, int UserId, int WstationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchADVProcedureHospitalDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchADVProcedureHospitalDetailsRespo" +
            "nse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchADVProcedureHospitalDetailsNextG" +
            "enCustomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchADVProcedureHospitalDetails(string ProcedureName, string Type, string Filter, int UserId, int WstationId, int intError, int HospitalID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchADVProcedureHospitalDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchADVProcedureHospitalDetailsRespo" +
            "nse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchADVProcedureHospitalDetailsAsync(string ProcedureName, string Type, string Filter, int UserId, int WstationId, int intError, int HospitalID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchADVProcedureDetailsLangID", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchADVProcedureDetailsLangIDRespons" +
            "e")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchADVProcedureDetailsLangIDNextGen" +
            "CustomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchADVProcedureDetailsLangID(string ProcedureName, string Type, string Filter, int UserId, int WstationId, int intError, int intLanguageID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchADVProcedureDetailsLangID", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchADVProcedureDetailsLangIDRespons" +
            "e")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchADVProcedureDetailsLangIDAsync(string ProcedureName, string Type, string Filter, int UserId, int WstationId, int intError, int intLanguageID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/GetvisitProcedureDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetvisitProcedureDetailsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/GetvisitProcedureDetailsNextGenCustom" +
            "ExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet GetvisitProcedureDetails(string ProcedureName, string Type, string Filter, int UserId, int WstationId, int intError, int intLanguageID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/GetvisitProcedureDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetvisitProcedureDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetvisitProcedureDetailsAsync(string ProcedureName, string Type, string Filter, int UserId, int WstationId, int intError, int intLanguageID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchRootPatientId", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchRootPatientIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchRootPatientIdNextGenCustomExcept" +
            "ionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        int FetchRootPatientId(string UHID, int iUserId, int iWStationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchRootPatientId", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchRootPatientIdResponse")]
        System.Threading.Tasks.Task<int> FetchRootPatientIdAsync(string UHID, int iUserId, int iWStationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchRootPatientIdPerformance", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchRootPatientIdPerformanceResponse" +
            "")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchRootPatientIdPerformanceNextGenC" +
            "ustomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        int FetchRootPatientIdPerformance(string UHID, int iUserId, int iWStationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchRootPatientIdPerformance", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchRootPatientIdPerformanceResponse" +
            "")]
        System.Threading.Tasks.Task<int> FetchRootPatientIdPerformanceAsync(string UHID, int iUserId, int iWStationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchRootPatientIdPerformanceMODA", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchRootPatientIdPerformanceMODAResp" +
            "onse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchRootPatientIdPerformanceMODANext" +
            "GenCustomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        int[] FetchRootPatientIdPerformanceMODA(string UHID, int iUserId, int iWStationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchRootPatientIdPerformanceMODA", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchRootPatientIdPerformanceMODAResp" +
            "onse")]
        System.Threading.Tasks.Task<int[]> FetchRootPatientIdPerformanceMODAAsync(string UHID, int iUserId, int iWStationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchPatientIdPerformance", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchPatientIdPerformanceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchPatientIdPerformanceNextGenCusto" +
            "mExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        int FetchPatientIdPerformance(string UHID, int iUserId, int iWStationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchPatientIdPerformance", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchPatientIdPerformanceResponse")]
        System.Threading.Tasks.Task<int> FetchPatientIdPerformanceAsync(string UHID, int iUserId, int iWStationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchTitles", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchTitlesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchTitlesNextGenCustomExceptionFaul" +
            "t", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchTitles(int intTitleId, int intTableId, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchTitles", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchTitlesResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchTitlesAsync(int intTitleId, int intTableId, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchAgeDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchAgeDetailsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchAgeDetailsNextGenCustomException" +
            "Fault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        string FetchAgeDetails(System.DateTime DateOfBirth, System.DateTime CurrentDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchAgeDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchAgeDetailsResponse")]
        System.Threading.Tasks.Task<string> FetchAgeDetailsAsync(System.DateTime DateOfBirth, System.DateTime CurrentDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/GetInPatientDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetInPatientDetailsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/GetInPatientDetailsNextGenCustomExcep" +
            "tionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet GetInPatientDetails(string Condition, int UserID, int WorkStationID, int Error);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/GetInPatientDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetInPatientDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetInPatientDetailsAsync(string Condition, int UserID, int WorkStationID, int Error);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchADVProcedureDetailsCall", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchADVProcedureDetailsCallResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchADVProcedureDetailsCallNextGenCu" +
            "stomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchADVProcedureDetailsCall(string ProcedureName, string Type, string Filter, int UserId, int WstationId, int intError, int FeatureId, int FunctionId, string CallContext);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchADVProcedureDetailsCall", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchADVProcedureDetailsCallResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchADVProcedureDetailsCallAsync(string ProcedureName, string Type, string Filter, int UserId, int WstationId, int intError, int FeatureId, int FunctionId, string CallContext);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchMISProcedureDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchMISProcedureDetailsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchMISProcedureDetailsNextGenCustom" +
            "ExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchMISProcedureDetails(string ProcedureName, string sSelect, string sFilter, string sOrder, int UserId, int WstationId, int intError, bool IsMIS);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchMISProcedureDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchMISProcedureDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchMISProcedureDetailsAsync(string ProcedureName, string sSelect, string sFilter, string sOrder, int UserId, int WstationId, int intError, bool IsMIS);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/GetRoundedValue", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetRoundedValueResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/GetRoundedValueNextGenCustomException" +
            "Fault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        decimal GetRoundedValue(decimal BillValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/GetRoundedValue", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetRoundedValueResponse")]
        System.Threading.Tasks.Task<decimal> GetRoundedValueAsync(decimal BillValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchOutstandingAmount", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchOutstandingAmountResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchOutstandingAmountNextGenCustomEx" +
            "ceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchOutstandingAmount(int PatientId, int PatientType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchOutstandingAmount", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchOutstandingAmountResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchOutstandingAmountAsync(int PatientId, int PatientType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchAvailDepositAmount", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchAvailDepositAmountResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchAvailDepositAmountNextGenCustomE" +
            "xceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchAvailDepositAmount(int PatientId, int PatientType, int intUserId, int intWorkStationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchAvailDepositAmount", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchAvailDepositAmountResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchAvailDepositAmountAsync(int PatientId, int PatientType, int intUserId, int intWorkStationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/GetOPCashIssuePatient", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetOPCashIssuePatientResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/GetOPCashIssuePatientNextGenCustomExc" +
            "eptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        int GetOPCashIssuePatient(int PatientId, int iUserId, int iWStationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/GetOPCashIssuePatient", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetOPCashIssuePatientResponse")]
        System.Threading.Tasks.Task<int> GetOPCashIssuePatientAsync(int PatientId, int iUserId, int iWStationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/GetFeatures", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetFeaturesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/GetFeaturesNextGenCustomExceptionFaul" +
            "t", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet GetFeatures(int intPatientType, int intUserId, int intWorkStationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/GetFeatures", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetFeaturesResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetFeaturesAsync(int intPatientType, int intUserId, int intWorkStationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/GetFeatureAuthorizedUsers", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetFeatureAuthorizedUsersResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/GetFeatureAuthorizedUsersNextGenCusto" +
            "mExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet GetFeatureAuthorizedUsers(int intPatientType, int intUserId, int intWorkStationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/GetFeatureAuthorizedUsers", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetFeatureAuthorizedUsersResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetFeatureAuthorizedUsersAsync(int intPatientType, int intUserId, int intWorkStationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/SaveFeatureAuthorizedUsers", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveFeatureAuthorizedUsersResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/SaveFeatureAuthorizedUsersNextGenCust" +
            "omExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        int SaveFeatureAuthorizedUsers(System.Data.DataSet DsSave, int intFeatureId, int intUserID, int intWorkstationID, int intHospitalID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/SaveFeatureAuthorizedUsers", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveFeatureAuthorizedUsersResponse")]
        System.Threading.Tasks.Task<int> SaveFeatureAuthorizedUsersAsync(System.Data.DataSet DsSave, int intFeatureId, int intUserID, int intWorkstationID, int intHospitalID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/GetCityDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetCityDetailsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/GetCityDetailsNextGenCustomExceptionF" +
            "ault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet GetCityDetails(int iMin, int iMax, int iType, string sFilter, int UserId, int iWKS, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/GetCityDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetCityDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetCityDetailsAsync(int iMin, int iMax, int iType, string sFilter, int UserId, int iWKS, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/GetCityDetailsTagId", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetCityDetailsTagIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/GetCityDetailsTagIdNextGenCustomExcep" +
            "tionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet GetCityDetailsTagId(int iMin, int iMax, int iType, string sFilter, int UserId, int iWKS, int intError, int TagId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/GetCityDetailsTagId", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetCityDetailsTagIdResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetCityDetailsTagIdAsync(int iMin, int iMax, int iType, string sFilter, int UserId, int iWKS, int intError, int TagId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/GetGradeDetailsTagId", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetGradeDetailsTagIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/GetGradeDetailsTagIdNextGenCustomExce" +
            "ptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet GetGradeDetailsTagId(int iMin, int iMax, int iType, string sFilter, int UserId, int iWKS, int intError, int TagId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/GetGradeDetailsTagId", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetGradeDetailsTagIdResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetGradeDetailsTagIdAsync(int iMin, int iMax, int iType, string sFilter, int UserId, int iWKS, int intError, int TagId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/GetRootPatientId", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetRootPatientIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/GetRootPatientIdNextGenCustomExceptio" +
            "nFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        int GetRootPatientId(string PatientID, int iUserId, int iWStationId, string sType, string sSSN);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/GetRootPatientId", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetRootPatientIdResponse")]
        System.Threading.Tasks.Task<int> GetRootPatientIdAsync(string PatientID, int iUserId, int iWStationId, string sType, string sSSN);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SaveCheckIn", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveCheckInResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/SaveCheckInNextGenCustomExceptionFaul" +
            "t", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        int SaveCheckIn(
                    System.Data.DataSet dsChekIn, 
                    int AdmissionID, 
                    int PatientID, 
                    int HospitalID, 
                    int Investigation, 
                    int IpOpProcedures, 
                    int Pharmacy, 
                    int VisitID, 
                    int VisitType, 
                    int DoctorID, 
                    bool ISExternal, 
                    int EpisodeID, 
                    int RefDoctorID, 
                    int intFeatureId, 
                    int intFunctionId, 
                    string strCallContext, 
                    bool CheckIn, 
                    int intUserId, 
                    int intWorkStationId, 
                    int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SaveCheckIn", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveCheckInResponse")]
        System.Threading.Tasks.Task<int> SaveCheckInAsync(
                    System.Data.DataSet dsChekIn, 
                    int AdmissionID, 
                    int PatientID, 
                    int HospitalID, 
                    int Investigation, 
                    int IpOpProcedures, 
                    int Pharmacy, 
                    int VisitID, 
                    int VisitType, 
                    int DoctorID, 
                    bool ISExternal, 
                    int EpisodeID, 
                    int RefDoctorID, 
                    int intFeatureId, 
                    int intFunctionId, 
                    string strCallContext, 
                    bool CheckIn, 
                    int intUserId, 
                    int intWorkStationId, 
                    int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchCheckInDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchCheckInDetailsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchCheckInDetailsNextGenCustomExcep" +
            "tionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchCheckInDetails(int Type, string strFilter, int intUserID, int intWorkStationID, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchCheckInDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchCheckInDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchCheckInDetailsAsync(int Type, string strFilter, int intUserID, int intWorkStationID, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchConsultantPriceDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchConsultantPriceDetailsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchConsultantPriceDetailsNextGenCus" +
            "tomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchConsultantPriceDetails(int ServiceId, int ItemId, int TariffId, int BillType, int Priority, int SpecialisationId, string BedtypeId, int iUserId, int iWstationId, int iError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchConsultantPriceDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchConsultantPriceDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchConsultantPriceDetailsAsync(int ServiceId, int ItemId, int TariffId, int BillType, int Priority, int SpecialisationId, string BedtypeId, int iUserId, int iWstationId, int iError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchMCCIDDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchMCCIDDetailsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchMCCIDDetailsNextGenCustomExcepti" +
            "onFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchMCCIDDetails(string Select, string strFilter, int intUserID, int intWorkStationID, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchMCCIDDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchMCCIDDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchMCCIDDetailsAsync(string Select, string strFilter, int intUserID, int intWorkStationID, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchTitlesDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchTitlesDetailsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchTitlesDetailsNextGenCustomExcept" +
            "ionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchTitlesDetails(long lngTitleId, int intUserId, int intWorkStnId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchTitlesDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchTitlesDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchTitlesDetailsAsync(long lngTitleId, int intUserId, int intWorkStnId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchTitleDetailsLangID", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchTitleDetailsLangIDResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchTitleDetailsLangIDNextGenCustomE" +
            "xceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchTitleDetailsLangID(long lngTitleId, int intUserId, int intWorkStnId, int intError, int LanguageID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchTitleDetailsLangID", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchTitleDetailsLangIDResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchTitleDetailsLangIDAsync(long lngTitleId, int intUserId, int intWorkStnId, int intError, int LanguageID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchEmployeesBySpecialization", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchEmployeesBySpecializationRespons" +
            "e")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchEmployeesBySpecializationNextGen" +
            "CustomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchEmployeesBySpecialization(int SpecializationId, bool IsMedical, int MedicalType, string TBL, int UserId, int WstationId, int LanguageID, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchEmployeesBySpecialization", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchEmployeesBySpecializationRespons" +
            "e")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchEmployeesBySpecializationAsync(int SpecializationId, bool IsMedical, int MedicalType, string TBL, int UserId, int WstationId, int LanguageID, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchEmpMasters", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchEmpMastersResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchEmpMastersNextGenCustomException" +
            "Fault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchEmpMasters(int EmpID, string EmpNo, string TBL, bool Deleted, int UserId, int WstationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchEmpMasters", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchEmpMastersResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchEmpMastersAsync(int EmpID, string EmpNo, string TBL, bool Deleted, int UserId, int WstationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchEmpMastersLangID", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchEmpMastersLangIDResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchEmpMastersLangIDNextGenCustomExc" +
            "eptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchEmpMastersLangID(int EmpID, string EmpNo, string TBL, bool Deleted, int UserId, int WstationId, int intError, int LanguageID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchEmpMastersLangID", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchEmpMastersLangIDResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchEmpMastersLangIDAsync(int EmpID, string EmpNo, string TBL, bool Deleted, int UserId, int WstationId, int intError, int LanguageID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchBedStatusDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchBedStatusDetailsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchBedStatusDetailsNextGenCustomExc" +
            "eptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchBedStatusDetails();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchBedStatusDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchBedStatusDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchBedStatusDetailsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchBedDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchBedDetailsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchBedDetailsNextGenCustomException" +
            "Fault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchBedDetails(string Type, string Filter, int UserId, int WstationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchBedDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchBedDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchBedDetailsAsync(string Type, string Filter, int UserId, int WstationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchTitleRule", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchTitleRulesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchTitleRulesNextGenCustomException" +
            "Fault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchTitleRules(string Type, string Filter, int UserId, int WstationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchTitleRule", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchTitleRulesResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchTitleRulesAsync(string Type, string Filter, int UserId, int WstationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchTitleRulesTagID", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchTitleRulesTagIDResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchTitleRulesTagIDNextGenCustomExce" +
            "ptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchTitleRulesTagID(string Type, string Filter, int UserId, int WstationId, int intError, int tagId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchTitleRulesTagID", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchTitleRulesTagIDResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchTitleRulesTagIDAsync(string Type, string Filter, int UserId, int WstationId, int intError, int tagId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchRefInstDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchRefInstDetailsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchRefInstDetailsNextGenCustomExcep" +
            "tionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchRefInstDetails(string Type, string Filter, int UserId, int WstationId, int intError, int tagID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchRefInstDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchRefInstDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchRefInstDetailsAsync(string Type, string Filter, int UserId, int WstationId, int intError, int tagID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchAllPackagesPrice", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchAllPackagesPriceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchAllPackagesPriceNextGenCustomExc" +
            "eptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchAllPackagesPrice(int intSerID, int intPkgID, string strHospID, string strTariffID, string strBdID, string strOrdrID, int intTblID, int intUserid, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchAllPackagesPrice", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchAllPackagesPriceResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchAllPackagesPriceAsync(int intSerID, int intPkgID, string strHospID, string strTariffID, string strBdID, string strOrdrID, int intTblID, int intUserid, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchHospitalTariffDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchHospitalTariffDetailsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchHospitalTariffDetailsNextGenCust" +
            "omExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchHospitalTariffDetails(int TariffId, string Filter, int FetatureId, int FunctionId, string CallContext, int UserId, int WstationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchHospitalTariffDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchHospitalTariffDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchHospitalTariffDetailsAsync(int TariffId, string Filter, int FetatureId, int FunctionId, string CallContext, int UserId, int WstationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/GetHospitalTariffDetailsTagID", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetHospitalTariffDetailsTagIDResponse" +
            "")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/GetHospitalTariffDetailsTagIDNextGenC" +
            "ustomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet GetHospitalTariffDetailsTagID(int TariffId, string Filter, int FetatureId, int FunctionId, string CallContext, int UserId, int WstationId, int intError, int TagId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/GetHospitalTariffDetailsTagID", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetHospitalTariffDetailsTagIDResponse" +
            "")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetHospitalTariffDetailsTagIDAsync(int TariffId, string Filter, int FetatureId, int FunctionId, string CallContext, int UserId, int WstationId, int intError, int TagId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SaveTitleRules", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveTitleRulesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/SaveTitleRulesNextGenCustomExceptionF" +
            "ault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        int SaveTitleRules(System.Data.DataSet dsTitleRules);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SaveTitleRules", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveTitleRulesResponse")]
        System.Threading.Tasks.Task<int> SaveTitleRulesAsync(System.Data.DataSet dsTitleRules);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SaveStateMaster", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveStateMasterResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/SaveStateMasterNextGenCustomException" +
            "Fault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        long SaveStateMaster(System.Data.DataSet dsStateMaster, byte IsInsert);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SaveStateMaster", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveStateMasterResponse")]
        System.Threading.Tasks.Task<long> SaveStateMasterAsync(System.Data.DataSet dsStateMaster, byte IsInsert);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SaveReferralDoctorMaster", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveReferralDoctorMasterResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/SaveReferralDoctorMasterNextGenCustom" +
            "ExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        long SaveReferralDoctorMaster(System.Data.DataSet dsReferralDoctorMaster, byte IsInsert);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SaveReferralDoctorMaster", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveReferralDoctorMasterResponse")]
        System.Threading.Tasks.Task<long> SaveReferralDoctorMasterAsync(System.Data.DataSet dsReferralDoctorMaster, byte IsInsert);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SaveReasonMaster", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveReasonMasterResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/SaveReasonMasterNextGenCustomExceptio" +
            "nFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        long SaveReasonMaster(System.Data.DataSet dsReasonMaster, byte IsInsert);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SaveReasonMaster", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveReasonMasterResponse")]
        System.Threading.Tasks.Task<long> SaveReasonMasterAsync(System.Data.DataSet dsReasonMaster, byte IsInsert);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SaveCityMaster", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveCityMasterResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/SaveCityMasterNextGenCustomExceptionF" +
            "ault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        long SaveCityMaster(System.Data.DataSet dsCityMaster, byte IsInsert);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SaveCityMaster", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveCityMasterResponse")]
        System.Threading.Tasks.Task<long> SaveCityMasterAsync(System.Data.DataSet dsCityMaster, byte IsInsert);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SaveDataBankMaster", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveDataBankMasterResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/SaveDataBankMasterNextGenCustomExcept" +
            "ionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        bool SaveDataBankMaster(System.Data.DataSet dsDataBankMaster, byte IsInsert);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SaveDataBankMaster", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveDataBankMasterResponse")]
        System.Threading.Tasks.Task<bool> SaveDataBankMasterAsync(System.Data.DataSet dsDataBankMaster, byte IsInsert);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SaveConsultationTypeMaster", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveConsultationTypeMasterResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/SaveConsultationTypeMasterNextGenCust" +
            "omExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        long SaveConsultationTypeMaster(System.Data.DataSet dsConsTypeMaster, byte IsInsert);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SaveConsultationTypeMaster", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveConsultationTypeMasterResponse")]
        System.Threading.Tasks.Task<long> SaveConsultationTypeMasterAsync(System.Data.DataSet dsConsTypeMaster, byte IsInsert);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SaveDatabankType", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveDatabankTypeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/SaveDatabankTypeNextGenCustomExceptio" +
            "nFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        bool SaveDatabankType(int intUserId, int intWorkStationId, int intError, System.Data.DataSet dsDatabankType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SaveDatabankType", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveDatabankTypeResponse")]
        System.Threading.Tasks.Task<bool> SaveDatabankTypeAsync(int intUserId, int intWorkStationId, int intError, System.Data.DataSet dsDatabankType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/BlockMasters", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/BlockMastersResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/BlockMastersNextGenCustomExceptionFau" +
            "lt", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        bool BlockMasters(int intTableId, int intSPId, string strFieldName, int intId, bool blnRevert, int intFeatureId, int intFuntionID, string strCallContext, int intUserId, int intWorkStationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/BlockMasters", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/BlockMastersResponse")]
        System.Threading.Tasks.Task<bool> BlockMastersAsync(int intTableId, int intSPId, string strFieldName, int intId, bool blnRevert, int intFeatureId, int intFuntionID, string strCallContext, int intUserId, int intWorkStationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SaveAreaMaster", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveAreaMasterResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/SaveAreaMasterNextGenCustomExceptionF" +
            "ault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        long SaveAreaMaster(System.Data.DataSet dsAreaMaster, byte IsInsert);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SaveAreaMaster", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveAreaMasterResponse")]
        System.Threading.Tasks.Task<long> SaveAreaMasterAsync(System.Data.DataSet dsAreaMaster, byte IsInsert);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SaveReferenceCodes", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveReferenceCodesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/SaveReferenceCodesNextGenCustomExcept" +
            "ionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        bool SaveReferenceCodes(System.Data.DataSet dsdata, int intTariffId, int intFeatureId, int intFunctionId, string strCallContext, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SaveReferenceCodes", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveReferenceCodesResponse")]
        System.Threading.Tasks.Task<bool> SaveReferenceCodesAsync(System.Data.DataSet dsdata, int intTariffId, int intFeatureId, int intFunctionId, string strCallContext, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/WSGetPackageDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/WSGetPackageDetailsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/WSGetPackageDetailsNextGenCustomExcep" +
            "tionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet WSGetPackageDetails(int intPackageID, int intUserId, int intWorkStationId, int intError, int intLanguageID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/WSGetPackageDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/WSGetPackageDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> WSGetPackageDetailsAsync(int intPackageID, int intUserId, int intWorkStationId, int intError, int intLanguageID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SaveTitle", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveTitleResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/SaveTitleNextGenCustomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        long SaveTitle(System.Data.DataSet dsTitle, byte IsInsert);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SaveTitle", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SaveTitleResponse")]
        System.Threading.Tasks.Task<long> SaveTitleAsync(System.Data.DataSet dsTitle, byte IsInsert);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/GetPatientADVProcedure", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetPatientADVProcedureResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/GetPatientADVProcedureNextGenCustomEx" +
            "ceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet GetPatientADVProcedure(string ProcedureName, string Type, string Filter, int UserId, int WstationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/GetPatientADVProcedure", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetPatientADVProcedureResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetPatientADVProcedureAsync(string ProcedureName, string Type, string Filter, int UserId, int WstationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchPostalAddress", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchPostalAddressResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchPostalAddressNextGenCustomExcept" +
            "ionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchPostalAddress(string strSelect, string strFilter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/ServiceContract1/FetchPostalAddress", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchPostalAddressResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchPostalAddressAsync(string strSelect, string strFilter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SavePatientDictionaryMaster", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SavePatientDictionaryMasterResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/SavePatientDictionaryMasterNextGenCus" +
            "tomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        bool SavePatientDictionaryMaster(System.Data.DataSet dsPatientDictionary);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/SavePatientDictionaryMaster", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/SavePatientDictionaryMasterResponse")]
        System.Threading.Tasks.Task<bool> SavePatientDictionaryMasterAsync(System.Data.DataSet dsPatientDictionary);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/GetTestProfileSpecimen", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetTestProfileSpecimenResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/GetTestProfileSpecimenNextGenCustomEx" +
            "ceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet GetTestProfileSpecimen(int intProfileId, int intOrderTypeID, int intTableId, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/GetTestProfileSpecimen", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetTestProfileSpecimenResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetTestProfileSpecimenAsync(int intProfileId, int intOrderTypeID, int intTableId, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchPriceDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchPriceDetailsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchPriceDetailsNextGenCustomExcepti" +
            "onFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchPriceDetails(int ServiceId, int ItemId, int TariffId, int BillType, int Priority, int SpecialisationId, string BedtypeId, int iUserId, int iWstationId, int iError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchPriceDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchPriceDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchPriceDetailsAsync(int ServiceId, int ItemId, int TariffId, int BillType, int Priority, int SpecialisationId, string BedtypeId, int iUserId, int iWstationId, int iError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchPriceDetailsDt", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchPriceDetailsDtResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchPriceDetailsDtNextGenCustomExcep" +
            "tionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchPriceDetailsDt(System.Data.DataTable dt);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchPriceDetailsDt", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchPriceDetailsDtResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchPriceDetailsDtAsync(System.Data.DataTable dt);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchPriceDetailsDtNew", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchPriceDetailsDtNewResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchPriceDetailsDtNewNextGenCustomEx" +
            "ceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchPriceDetailsDtNew(System.Data.DataTable dt);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchPriceDetailsDtNew", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchPriceDetailsDtNewResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchPriceDetailsDtNewAsync(System.Data.DataTable dt);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchPriceDetailsWithProfCharge", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchPriceDetailsWithProfChargeRespon" +
            "se")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchPriceDetailsWithProfChargeNextGe" +
            "nCustomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchPriceDetailsWithProfCharge(int ServiceId, int ItemId, int TariffId, int BillType, int Priority, int SpecialisationId, string BedtypeId, int iUserId, int iWstationId, int iError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchPriceDetailsWithProfCharge", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchPriceDetailsWithProfChargeRespon" +
            "se")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchPriceDetailsWithProfChargeAsync(int ServiceId, int ItemId, int TariffId, int BillType, int Priority, int SpecialisationId, string BedtypeId, int iUserId, int iWstationId, int iError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchPriceDetailsNew", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchPriceDetailsNewResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchPriceDetailsNewNextGenCustomExce" +
            "ptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchPriceDetailsNew(int ServiceId, int ItemId, int TariffId, int BillType, int Priority, int SpecialisationId, string BedtypeId, int iUserId, int iWstationId, int iError, int type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchPriceDetailsNew", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchPriceDetailsNewResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchPriceDetailsNewAsync(int ServiceId, int ItemId, int TariffId, int BillType, int Priority, int SpecialisationId, string BedtypeId, int iUserId, int iWstationId, int iError, int type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchServices", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchServicesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchServicesNextGenCustomExceptionFa" +
            "ult", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchServices(int intTableId, string strFilter, int IntUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchServices", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchServicesResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchServicesAsync(int intTableId, string strFilter, int IntUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchOrderTypes", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchOrderTypesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchOrderTypesNextGenCustomException" +
            "Fault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchOrderTypes(int intTableId, string strFilter, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchOrderTypes", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchOrderTypesResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchOrderTypesAsync(int intTableId, string strFilter, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchPackageItems", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchPackageItemsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchPackageItemsNextGenCustomExcepti" +
            "onFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchPackageItems(int intPackageId, int intTableId, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchPackageItems", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchPackageItemsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchPackageItemsAsync(int intPackageId, int intTableId, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchDepositDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchDepositDetailsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchDepositDetailsNextGenCustomExcep" +
            "tionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchDepositDetails(int IntPatientId, int IntUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchDepositDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchDepositDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchDepositDetailsAsync(int IntPatientId, int IntUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchDepositDetailsTagID", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchDepositDetailsTagIDResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchDepositDetailsTagIDNextGenCustom" +
            "ExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchDepositDetailsTagID(int IntPatientId, int IntUserId, int intWorkStationId, int intError, int inttagId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchDepositDetailsTagID", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchDepositDetailsTagIDResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchDepositDetailsTagIDAsync(int IntPatientId, int IntUserId, int intWorkStationId, int intError, int inttagId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchReceiptDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchReceiptDetailsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchReceiptDetailsNextGenCustomExcep" +
            "tionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchReceiptDetails(string strBillNo, int IntReceiptType, int IntUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchReceiptDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchReceiptDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchReceiptDetailsAsync(string strBillNo, int IntReceiptType, int IntUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchReceiptDetailsLangID", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchReceiptDetailsLangIDResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchReceiptDetailsLangIDNextGenCusto" +
            "mExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchReceiptDetailsLangID(string strBillNo, int IntReceiptType, int IntUserId, int intWorkStationId, int intError, int intLanguageID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchReceiptDetailsLangID", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchReceiptDetailsLangIDResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchReceiptDetailsLangIDAsync(string strBillNo, int IntReceiptType, int IntUserId, int intWorkStationId, int intError, int intLanguageID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchReceiptDetailsperf", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchReceiptDetailsperfResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchReceiptDetailsperfNextGenCustomE" +
            "xceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchReceiptDetailsperf(string strBillNo, int IntReceiptType, int IntUserId, int intWorkStationId, int intError, int intLanguageID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchReceiptDetailsperf", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchReceiptDetailsperfResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchReceiptDetailsperfAsync(string strBillNo, int IntReceiptType, int IntUserId, int intWorkStationId, int intError, int intLanguageID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchBillDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchBillDetailsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchBillDetailsNextGenCustomExceptio" +
            "nFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchBillDetails(string strBillNo, int IntUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchBillDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchBillDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchBillDetailsAsync(string strBillNo, int IntUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchBillDetailsTagID", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchBillDetailsTagIDResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchBillDetailsTagIDNextGenCustomExc" +
            "eptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchBillDetailsTagID(string strBillNo, int IntUserId, int intWorkStationId, int intError, int tagid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchBillDetailsTagID", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchBillDetailsTagIDResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchBillDetailsTagIDAsync(string strBillNo, int IntUserId, int intWorkStationId, int intError, int tagid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchTariffDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchTariffDetailsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchTariffDetailsNextGenCustomExcept" +
            "ionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchTariffDetails(int TariffID, int intUserID, int intWorkStationID, int intError, int GradeID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchTariffDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchTariffDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchTariffDetailsAsync(int TariffID, int intUserID, int intWorkStationID, int intError, int GradeID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchCompanyDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchCompanyDetailsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchCompanyDetailsNextGenCustomExcep" +
            "tionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchCompanyDetails(int CompanyID, string CompanyType, string Tables, int intUserID, int intWorkStationID, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchCompanyDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchCompanyDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchCompanyDetailsAsync(int CompanyID, string CompanyType, string Tables, int intUserID, int intWorkStationID, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchHospitalCompanyDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchHospitalCompanyDetailsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchHospitalCompanyDetailsNextGenCus" +
            "tomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchHospitalCompanyDetails(int CompanyID, string CompanyType, string Tables, int intUserID, int intWorkStationID, int intError, int HospitalID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchHospitalCompanyDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchHospitalCompanyDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchHospitalCompanyDetailsAsync(int CompanyID, string CompanyType, string Tables, int intUserID, int intWorkStationID, int intError, int HospitalID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchHospitalCompanyDetailsMODA", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchHospitalCompanyDetailsMODARespon" +
            "se")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchHospitalCompanyDetailsMODANextGe" +
            "nCustomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchHospitalCompanyDetailsMODA(int CompanyID, string CompanyType, string Tables, int intUserID, int intWorkStationID, int intError, int HospitalID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchHospitalCompanyDetailsMODA", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchHospitalCompanyDetailsMODARespon" +
            "se")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchHospitalCompanyDetailsMODAAsync(int CompanyID, string CompanyType, string Tables, int intUserID, int intWorkStationID, int intError, int HospitalID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchLetterDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchLetterDetailsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchLetterDetailsNextGenCustomExcept" +
            "ionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchLetterDetails(int intLetterId, int intLevel, string strTableId, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchLetterDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchLetterDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchLetterDetailsAsync(int intLetterId, int intLevel, string strTableId, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchHospitalLetterDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchHospitalLetterDetailsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchHospitalLetterDetailsNextGenCust" +
            "omExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchHospitalLetterDetails(int intLetterId, int intLevel, string strTableId, int intUserId, int intWorkStationId, int intError, int HospitalID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchHospitalLetterDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchHospitalLetterDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchHospitalLetterDetailsAsync(int intLetterId, int intLevel, string strTableId, int intUserId, int intWorkStationId, int intError, int HospitalID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchOtherDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchOtherDetailsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchOtherDetailsNextGenCustomExcepti" +
            "onFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchOtherDetails(int Type, string strFilter, int intUserID, int intWorkStationID, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchOtherDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchOtherDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchOtherDetailsAsync(int Type, string strFilter, int intUserID, int intWorkStationID, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchTestSpecimen", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchTestSpecimenResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchTestSpecimenNextGenCustomExcepti" +
            "onFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchTestSpecimen(int intTestId, int intTableId, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchTestSpecimen", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchTestSpecimenResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchTestSpecimenAsync(int intTestId, int intTableId, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/GetDiscountDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetDiscountDetailsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/GetDiscountDetailsNextGenCustomExcept" +
            "ionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet GetDiscountDetails(long lngBillNo, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/GetDiscountDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetDiscountDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetDiscountDetailsAsync(long lngBillNo, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchViewDiscountDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchViewDiscountDetailsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchViewDiscountDetailsNextGenCustom" +
            "ExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchViewDiscountDetails(long lngBillNo, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchViewDiscountDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchViewDiscountDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchViewDiscountDetailsAsync(long lngBillNo, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchOtherDocDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchOtherDocDetailsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchOtherDocDetailsNextGenCustomExce" +
            "ptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchOtherDocDetails(int PatientId, int PatientType, int intUserID, int intWorkStationID, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchOtherDocDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchOtherDocDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchOtherDocDetailsAsync(int PatientId, int PatientType, int intUserID, int intWorkStationID, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchBloodBankDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchBloodBankDetailsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchBloodBankDetailsNextGenCustomExc" +
            "eptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchBloodBankDetails(int PatientId, int PatientType, int IPID, string TableID, int intUserID, int intWorkStationID, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchBloodBankDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchBloodBankDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchBloodBankDetailsAsync(int PatientId, int PatientType, int IPID, string TableID, int intUserID, int intWorkStationID, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchPatientallerts", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchPatientallertsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchPatientallertsNextGenCustomExcep" +
            "tionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchPatientallerts(int PatientID, int AdmissionID, int AlertTypeID, string strTbl, int intUserID, int intWorkstnID);
        
        [System.ServiceModel.OperationContractAttribute(Action="FetchPatientallerts", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchPatientallertsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchPatientallertsAsync(int PatientID, int AdmissionID, int AlertTypeID, string strTbl, int intUserID, int intWorkstnID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchDoctorsByFilter", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchDoctorsByFilterResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchDoctorsByFilterNextGenCustomExce" +
            "ptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchDoctorsByFilter(int intTableId, string strFilter, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchDoctorsByFilter", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchDoctorsByFilterResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchDoctorsByFilterAsync(int intTableId, string strFilter, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchAccountBooks", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchAccountBooksResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchAccountBooksNextGenCustomExcepti" +
            "onFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchAccountBooks(string strType, string strFilter, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchAccountBooks", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchAccountBooksResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchAccountBooksAsync(string strType, string strFilter, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchServiceItems", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchServiceItemsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchServiceItemsNextGenCustomExcepti" +
            "onFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchServiceItems(int intServiceId, int intHospId, int intTariffId, int intBedTypeId, int intOrderTypeId, int intTableId, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchServiceItems", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchServiceItemsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchServiceItemsAsync(int intServiceId, int intHospId, int intTariffId, int intBedTypeId, int intOrderTypeId, int intTableId, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchTest", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchTestResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchTestNextGenCustomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchTest(int intTestId, int intTableId, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchTest", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchTestResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchTestAsync(int intTestId, int intTableId, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchDependencyDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchDependencyDetailsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchDependencyDetailsNextGenCustomEx" +
            "ceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchDependencyDetails(int intTariffID, int intTable, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchDependencyDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchDependencyDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchDependencyDetailsAsync(int intTariffID, int intTable, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchDayCareServiceDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchDayCareServiceDetailsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchDayCareServiceDetailsNextGenCust" +
            "omExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchDayCareServiceDetails(long lngIPID, int intDefTariffID, int intTariffID, int intEBedType, int intLoacationID, string strDischargeDateTime, int intServiceID, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchDayCareServiceDetails", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchDayCareServiceDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchDayCareServiceDetailsAsync(long lngIPID, int intDefTariffID, int intTariffID, int intEBedType, int intLoacationID, string strDischargeDateTime, int intServiceID, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchFlatServices", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchFlatServicesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchFlatServicesNextGenCustomExcepti" +
            "onFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchFlatServices(int intPatientId, int intTable, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchFlatServices", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchFlatServicesResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchFlatServicesAsync(int intPatientId, int intTable, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/GetServiceType", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetServiceTypeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/GetServiceTypeNextGenCustomExceptionF" +
            "ault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        int GetServiceType(string strServiceType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/GetServiceType", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/GetServiceTypeResponse")]
        System.Threading.Tasks.Task<int> GetServiceTypeAsync(string strServiceType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchPackage", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchPackageResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchPackageNextGenCustomExceptionFau" +
            "lt", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchPackage(long lngPackageId, int intId, int intLevel, string strTableId, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchPackage", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchPackageResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchPackageAsync(long lngPackageId, int intId, int intLevel, string strTableId, int intUserId, int intWorkStationId, int intError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchRegConfiguration", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchRegConfigurationResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.FrontOfficeServiceClient.NextGenCustomException), Action="http://Wipro.NXG/FrontOfficeServiceContract/FetchRegConfigurationNextGenCustomExc" +
            "eptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet FetchRegConfiguration(int Type, int Result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Wipro.NXG/RegistrationServiceContract/FetchRegConfiguration", ReplyAction="http://Wipro.NXG/FrontOfficeServiceContract/FetchRegConfigurationResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchRegConfigurationAsync(int Type, int Result);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SetBillDetailsNew", WrapperNamespace="http://Wipro.NXG", IsWrapped=true)]
    public partial class SetBillDetailsNewRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://Wipro.NXG", Order=0)]
        public System.Data.DataSet dsBillDetails;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://Wipro.NXG", Order=1)]
        public int IntUserId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://Wipro.NXG", Order=2)]
        public int intWorkStationId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://Wipro.NXG", Order=3)]
        public int intError;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://Wipro.NXG", Order=4)]
        public int LangID;
        
        public SetBillDetailsNewRequest() {
        }
        
        public SetBillDetailsNewRequest(System.Data.DataSet dsBillDetails, int IntUserId, int intWorkStationId, int intError, int LangID) {
            this.dsBillDetails = dsBillDetails;
            this.IntUserId = IntUserId;
            this.intWorkStationId = intWorkStationId;
            this.intError = intError;
            this.LangID = LangID;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SetBillDetailsNewResponse", WrapperNamespace="http://Wipro.NXG", IsWrapped=true)]
    public partial class SetBillDetailsNewResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://Wipro.NXG", Order=0)]
        public System.Data.DataSet SetBillDetailsNewResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://Wipro.NXG", Order=1)]
        public string strValue;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://Wipro.NXG", Order=2)]
        public string StrClinical;
        
        public SetBillDetailsNewResponse() {
        }
        
        public SetBillDetailsNewResponse(System.Data.DataSet SetBillDetailsNewResult, string strValue, string StrClinical) {
            this.SetBillDetailsNewResult = SetBillDetailsNewResult;
            this.strValue = strValue;
            this.StrClinical = StrClinical;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface FrontOfficeServiceContractChannel : Reports.FrontOfficeServiceClient.FrontOfficeServiceContract, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FrontOfficeServiceContractClient : System.ServiceModel.ClientBase<Reports.FrontOfficeServiceClient.FrontOfficeServiceContract>, Reports.FrontOfficeServiceClient.FrontOfficeServiceContract {
        
        public FrontOfficeServiceContractClient() {
        }
        
        public FrontOfficeServiceContractClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FrontOfficeServiceContractClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FrontOfficeServiceContractClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FrontOfficeServiceContractClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Data.DataSet FetchtBandPrintingCount(int AdmissionID) {
            return base.Channel.FetchtBandPrintingCount(AdmissionID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchtBandPrintingCountAsync(int AdmissionID) {
            return base.Channel.FetchtBandPrintingCountAsync(AdmissionID);
        }
        
        public string SavePatientBandPrintingHistory(System.Data.DataSet dsBandPrinting) {
            return base.Channel.SavePatientBandPrintingHistory(dsBandPrinting);
        }
        
        public System.Threading.Tasks.Task<string> SavePatientBandPrintingHistoryAsync(System.Data.DataSet dsBandPrinting) {
            return base.Channel.SavePatientBandPrintingHistoryAsync(dsBandPrinting);
        }
        
        public bool SaveCorporatehealthCheckUpDetails(int CorporateHealthCheckUpId, System.Data.DataSet dsEmployeeDetails, int HosiptalId, int userId, int workstationId) {
            return base.Channel.SaveCorporatehealthCheckUpDetails(CorporateHealthCheckUpId, dsEmployeeDetails, HosiptalId, userId, workstationId);
        }
        
        public System.Threading.Tasks.Task<bool> SaveCorporatehealthCheckUpDetailsAsync(int CorporateHealthCheckUpId, System.Data.DataSet dsEmployeeDetails, int HosiptalId, int userId, int workstationId) {
            return base.Channel.SaveCorporatehealthCheckUpDetailsAsync(CorporateHealthCheckUpId, dsEmployeeDetails, HosiptalId, userId, workstationId);
        }
        
        public string SaveServicePatientGroupBill(int titleId, string firstname, string middlename, string lastname, int genderId, int age, int AgeUoMID, int doctorId, string companyId, decimal amount, string sessionId, int workstationId, int intuserId, int hospitalId, System.Data.DataTable dtPackage) {
            return base.Channel.SaveServicePatientGroupBill(titleId, firstname, middlename, lastname, genderId, age, AgeUoMID, doctorId, companyId, amount, sessionId, workstationId, intuserId, hospitalId, dtPackage);
        }
        
        public System.Threading.Tasks.Task<string> SaveServicePatientGroupBillAsync(int titleId, string firstname, string middlename, string lastname, int genderId, int age, int AgeUoMID, int doctorId, string companyId, decimal amount, string sessionId, int workstationId, int intuserId, int hospitalId, System.Data.DataTable dtPackage) {
            return base.Channel.SaveServicePatientGroupBillAsync(titleId, firstname, middlename, lastname, genderId, age, AgeUoMID, doctorId, companyId, amount, sessionId, workstationId, intuserId, hospitalId, dtPackage);
        }
        
        public System.Data.DataSet GetCorporatehealthCheckUpDetails(int CorporateHealthCheckUpId, int companyId, string FromDate, string ToDate, int userId, int workstationId) {
            return base.Channel.GetCorporatehealthCheckUpDetails(CorporateHealthCheckUpId, companyId, FromDate, ToDate, userId, workstationId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetCorporatehealthCheckUpDetailsAsync(int CorporateHealthCheckUpId, int companyId, string FromDate, string ToDate, int userId, int workstationId) {
            return base.Channel.GetCorporatehealthCheckUpDetailsAsync(CorporateHealthCheckUpId, companyId, FromDate, ToDate, userId, workstationId);
        }
        
        public bool UpdateCorporateCheckUpDetails(int CorporateHealthCheckUpDetailId, int billNo, int userId, int workstationId) {
            return base.Channel.UpdateCorporateCheckUpDetails(CorporateHealthCheckUpDetailId, billNo, userId, workstationId);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateCorporateCheckUpDetailsAsync(int CorporateHealthCheckUpDetailId, int billNo, int userId, int workstationId) {
            return base.Channel.UpdateCorporateCheckUpDetailsAsync(CorporateHealthCheckUpDetailId, billNo, userId, workstationId);
        }
        
        public int DeleteDoctorSessions(int intConfigId, int intDocId, int intUserId, int intWorkStationId, int intHospId) {
            return base.Channel.DeleteDoctorSessions(intConfigId, intDocId, intUserId, intWorkStationId, intHospId);
        }
        
        public System.Threading.Tasks.Task<int> DeleteDoctorSessionsAsync(int intConfigId, int intDocId, int intUserId, int intWorkStationId, int intHospId) {
            return base.Channel.DeleteDoctorSessionsAsync(intConfigId, intDocId, intUserId, intWorkStationId, intHospId);
        }
        
        public int SaveDoctorSessionsExtend(string strConfigId, int intDocId, string strToDateTime, int intUserId, int intWorkStationId, int intHospId) {
            return base.Channel.SaveDoctorSessionsExtend(strConfigId, intDocId, strToDateTime, intUserId, intWorkStationId, intHospId);
        }
        
        public System.Threading.Tasks.Task<int> SaveDoctorSessionsExtendAsync(string strConfigId, int intDocId, string strToDateTime, int intUserId, int intWorkStationId, int intHospId) {
            return base.Channel.SaveDoctorSessionsExtendAsync(strConfigId, intDocId, strToDateTime, intUserId, intWorkStationId, intHospId);
        }
        
        public int SaveDoctorSessionsCopy(string strConfigId, int intFromDocId, int intToDocId, int intUserId, int intWorkStationId, int intHospId) {
            return base.Channel.SaveDoctorSessionsCopy(strConfigId, intFromDocId, intToDocId, intUserId, intWorkStationId, intHospId);
        }
        
        public System.Threading.Tasks.Task<int> SaveDoctorSessionsCopyAsync(string strConfigId, int intFromDocId, int intToDocId, int intUserId, int intWorkStationId, int intHospId) {
            return base.Channel.SaveDoctorSessionsCopyAsync(strConfigId, intFromDocId, intToDocId, intUserId, intWorkStationId, intHospId);
        }
        
        public System.Data.DataSet FetchPatientDetailsUCAF(string strPatId, string strRegCode, bool BlnDeleted, int intUserId, int intWorkStnId, int intError, byte IsReg, int LanguageID) {
            return base.Channel.FetchPatientDetailsUCAF(strPatId, strRegCode, BlnDeleted, intUserId, intWorkStnId, intError, IsReg, LanguageID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchPatientDetailsUCAFAsync(string strPatId, string strRegCode, bool BlnDeleted, int intUserId, int intWorkStnId, int intError, byte IsReg, int LanguageID) {
            return base.Channel.FetchPatientDetailsUCAFAsync(strPatId, strRegCode, BlnDeleted, intUserId, intWorkStnId, intError, IsReg, LanguageID);
        }
        
        public System.Data.DataSet GetHospitalEmployees(int intHospitalId, int intUserID, int intWorkStID, int IsMedical, int MedicalType, int intError, int intLanguageID) {
            return base.Channel.GetHospitalEmployees(intHospitalId, intUserID, intWorkStID, IsMedical, MedicalType, intError, intLanguageID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetHospitalEmployeesAsync(int intHospitalId, int intUserID, int intWorkStID, int IsMedical, int MedicalType, int intError, int intLanguageID) {
            return base.Channel.GetHospitalEmployeesAsync(intHospitalId, intUserID, intWorkStID, IsMedical, MedicalType, intError, intLanguageID);
        }
        
        public int SavePatientMobileNo(int PatientID, string MobileNumber) {
            return base.Channel.SavePatientMobileNo(PatientID, MobileNumber);
        }
        
        public System.Threading.Tasks.Task<int> SavePatientMobileNoAsync(int PatientID, string MobileNumber) {
            return base.Channel.SavePatientMobileNoAsync(PatientID, MobileNumber);
        }
        
        public System.Data.DataSet FetchFeatureAuthenticatedUsers(int intUserId, int intWorkStationId) {
            return base.Channel.FetchFeatureAuthenticatedUsers(intUserId, intWorkStationId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchFeatureAuthenticatedUsersAsync(int intUserId, int intWorkStationId) {
            return base.Channel.FetchFeatureAuthenticatedUsersAsync(intUserId, intWorkStationId);
        }
        
        public System.Data.DataSet FetchDiscount(int Tbl, string name, int langid, int param1, int param2, string param3) {
            return base.Channel.FetchDiscount(Tbl, name, langid, param1, param2, param3);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchDiscountAsync(int Tbl, string name, int langid, int param1, int param2, string param3) {
            return base.Channel.FetchDiscountAsync(Tbl, name, langid, param1, param2, param3);
        }
        
        public System.Data.DataSet FetchServicesMODA(int intTableId, string strFilter, int IntUserId, int intWorkStationId, int intError) {
            return base.Channel.FetchServicesMODA(intTableId, strFilter, IntUserId, intWorkStationId, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchServicesMODAAsync(int intTableId, string strFilter, int IntUserId, int intWorkStationId, int intError) {
            return base.Channel.FetchServicesMODAAsync(intTableId, strFilter, IntUserId, intWorkStationId, intError);
        }
        
        public System.Data.DataSet GetSpecializationConfigMODA(int intType, int intResult, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.GetSpecializationConfigMODA(intType, intResult, intUserId, intWorkStationId, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetSpecializationConfigMODAAsync(int intType, int intResult, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.GetSpecializationConfigMODAAsync(intType, intResult, intUserId, intWorkStationId, intError);
        }
        
        public System.Data.DataSet FetchPinBlockMODA(int intType, string strFilter, int intUserID, int intWorkStationID, int intError) {
            return base.Channel.FetchPinBlockMODA(intType, strFilter, intUserID, intWorkStationID, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchPinBlockMODAAsync(int intType, string strFilter, int intUserID, int intWorkStationID, int intError) {
            return base.Channel.FetchPinBlockMODAAsync(intType, strFilter, intUserID, intWorkStationID, intError);
        }
        
        public System.Data.DataSet FetchPatientDetailsMODA(string strPatId, string strRegCode, bool BlnDeleted, int intUserId, int intWorkStnId, int intError, byte IsReg) {
            return base.Channel.FetchPatientDetailsMODA(strPatId, strRegCode, BlnDeleted, intUserId, intWorkStnId, intError, IsReg);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchPatientDetailsMODAAsync(string strPatId, string strRegCode, bool BlnDeleted, int intUserId, int intWorkStnId, int intError, byte IsReg) {
            return base.Channel.FetchPatientDetailsMODAAsync(strPatId, strRegCode, BlnDeleted, intUserId, intWorkStnId, intError, IsReg);
        }
        
        public System.Data.DataSet GetSchedulerConfigurationsMODA(int intHospitalID, string Filter, int intUserID, int intWorkStationID, int intError, string strOrder) {
            return base.Channel.GetSchedulerConfigurationsMODA(intHospitalID, Filter, intUserID, intWorkStationID, intError, strOrder);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetSchedulerConfigurationsMODAAsync(int intHospitalID, string Filter, int intUserID, int intWorkStationID, int intError, string strOrder) {
            return base.Channel.GetSchedulerConfigurationsMODAAsync(intHospitalID, Filter, intUserID, intWorkStationID, intError, strOrder);
        }
        
        public string SaveClinicRoomMap(int ClinicID, string ClinicName, string ClinicName2L, int Blocked, int Hospitalid, int intUserId, int Status, int intWorkStationId, int Error, int intFeatureId, int intFunctionId, string strCallContext) {
            return base.Channel.SaveClinicRoomMap(ClinicID, ClinicName, ClinicName2L, Blocked, Hospitalid, intUserId, Status, intWorkStationId, Error, intFeatureId, intFunctionId, strCallContext);
        }
        
        public System.Threading.Tasks.Task<string> SaveClinicRoomMapAsync(int ClinicID, string ClinicName, string ClinicName2L, int Blocked, int Hospitalid, int intUserId, int Status, int intWorkStationId, int Error, int intFeatureId, int intFunctionId, string strCallContext) {
            return base.Channel.SaveClinicRoomMapAsync(ClinicID, ClinicName, ClinicName2L, Blocked, Hospitalid, intUserId, Status, intWorkStationId, Error, intFeatureId, intFunctionId, strCallContext);
        }
        
        public string SaveRoomMap(int ClinicRoomID, int ClinicID, string ClinicRoomName, string ClinicRoomName2L, int Blocked, int Hospitalid, int intUserId, int Status, int intWorkStationId, int Error, int intFeatureId, int intFunctionId, string strCallContext) {
            return base.Channel.SaveRoomMap(ClinicRoomID, ClinicID, ClinicRoomName, ClinicRoomName2L, Blocked, Hospitalid, intUserId, Status, intWorkStationId, Error, intFeatureId, intFunctionId, strCallContext);
        }
        
        public System.Threading.Tasks.Task<string> SaveRoomMapAsync(int ClinicRoomID, int ClinicID, string ClinicRoomName, string ClinicRoomName2L, int Blocked, int Hospitalid, int intUserId, int Status, int intWorkStationId, int Error, int intFeatureId, int intFunctionId, string strCallContext) {
            return base.Channel.SaveRoomMapAsync(ClinicRoomID, ClinicID, ClinicRoomName, ClinicRoomName2L, Blocked, Hospitalid, intUserId, Status, intWorkStationId, Error, intFeatureId, intFunctionId, strCallContext);
        }
        
        public System.Data.DataSet FetchClinicRooms(int ClinicID, int HospitalID, string Tbl, int intUserID, int intWorkStationID, int Error, int intFeatureid, int intFunctionid, string strCallContext) {
            return base.Channel.FetchClinicRooms(ClinicID, HospitalID, Tbl, intUserID, intWorkStationID, Error, intFeatureid, intFunctionid, strCallContext);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchClinicRoomsAsync(int ClinicID, int HospitalID, string Tbl, int intUserID, int intWorkStationID, int Error, int intFeatureid, int intFunctionid, string strCallContext) {
            return base.Channel.FetchClinicRoomsAsync(ClinicID, HospitalID, Tbl, intUserID, intWorkStationID, Error, intFeatureid, intFunctionid, strCallContext);
        }
        
        public System.Data.DataSet FetchDependantPatients(string PatientEmpID, string RegCode, string tbl, int UserId, int intError, int tagid, string FamilyHeadID, string MilitaryID) {
            return base.Channel.FetchDependantPatients(PatientEmpID, RegCode, tbl, UserId, intError, tagid, FamilyHeadID, MilitaryID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchDependantPatientsAsync(string PatientEmpID, string RegCode, string tbl, int UserId, int intError, int tagid, string FamilyHeadID, string MilitaryID) {
            return base.Channel.FetchDependantPatientsAsync(PatientEmpID, RegCode, tbl, UserId, intError, tagid, FamilyHeadID, MilitaryID);
        }
        
        public bool SavePINBlock(System.Data.DataSet dsRequisition, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.SavePINBlock(dsRequisition, intUserId, intWorkStationId, intError);
        }
        
        public System.Threading.Tasks.Task<bool> SavePINBlockAsync(System.Data.DataSet dsRequisition, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.SavePINBlockAsync(dsRequisition, intUserId, intWorkStationId, intError);
        }
        
        public int SavePatientVisitOutCome(System.Data.DataSet PatientVisitOutcomeDetails, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.SavePatientVisitOutCome(PatientVisitOutcomeDetails, intUserId, intWorkStationId, intError);
        }
        
        public System.Threading.Tasks.Task<int> SavePatientVisitOutComeAsync(System.Data.DataSet PatientVisitOutcomeDetails, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.SavePatientVisitOutComeAsync(PatientVisitOutcomeDetails, intUserId, intWorkStationId, intError);
        }
        
        public System.Data.DataSet FetchOutComeDetails(System.DateTime ConsutationDate, int SpecialiseID, int HospitalID, int UserId, int WorkstationID, int intError, string strRegCode, string strDoctorCode) {
            return base.Channel.FetchOutComeDetails(ConsutationDate, SpecialiseID, HospitalID, UserId, WorkstationID, intError, strRegCode, strDoctorCode);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchOutComeDetailsAsync(System.DateTime ConsutationDate, int SpecialiseID, int HospitalID, int UserId, int WorkstationID, int intError, string strRegCode, string strDoctorCode) {
            return base.Channel.FetchOutComeDetailsAsync(ConsutationDate, SpecialiseID, HospitalID, UserId, WorkstationID, intError, strRegCode, strDoctorCode);
        }
        
        public int SaveBulkUHID(int Number, short uhidGenType, string remarks, int intUserId, int intWorkStationId, int intError, int hospitalID) {
            return base.Channel.SaveBulkUHID(Number, uhidGenType, remarks, intUserId, intWorkStationId, intError, hospitalID);
        }
        
        public System.Threading.Tasks.Task<int> SaveBulkUHIDAsync(int Number, short uhidGenType, string remarks, int intUserId, int intWorkStationId, int intError, int hospitalID) {
            return base.Channel.SaveBulkUHIDAsync(Number, uhidGenType, remarks, intUserId, intWorkStationId, intError, hospitalID);
        }
        
        public int GenerateUHID(int uhidSeq, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.GenerateUHID(uhidSeq, intUserId, intWorkStationId, intError);
        }
        
        public System.Threading.Tasks.Task<int> GenerateUHIDAsync(int uhidSeq, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.GenerateUHIDAsync(uhidSeq, intUserId, intWorkStationId, intError);
        }
        
        public System.Data.DataSet GetUHIDSequenceBlockingData(int status, int userID, int workStationID, int error) {
            return base.Channel.GetUHIDSequenceBlockingData(status, userID, workStationID, error);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetUHIDSequenceBlockingDataAsync(int status, int userID, int workStationID, int error) {
            return base.Channel.GetUHIDSequenceBlockingDataAsync(status, userID, workStationID, error);
        }
        
        public System.Data.DataSet GetClinicCodeData(string strFilter, int UserId, int WorkstationID, int intError) {
            return base.Channel.GetClinicCodeData(strFilter, UserId, WorkstationID, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetClinicCodeDataAsync(string strFilter, int UserId, int WorkstationID, int intError) {
            return base.Channel.GetClinicCodeDataAsync(strFilter, UserId, WorkstationID, intError);
        }
        
        public System.Data.DataSet GetConsultationData(string strSelect, string strFilter, int UserId, int WorkstationID, int intError, string strFromDate, string strToDate, int HospitalID) {
            return base.Channel.GetConsultationData(strSelect, strFilter, UserId, WorkstationID, intError, strFromDate, strToDate, HospitalID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetConsultationDataAsync(string strSelect, string strFilter, int UserId, int WorkstationID, int intError, string strFromDate, string strToDate, int HospitalID) {
            return base.Channel.GetConsultationDataAsync(strSelect, strFilter, UserId, WorkstationID, intError, strFromDate, strToDate, HospitalID);
        }
        
        public System.Data.DataSet GetSmartSearchResultsparamCode(string ProcedureName, int Type, string Filter, int TagID, int Param1, int Param2) {
            return base.Channel.GetSmartSearchResultsparamCode(ProcedureName, Type, Filter, TagID, Param1, Param2);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetSmartSearchResultsparamCodeAsync(string ProcedureName, int Type, string Filter, int TagID, int Param1, int Param2) {
            return base.Channel.GetSmartSearchResultsparamCodeAsync(ProcedureName, Type, Filter, TagID, Param1, Param2);
        }
        
        public System.Data.DataSet FetchSubSpecialities(int SpecialiseID, string Tbl, int UserId, int WorkstationID, int intError) {
            return base.Channel.FetchSubSpecialities(SpecialiseID, Tbl, UserId, WorkstationID, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchSubSpecialitiesAsync(int SpecialiseID, string Tbl, int UserId, int WorkstationID, int intError) {
            return base.Channel.FetchSubSpecialitiesAsync(SpecialiseID, Tbl, UserId, WorkstationID, intError);
        }
        
        public System.Data.DataSet GetDoctorsClinicCodes(int intTblID, string strFilter, int intLanguageID, int intUserID, int intWorkStationID, int intError) {
            return base.Channel.GetDoctorsClinicCodes(intTblID, strFilter, intLanguageID, intUserID, intWorkStationID, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetDoctorsClinicCodesAsync(int intTblID, string strFilter, int intLanguageID, int intUserID, int intWorkStationID, int intError) {
            return base.Channel.GetDoctorsClinicCodesAsync(intTblID, strFilter, intLanguageID, intUserID, intWorkStationID, intError);
        }
        
        public System.Data.DataSet FetchSpecilizationofDoctor(int intTblID, string strFilter, int intLanguageID, int intUserID, int intWorkStationID, int intError) {
            return base.Channel.FetchSpecilizationofDoctor(intTblID, strFilter, intLanguageID, intUserID, intWorkStationID, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchSpecilizationofDoctorAsync(int intTblID, string strFilter, int intLanguageID, int intUserID, int intWorkStationID, int intError) {
            return base.Channel.FetchSpecilizationofDoctorAsync(intTblID, strFilter, intLanguageID, intUserID, intWorkStationID, intError);
        }
        
        public System.Data.DataSet FetchPatientAllVisits(int PatientID, string TBL, int intUserId, int intWorkStationId, int hospitalID, int specializationID) {
            return base.Channel.FetchPatientAllVisits(PatientID, TBL, intUserId, intWorkStationId, hospitalID, specializationID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchPatientAllVisitsAsync(int PatientID, string TBL, int intUserId, int intWorkStationId, int hospitalID, int specializationID) {
            return base.Channel.FetchPatientAllVisitsAsync(PatientID, TBL, intUserId, intWorkStationId, hospitalID, specializationID);
        }
        
        public int SaveConsultationOrderMODA(int BillableConsultationID, int PatientId, int intRefDoctorID, int IntSpeclizationID, string strBillNo, int ActionType, int intUserID, int intWorkstationID, int intError, string strCallContext, int HospitalId) {
            return base.Channel.SaveConsultationOrderMODA(BillableConsultationID, PatientId, intRefDoctorID, IntSpeclizationID, strBillNo, ActionType, intUserID, intWorkstationID, intError, strCallContext, HospitalId);
        }
        
        public System.Threading.Tasks.Task<int> SaveConsultationOrderMODAAsync(int BillableConsultationID, int PatientId, int intRefDoctorID, int IntSpeclizationID, string strBillNo, int ActionType, int intUserID, int intWorkstationID, int intError, string strCallContext, int HospitalId) {
            return base.Channel.SaveConsultationOrderMODAAsync(BillableConsultationID, PatientId, intRefDoctorID, IntSpeclizationID, strBillNo, ActionType, intUserID, intWorkstationID, intError, strCallContext, HospitalId);
        }
        
        public string SavePatientMODA(System.Data.DataSet dsPatient) {
            return base.Channel.SavePatientMODA(dsPatient);
        }
        
        public System.Threading.Tasks.Task<string> SavePatientMODAAsync(System.Data.DataSet dsPatient) {
            return base.Channel.SavePatientMODAAsync(dsPatient);
        }
        
        public string UpdatePatientMODA(System.Data.DataSet dsPatient) {
            return base.Channel.UpdatePatientMODA(dsPatient);
        }
        
        public System.Threading.Tasks.Task<string> UpdatePatientMODAAsync(System.Data.DataSet dsPatient) {
            return base.Channel.UpdatePatientMODAAsync(dsPatient);
        }
        
        public int SaveDoctorAvaliableMODA(System.Data.DataSet objDSSave) {
            return base.Channel.SaveDoctorAvaliableMODA(objDSSave);
        }
        
        public System.Threading.Tasks.Task<int> SaveDoctorAvaliableMODAAsync(System.Data.DataSet objDSSave) {
            return base.Channel.SaveDoctorAvaliableMODAAsync(objDSSave);
        }
        
        public bool SaveIPOrders(System.Data.DataSet objDS, int intIPID, int patientID, int intConsultationID, byte bytBlocked, System.Data.DataSet objProcDS, System.Data.DataSet dsRequisition, int intUserid, int intWorkstationid) {
            return base.Channel.SaveIPOrders(objDS, intIPID, patientID, intConsultationID, bytBlocked, objProcDS, dsRequisition, intUserid, intWorkstationid);
        }
        
        public System.Threading.Tasks.Task<bool> SaveIPOrdersAsync(System.Data.DataSet objDS, int intIPID, int patientID, int intConsultationID, byte bytBlocked, System.Data.DataSet objProcDS, System.Data.DataSet dsRequisition, int intUserid, int intWorkstationid) {
            return base.Channel.SaveIPOrdersAsync(objDS, intIPID, patientID, intConsultationID, bytBlocked, objProcDS, dsRequisition, intUserid, intWorkstationid);
        }
        
        public int GetWorkFlowID(int TaskID, string WorkFlow) {
            return base.Channel.GetWorkFlowID(TaskID, WorkFlow);
        }
        
        public System.Threading.Tasks.Task<int> GetWorkFlowIDAsync(int TaskID, string WorkFlow) {
            return base.Channel.GetWorkFlowIDAsync(TaskID, WorkFlow);
        }
        
        public System.Data.DataSet GetConsultationDataMODA(string strSelect, string strFilter, int UserId, int WorkstationID, int intError) {
            return base.Channel.GetConsultationDataMODA(strSelect, strFilter, UserId, WorkstationID, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetConsultationDataMODAAsync(string strSelect, string strFilter, int UserId, int WorkstationID, int intError) {
            return base.Channel.GetConsultationDataMODAAsync(strSelect, strFilter, UserId, WorkstationID, intError);
        }
        
        public string SaveBillMODA(System.Data.DataSet dsBill, string BillPrefix, string ParentBillId) {
            return base.Channel.SaveBillMODA(dsBill, BillPrefix, ParentBillId);
        }
        
        public System.Threading.Tasks.Task<string> SaveBillMODAAsync(System.Data.DataSet dsBill, string BillPrefix, string ParentBillId) {
            return base.Channel.SaveBillMODAAsync(dsBill, BillPrefix, ParentBillId);
        }
        
        public string SaveCheckInWithClinicCode(
                    System.Data.DataSet dsChekIn, 
                    int AdmissionID, 
                    int PatientID, 
                    int HospitalID, 
                    int Investigation, 
                    int IpOpProcedures, 
                    int Pharmacy, 
                    int VisitID, 
                    int VisitType, 
                    int DoctorID, 
                    bool ISExternal, 
                    int EpisodeID, 
                    int RefDoctorID, 
                    int intFeatureId, 
                    int intFunctionId, 
                    string strCallContext, 
                    bool CheckIn, 
                    int intUserId, 
                    int intWorkStationId, 
                    int intError, 
                    System.Data.DataSet Diseasecode, 
                    int ActiveInsID, 
                    byte IsCollectablebyEmployer, 
                    byte IsDeductablebyEmployer, 
                    byte IsSupplimentarybyEmployer, 
                    byte IsExcessbyEmployer, 
                    int IsNewCheckin, 
                    int SpecialisationID, 
                    int PatientType, 
                    int BillType, 
                    int EmpClinicCodeID, 
                    int referralOrderID) {
            return base.Channel.SaveCheckInWithClinicCode(dsChekIn, AdmissionID, PatientID, HospitalID, Investigation, IpOpProcedures, Pharmacy, VisitID, VisitType, DoctorID, ISExternal, EpisodeID, RefDoctorID, intFeatureId, intFunctionId, strCallContext, CheckIn, intUserId, intWorkStationId, intError, Diseasecode, ActiveInsID, IsCollectablebyEmployer, IsDeductablebyEmployer, IsSupplimentarybyEmployer, IsExcessbyEmployer, IsNewCheckin, SpecialisationID, PatientType, BillType, EmpClinicCodeID, referralOrderID);
        }
        
        public System.Threading.Tasks.Task<string> SaveCheckInWithClinicCodeAsync(
                    System.Data.DataSet dsChekIn, 
                    int AdmissionID, 
                    int PatientID, 
                    int HospitalID, 
                    int Investigation, 
                    int IpOpProcedures, 
                    int Pharmacy, 
                    int VisitID, 
                    int VisitType, 
                    int DoctorID, 
                    bool ISExternal, 
                    int EpisodeID, 
                    int RefDoctorID, 
                    int intFeatureId, 
                    int intFunctionId, 
                    string strCallContext, 
                    bool CheckIn, 
                    int intUserId, 
                    int intWorkStationId, 
                    int intError, 
                    System.Data.DataSet Diseasecode, 
                    int ActiveInsID, 
                    byte IsCollectablebyEmployer, 
                    byte IsDeductablebyEmployer, 
                    byte IsSupplimentarybyEmployer, 
                    byte IsExcessbyEmployer, 
                    int IsNewCheckin, 
                    int SpecialisationID, 
                    int PatientType, 
                    int BillType, 
                    int EmpClinicCodeID, 
                    int referralOrderID) {
            return base.Channel.SaveCheckInWithClinicCodeAsync(dsChekIn, AdmissionID, PatientID, HospitalID, Investigation, IpOpProcedures, Pharmacy, VisitID, VisitType, DoctorID, ISExternal, EpisodeID, RefDoctorID, intFeatureId, intFunctionId, strCallContext, CheckIn, intUserId, intWorkStationId, intError, Diseasecode, ActiveInsID, IsCollectablebyEmployer, IsDeductablebyEmployer, IsSupplimentarybyEmployer, IsExcessbyEmployer, IsNewCheckin, SpecialisationID, PatientType, BillType, EmpClinicCodeID, referralOrderID);
        }
        
        public int SavePrintCardCountDetails(int PatientID, int HospitalID, int intUserId, int intWorkStationId) {
            return base.Channel.SavePrintCardCountDetails(PatientID, HospitalID, intUserId, intWorkStationId);
        }
        
        public System.Threading.Tasks.Task<int> SavePrintCardCountDetailsAsync(int PatientID, int HospitalID, int intUserId, int intWorkStationId) {
            return base.Channel.SavePrintCardCountDetailsAsync(PatientID, HospitalID, intUserId, intWorkStationId);
        }
        
        public System.Data.DataSet GetFetchPatientsInfo(string RegCode, int intUserId, int intWorkStationId) {
            return base.Channel.GetFetchPatientsInfo(RegCode, intUserId, intWorkStationId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetFetchPatientsInfoAsync(string RegCode, int intUserId, int intWorkStationId) {
            return base.Channel.GetFetchPatientsInfoAsync(RegCode, intUserId, intWorkStationId);
        }
        
        public System.Data.DataSet GetFetchPatientDetails(int intPatientID, string RegCode, string strTabletype, int intUserID, int intWorkStationId) {
            return base.Channel.GetFetchPatientDetails(intPatientID, RegCode, strTabletype, intUserID, intWorkStationId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetFetchPatientDetailsAsync(int intPatientID, string RegCode, string strTabletype, int intUserID, int intWorkStationId) {
            return base.Channel.GetFetchPatientDetailsAsync(intPatientID, RegCode, strTabletype, intUserID, intWorkStationId);
        }
        
        public System.Data.DataSet GetPatientReferralWorklist(string UHID, string fromDate, string toDate, int TableId, int intWorkStationId, string PatientType) {
            return base.Channel.GetPatientReferralWorklist(UHID, fromDate, toDate, TableId, intWorkStationId, PatientType);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetPatientReferralWorklistAsync(string UHID, string fromDate, string toDate, int TableId, int intWorkStationId, string PatientType) {
            return base.Channel.GetPatientReferralWorklistAsync(UHID, fromDate, toDate, TableId, intWorkStationId, PatientType);
        }
        
        public System.Data.DataSet GetDoctorsOnSpecializeID(int specializeID, int intWorkStationId) {
            return base.Channel.GetDoctorsOnSpecializeID(specializeID, intWorkStationId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetDoctorsOnSpecializeIDAsync(int specializeID, int intWorkStationId) {
            return base.Channel.GetDoctorsOnSpecializeIDAsync(specializeID, intWorkStationId);
        }
        
        public int SaveReferralOrderDoctors(string referrals, int userId, int intWorkStationId) {
            return base.Channel.SaveReferralOrderDoctors(referrals, userId, intWorkStationId);
        }
        
        public System.Threading.Tasks.Task<int> SaveReferralOrderDoctorsAsync(string referrals, int userId, int intWorkStationId) {
            return base.Channel.SaveReferralOrderDoctorsAsync(referrals, userId, intWorkStationId);
        }
        
        public System.Data.DataSet GetSchedulePatientInfo(int scheduleid, int intUserId, int intWorkStationId) {
            return base.Channel.GetSchedulePatientInfo(scheduleid, intUserId, intWorkStationId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetSchedulePatientInfoAsync(int scheduleid, int intUserId, int intWorkStationId) {
            return base.Channel.GetSchedulePatientInfoAsync(scheduleid, intUserId, intWorkStationId);
        }
        
        public bool EndPatientEpisode(int episodeID, string reason, int userId, int workStationID) {
            return base.Channel.EndPatientEpisode(episodeID, reason, userId, workStationID);
        }
        
        public System.Threading.Tasks.Task<bool> EndPatientEpisodeAsync(int episodeID, string reason, int userId, int workStationID) {
            return base.Channel.EndPatientEpisodeAsync(episodeID, reason, userId, workStationID);
        }
        
        public int SavePatientChildGroupMapping(string PatientID, System.Data.DataTable ChildGroups, int userId, int intWorkStationId, int HospitalId) {
            return base.Channel.SavePatientChildGroupMapping(PatientID, ChildGroups, userId, intWorkStationId, HospitalId);
        }
        
        public System.Threading.Tasks.Task<int> SavePatientChildGroupMappingAsync(string PatientID, System.Data.DataTable ChildGroups, int userId, int intWorkStationId, int HospitalId) {
            return base.Channel.SavePatientChildGroupMappingAsync(PatientID, ChildGroups, userId, intWorkStationId, HospitalId);
        }
        
        public System.Data.DataSet FetchPatientChildGroupMapping(string UHID, int intUserID, int intWorkStationId, int HospitalId) {
            return base.Channel.FetchPatientChildGroupMapping(UHID, intUserID, intWorkStationId, HospitalId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchPatientChildGroupMappingAsync(string UHID, int intUserID, int intWorkStationId, int HospitalId) {
            return base.Channel.FetchPatientChildGroupMappingAsync(UHID, intUserID, intWorkStationId, HospitalId);
        }
        
        public string SaveCheckInWithoutClinicCode(
                    System.Data.DataSet dsChekIn, 
                    int AdmissionID, 
                    int PatientID, 
                    int HospitalID, 
                    int Investigation, 
                    int IpOpProcedures, 
                    int Pharmacy, 
                    int VisitID, 
                    int VisitType, 
                    int DoctorID, 
                    bool ISExternal, 
                    int EpisodeID, 
                    int RefDoctorID, 
                    int intFeatureId, 
                    int intFunctionId, 
                    string strCallContext, 
                    bool CheckIn, 
                    int intUserId, 
                    int intWorkStationId, 
                    int intError, 
                    System.Data.DataSet Diseasecode, 
                    int ActiveInsID, 
                    byte IsCollectablebyEmployer, 
                    byte IsDeductablebyEmployer, 
                    byte IsSupplimentarybyEmployer, 
                    byte IsExcessbyEmployer, 
                    int IsNewCheckin, 
                    int SpecialisationID, 
                    int PatientType, 
                    int BillType) {
            return base.Channel.SaveCheckInWithoutClinicCode(dsChekIn, AdmissionID, PatientID, HospitalID, Investigation, IpOpProcedures, Pharmacy, VisitID, VisitType, DoctorID, ISExternal, EpisodeID, RefDoctorID, intFeatureId, intFunctionId, strCallContext, CheckIn, intUserId, intWorkStationId, intError, Diseasecode, ActiveInsID, IsCollectablebyEmployer, IsDeductablebyEmployer, IsSupplimentarybyEmployer, IsExcessbyEmployer, IsNewCheckin, SpecialisationID, PatientType, BillType);
        }
        
        public System.Threading.Tasks.Task<string> SaveCheckInWithoutClinicCodeAsync(
                    System.Data.DataSet dsChekIn, 
                    int AdmissionID, 
                    int PatientID, 
                    int HospitalID, 
                    int Investigation, 
                    int IpOpProcedures, 
                    int Pharmacy, 
                    int VisitID, 
                    int VisitType, 
                    int DoctorID, 
                    bool ISExternal, 
                    int EpisodeID, 
                    int RefDoctorID, 
                    int intFeatureId, 
                    int intFunctionId, 
                    string strCallContext, 
                    bool CheckIn, 
                    int intUserId, 
                    int intWorkStationId, 
                    int intError, 
                    System.Data.DataSet Diseasecode, 
                    int ActiveInsID, 
                    byte IsCollectablebyEmployer, 
                    byte IsDeductablebyEmployer, 
                    byte IsSupplimentarybyEmployer, 
                    byte IsExcessbyEmployer, 
                    int IsNewCheckin, 
                    int SpecialisationID, 
                    int PatientType, 
                    int BillType) {
            return base.Channel.SaveCheckInWithoutClinicCodeAsync(dsChekIn, AdmissionID, PatientID, HospitalID, Investigation, IpOpProcedures, Pharmacy, VisitID, VisitType, DoctorID, ISExternal, EpisodeID, RefDoctorID, intFeatureId, intFunctionId, strCallContext, CheckIn, intUserId, intWorkStationId, intError, Diseasecode, ActiveInsID, IsCollectablebyEmployer, IsDeductablebyEmployer, IsSupplimentarybyEmployer, IsExcessbyEmployer, IsNewCheckin, SpecialisationID, PatientType, BillType);
        }
        
        public bool SaveModifyDoctorSpecialisationMapping(int intEmpID, string strSpecialisationID, int intUserID, int intWorkStationID, int intError, int HospitalID) {
            return base.Channel.SaveModifyDoctorSpecialisationMapping(intEmpID, strSpecialisationID, intUserID, intWorkStationID, intError, HospitalID);
        }
        
        public System.Threading.Tasks.Task<bool> SaveModifyDoctorSpecialisationMappingAsync(int intEmpID, string strSpecialisationID, int intUserID, int intWorkStationID, int intError, int HospitalID) {
            return base.Channel.SaveModifyDoctorSpecialisationMappingAsync(intEmpID, strSpecialisationID, intUserID, intWorkStationID, intError, HospitalID);
        }
        
        public System.Data.DataSet GetDoctorSpecialisationMapping(int intEmpID, string TblID, int intUserID, int intWorkStationID, int intError, int HospitalID) {
            return base.Channel.GetDoctorSpecialisationMapping(intEmpID, TblID, intUserID, intWorkStationID, intError, HospitalID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetDoctorSpecialisationMappingAsync(int intEmpID, string TblID, int intUserID, int intWorkStationID, int intError, int HospitalID) {
            return base.Channel.GetDoctorSpecialisationMappingAsync(intEmpID, TblID, intUserID, intWorkStationID, intError, HospitalID);
        }
        
        public int UnMapPatientDependents(int intPatientId, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.UnMapPatientDependents(intPatientId, intUserId, intWorkStationId, intError);
        }
        
        public System.Threading.Tasks.Task<int> UnMapPatientDependentsAsync(int intPatientId, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.UnMapPatientDependentsAsync(intPatientId, intUserId, intWorkStationId, intError);
        }
        
        public System.Data.DataSet FetchPatientActivityListOnVisitID(int intEpisodeID, int intVisitID, int intPatientID, string strTbl, int intUserID, int intWorkStationID, int intError) {
            return base.Channel.FetchPatientActivityListOnVisitID(intEpisodeID, intVisitID, intPatientID, strTbl, intUserID, intWorkStationID, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchPatientActivityListOnVisitIDAsync(int intEpisodeID, int intVisitID, int intPatientID, string strTbl, int intUserID, int intWorkStationID, int intError) {
            return base.Channel.FetchPatientActivityListOnVisitIDAsync(intEpisodeID, intVisitID, intPatientID, strTbl, intUserID, intWorkStationID, intError);
        }
        
        public int SaveActivityList(int intPatientID, int intVisitID, int intEpisodeID, string strXMLActivityList, int intUserID, int intWorkStationID, int intError, int intHospitalID) {
            return base.Channel.SaveActivityList(intPatientID, intVisitID, intEpisodeID, strXMLActivityList, intUserID, intWorkStationID, intError, intHospitalID);
        }
        
        public System.Threading.Tasks.Task<int> SaveActivityListAsync(int intPatientID, int intVisitID, int intEpisodeID, string strXMLActivityList, int intUserID, int intWorkStationID, int intError, int intHospitalID) {
            return base.Channel.SaveActivityListAsync(intPatientID, intVisitID, intEpisodeID, strXMLActivityList, intUserID, intWorkStationID, intError, intHospitalID);
        }
        
        public System.Data.DataSet FetchActivePackage(int patientId, int userId, string strTableId) {
            return base.Channel.FetchActivePackage(patientId, userId, strTableId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchActivePackageAsync(int patientId, int userId, string strTableId) {
            return base.Channel.FetchActivePackageAsync(patientId, userId, strTableId);
        }
        
        public System.Data.DataSet FetchPackageUtilization(int patientId, int billId, int packageId, int userId) {
            return base.Channel.FetchPackageUtilization(patientId, billId, packageId, userId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchPackageUtilizationAsync(int patientId, int billId, int packageId, int userId) {
            return base.Channel.FetchPackageUtilizationAsync(patientId, billId, packageId, userId);
        }
        
        public bool SavePackageUtilization(System.Data.DataSet dsPackageUtil, int userId, int billId) {
            return base.Channel.SavePackageUtilization(dsPackageUtil, userId, billId);
        }
        
        public System.Threading.Tasks.Task<bool> SavePackageUtilizationAsync(System.Data.DataSet dsPackageUtil, int userId, int billId) {
            return base.Channel.SavePackageUtilizationAsync(dsPackageUtil, userId, billId);
        }
        
        public System.Data.DataSet FetchMultipleInsurances(int intPatientID) {
            return base.Channel.FetchMultipleInsurances(intPatientID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchMultipleInsurancesAsync(int intPatientID) {
            return base.Channel.FetchMultipleInsurancesAsync(intPatientID);
        }
        
        public bool CancelPackageItemUtilization(System.Data.DataSet dsPackageUtil, int userId, int billId) {
            return base.Channel.CancelPackageItemUtilization(dsPackageUtil, userId, billId);
        }
        
        public System.Threading.Tasks.Task<bool> CancelPackageItemUtilizationAsync(System.Data.DataSet dsPackageUtil, int userId, int billId) {
            return base.Channel.CancelPackageItemUtilizationAsync(dsPackageUtil, userId, billId);
        }
        
        public System.Data.DataSet GetBillDetails(int PatientID, int UserId, int WorkstationID) {
            return base.Channel.GetBillDetails(PatientID, UserId, WorkstationID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetBillDetailsAsync(int PatientID, int UserId, int WorkstationID) {
            return base.Channel.GetBillDetailsAsync(PatientID, UserId, WorkstationID);
        }
        
        public int SaveNewConPriority(int ConsultID, int ConsultTypeID, int intUserId, int intworkStation, int HospitalID, int OldConsultationtypeID, string TokeNo, int RemarksID) {
            return base.Channel.SaveNewConPriority(ConsultID, ConsultTypeID, intUserId, intworkStation, HospitalID, OldConsultationtypeID, TokeNo, RemarksID);
        }
        
        public System.Threading.Tasks.Task<int> SaveNewConPriorityAsync(int ConsultID, int ConsultTypeID, int intUserId, int intworkStation, int HospitalID, int OldConsultationtypeID, string TokeNo, int RemarksID) {
            return base.Channel.SaveNewConPriorityAsync(ConsultID, ConsultTypeID, intUserId, intworkStation, HospitalID, OldConsultationtypeID, TokeNo, RemarksID);
        }
        
        public System.Data.DataSet FetchPatientAdmissionLetters(int intIPID, int intUserId, int intWorkstationid) {
            return base.Channel.FetchPatientAdmissionLetters(intIPID, intUserId, intWorkstationid);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchPatientAdmissionLettersAsync(int intIPID, int intUserId, int intWorkstationid) {
            return base.Channel.FetchPatientAdmissionLettersAsync(intIPID, intUserId, intWorkstationid);
        }
        
        public System.Data.DataSet FetchAuthenticatedUsers(string searchFilter, int intUserId, int intWorkstationId) {
            return base.Channel.FetchAuthenticatedUsers(searchFilter, intUserId, intWorkstationId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchAuthenticatedUsersAsync(string searchFilter, int intUserId, int intWorkstationId) {
            return base.Channel.FetchAuthenticatedUsersAsync(searchFilter, intUserId, intWorkstationId);
        }
        
        public System.Data.DataSet FetchFetchPatientMonitoringDetails(int intPatientID, int intType, string strConsFilter, int intUserID, int intWorkstationID, int intError) {
            return base.Channel.FetchFetchPatientMonitoringDetails(intPatientID, intType, strConsFilter, intUserID, intWorkstationID, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchFetchPatientMonitoringDetailsAsync(int intPatientID, int intType, string strConsFilter, int intUserID, int intWorkstationID, int intError) {
            return base.Channel.FetchFetchPatientMonitoringDetailsAsync(intPatientID, intType, strConsFilter, intUserID, intWorkstationID, intError);
        }
        
        public System.Data.DataSet fillDoctorAvailabilityDetails(int SpecilizationId, int DoctorId, int userId, int WorkStationID) {
            return base.Channel.fillDoctorAvailabilityDetails(SpecilizationId, DoctorId, userId, WorkStationID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> fillDoctorAvailabilityDetailsAsync(int SpecilizationId, int DoctorId, int userId, int WorkStationID) {
            return base.Channel.fillDoctorAvailabilityDetailsAsync(SpecilizationId, DoctorId, userId, WorkStationID);
        }
        
        public System.Data.DataSet FetchDoctorSpecializations(string strType, string strFilter, int intUserID, int intWorkstationID, int intError) {
            return base.Channel.FetchDoctorSpecializations(strType, strFilter, intUserID, intWorkstationID, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchDoctorSpecializationsAsync(string strType, string strFilter, int intUserID, int intWorkstationID, int intError) {
            return base.Channel.FetchDoctorSpecializationsAsync(strType, strFilter, intUserID, intWorkstationID, intError);
        }
        
        public System.Data.DataSet FetchPatientNationalityIds(int intPatientID, int UserID, int WorkStation, int HospID) {
            return base.Channel.FetchPatientNationalityIds(intPatientID, UserID, WorkStation, HospID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchPatientNationalityIdsAsync(int intPatientID, int UserID, int WorkStation, int HospID) {
            return base.Channel.FetchPatientNationalityIdsAsync(intPatientID, UserID, WorkStation, HospID);
        }
        
        public System.Data.DataSet FetchItemPriceForMultipleItems(System.Data.DataTable dtItems, int intTariffId, int intSpecialisationId, int intBedTypeID, int intUserId, int intWorkstationid) {
            return base.Channel.FetchItemPriceForMultipleItems(dtItems, intTariffId, intSpecialisationId, intBedTypeID, intUserId, intWorkstationid);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchItemPriceForMultipleItemsAsync(System.Data.DataTable dtItems, int intTariffId, int intSpecialisationId, int intBedTypeID, int intUserId, int intWorkstationid) {
            return base.Channel.FetchItemPriceForMultipleItemsAsync(dtItems, intTariffId, intSpecialisationId, intBedTypeID, intUserId, intWorkstationid);
        }
        
        public System.Data.DataSet FetchHospitalCompanyDetailsNew(int CompanyID, string PatientType, int intUserID, int intWorkStationID, int intError, int HospitalID) {
            return base.Channel.FetchHospitalCompanyDetailsNew(CompanyID, PatientType, intUserID, intWorkStationID, intError, HospitalID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchHospitalCompanyDetailsNewAsync(int CompanyID, string PatientType, int intUserID, int intWorkStationID, int intError, int HospitalID) {
            return base.Channel.FetchHospitalCompanyDetailsNewAsync(CompanyID, PatientType, intUserID, intWorkStationID, intError, HospitalID);
        }
        
        public int SavePatientIntimationLetter(System.Data.DataSet DsSave, int intFeatureId, int intUserID, int intWorkstationID, string strCallContext) {
            return base.Channel.SavePatientIntimationLetter(DsSave, intFeatureId, intUserID, intWorkstationID, strCallContext);
        }
        
        public System.Threading.Tasks.Task<int> SavePatientIntimationLetterAsync(System.Data.DataSet DsSave, int intFeatureId, int intUserID, int intWorkstationID, string strCallContext) {
            return base.Channel.SavePatientIntimationLetterAsync(DsSave, intFeatureId, intUserID, intWorkstationID, strCallContext);
        }
        
        public System.Data.DataSet FetchPatientIntimationLetter(string strFilter, int intUserID, int intWorkstationID, int intError) {
            return base.Channel.FetchPatientIntimationLetter(strFilter, intUserID, intWorkstationID, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchPatientIntimationLetterAsync(string strFilter, int intUserID, int intWorkstationID, int intError) {
            return base.Channel.FetchPatientIntimationLetterAsync(strFilter, intUserID, intWorkstationID, intError);
        }
        
        public System.Data.DataSet GetAppointmentRequestDetails(int intAppointmentRequestID, string sRegCode, int DoctorId, int SpecialiseID, string Fromdate, string Todate, int status) {
            return base.Channel.GetAppointmentRequestDetails(intAppointmentRequestID, sRegCode, DoctorId, SpecialiseID, Fromdate, Todate, status);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetAppointmentRequestDetailsAsync(int intAppointmentRequestID, string sRegCode, int DoctorId, int SpecialiseID, string Fromdate, string Todate, int status) {
            return base.Channel.GetAppointmentRequestDetailsAsync(intAppointmentRequestID, sRegCode, DoctorId, SpecialiseID, Fromdate, Todate, status);
        }
        
        public System.Data.DataSet FetchDoctorDetailsForInAndOut(int DeptId, int DocId, int HospitalID, int intWorkStation) {
            return base.Channel.FetchDoctorDetailsForInAndOut(DeptId, DocId, HospitalID, intWorkStation);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchDoctorDetailsForInAndOutAsync(int DeptId, int DocId, int HospitalID, int intWorkStation) {
            return base.Channel.FetchDoctorDetailsForInAndOutAsync(DeptId, DocId, HospitalID, intWorkStation);
        }
        
        public System.Data.DataSet FetchDoctorInOutReasons(string strFilter, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.FetchDoctorInOutReasons(strFilter, intUserId, intWorkStationId, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchDoctorInOutReasonsAsync(string strFilter, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.FetchDoctorInOutReasonsAsync(strFilter, intUserId, intWorkStationId, intError);
        }
        
        public int SaveDoctorInOutDetails(int HospitalId, int intUserId, int intworkStation, System.Data.DataTable dtDoctorDet) {
            return base.Channel.SaveDoctorInOutDetails(HospitalId, intUserId, intworkStation, dtDoctorDet);
        }
        
        public System.Threading.Tasks.Task<int> SaveDoctorInOutDetailsAsync(int HospitalId, int intUserId, int intworkStation, System.Data.DataTable dtDoctorDet) {
            return base.Channel.SaveDoctorInOutDetailsAsync(HospitalId, intUserId, intworkStation, dtDoctorDet);
        }
        
        public string FetchConsultationDoctorDetails(int ServiceId, int ServiceItemId, int SpecialiseID, int HospitalID, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.FetchConsultationDoctorDetails(ServiceId, ServiceItemId, SpecialiseID, HospitalID, intUserId, intWorkStationId, intError);
        }
        
        public System.Threading.Tasks.Task<string> FetchConsultationDoctorDetailsAsync(int ServiceId, int ServiceItemId, int SpecialiseID, int HospitalID, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.FetchConsultationDoctorDetailsAsync(ServiceId, ServiceItemId, SpecialiseID, HospitalID, intUserId, intWorkStationId, intError);
        }
        
        public System.Data.DataSet fetchTenativeAppointmentsPatientWise(int PatientId, string currDate, int intUserId, int HospitalID, int intWorkStationId) {
            return base.Channel.fetchTenativeAppointmentsPatientWise(PatientId, currDate, intUserId, HospitalID, intWorkStationId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> fetchTenativeAppointmentsPatientWiseAsync(int PatientId, string currDate, int intUserId, int HospitalID, int intWorkStationId) {
            return base.Channel.fetchTenativeAppointmentsPatientWiseAsync(PatientId, currDate, intUserId, HospitalID, intWorkStationId);
        }
        
        public System.Data.DataSet FetchOnlyDoctorDepartments(int LocationId, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.FetchOnlyDoctorDepartments(LocationId, intUserId, intWorkStationId, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchOnlyDoctorDepartmentsAsync(int LocationId, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.FetchOnlyDoctorDepartmentsAsync(LocationId, intUserId, intWorkStationId, intError);
        }
        
        public System.Data.DataSet FetchGroupFutureSchedules(int PatientGroupId, int PatientID, int intWorkStationId) {
            return base.Channel.FetchGroupFutureSchedules(PatientGroupId, PatientID, intWorkStationId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchGroupFutureSchedulesAsync(int PatientGroupId, int PatientID, int intWorkStationId) {
            return base.Channel.FetchGroupFutureSchedulesAsync(PatientGroupId, PatientID, intWorkStationId);
        }
        
        public int SaveGroupScheduleAddPatient(
                    int PatientGroupId, 
                    int PatientID, 
                    string Name, 
                    int Age, 
                    int AgeUOMID, 
                    string Phone, 
                    string Email, 
                    string Remarks, 
                    int GenderID, 
                    string Name2l, 
                    int VisitID, 
                    string SSN, 
                    string ContactNo, 
                    int blocked, 
                    int Hospitalid, 
                    int AppointmentTypeID, 
                    int SessionTypeID, 
                    int UserID, 
                    int WorkStationID, 
                    System.Data.DataTable Resources, 
                    int Error) {
            return base.Channel.SaveGroupScheduleAddPatient(PatientGroupId, PatientID, Name, Age, AgeUOMID, Phone, Email, Remarks, GenderID, Name2l, VisitID, SSN, ContactNo, blocked, Hospitalid, AppointmentTypeID, SessionTypeID, UserID, WorkStationID, Resources, Error);
        }
        
        public System.Threading.Tasks.Task<int> SaveGroupScheduleAddPatientAsync(
                    int PatientGroupId, 
                    int PatientID, 
                    string Name, 
                    int Age, 
                    int AgeUOMID, 
                    string Phone, 
                    string Email, 
                    string Remarks, 
                    int GenderID, 
                    string Name2l, 
                    int VisitID, 
                    string SSN, 
                    string ContactNo, 
                    int blocked, 
                    int Hospitalid, 
                    int AppointmentTypeID, 
                    int SessionTypeID, 
                    int UserID, 
                    int WorkStationID, 
                    System.Data.DataTable Resources, 
                    int Error) {
            return base.Channel.SaveGroupScheduleAddPatientAsync(PatientGroupId, PatientID, Name, Age, AgeUOMID, Phone, Email, Remarks, GenderID, Name2l, VisitID, SSN, ContactNo, blocked, Hospitalid, AppointmentTypeID, SessionTypeID, UserID, WorkStationID, Resources, Error);
        }
        
        public bool DeleteMultiGroupSchedule(string ScheduleID, int PatientID, bool Blocked, string strCancellationRemarks, int intUserid, int intWorkstationid, int intHospitalID, int intServiceID, int intCancelReasonID, int intActionTypeID) {
            return base.Channel.DeleteMultiGroupSchedule(ScheduleID, PatientID, Blocked, strCancellationRemarks, intUserid, intWorkstationid, intHospitalID, intServiceID, intCancelReasonID, intActionTypeID);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteMultiGroupScheduleAsync(string ScheduleID, int PatientID, bool Blocked, string strCancellationRemarks, int intUserid, int intWorkstationid, int intHospitalID, int intServiceID, int intCancelReasonID, int intActionTypeID) {
            return base.Channel.DeleteMultiGroupScheduleAsync(ScheduleID, PatientID, Blocked, strCancellationRemarks, intUserid, intWorkstationid, intHospitalID, intServiceID, intCancelReasonID, intActionTypeID);
        }
        
        public System.Data.DataSet FetchAssignedOPPackages(int PatientID, int PackageID, int UserID, int WorkStationID) {
            return base.Channel.FetchAssignedOPPackages(PatientID, PackageID, UserID, WorkStationID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchAssignedOPPackagesAsync(int PatientID, int PackageID, int UserID, int WorkStationID) {
            return base.Channel.FetchAssignedOPPackagesAsync(PatientID, PackageID, UserID, WorkStationID);
        }
        
        public int SaveOPPAckageAssignmentDetails(int PatientId, int PackageId, string FromDate, string ToDate, int count, int minDays, int UserID, int intworkStation, int HospitalId) {
            return base.Channel.SaveOPPAckageAssignmentDetails(PatientId, PackageId, FromDate, ToDate, count, minDays, UserID, intworkStation, HospitalId);
        }
        
        public System.Threading.Tasks.Task<int> SaveOPPAckageAssignmentDetailsAsync(int PatientId, int PackageId, string FromDate, string ToDate, int count, int minDays, int UserID, int intworkStation, int HospitalId) {
            return base.Channel.SaveOPPAckageAssignmentDetailsAsync(PatientId, PackageId, FromDate, ToDate, count, minDays, UserID, intworkStation, HospitalId);
        }
        
        public System.Data.DataSet FetchAdminMastersSpecimen(int Type, string Filter, int UserID, int WorkStationID, int Error) {
            return base.Channel.FetchAdminMastersSpecimen(Type, Filter, UserID, WorkStationID, Error);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchAdminMastersSpecimenAsync(int Type, string Filter, int UserID, int WorkStationID, int Error) {
            return base.Channel.FetchAdminMastersSpecimenAsync(Type, Filter, UserID, WorkStationID, Error);
        }
        
        public System.Data.DataSet FetchComonAdminMastersForOVR(int TableId, string Filter, int UserId, int intWorkStationId, int Error) {
            return base.Channel.FetchComonAdminMastersForOVR(TableId, Filter, UserId, intWorkStationId, Error);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchComonAdminMastersForOVRAsync(int TableId, string Filter, int UserId, int intWorkStationId, int Error) {
            return base.Channel.FetchComonAdminMastersForOVRAsync(TableId, Filter, UserId, intWorkStationId, Error);
        }
        
        public System.Data.DataSet FetchOccuranceSubTyes(string Filter, int UserId, int intWorkStationId, int Error) {
            return base.Channel.FetchOccuranceSubTyes(Filter, UserId, intWorkStationId, Error);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchOccuranceSubTyesAsync(string Filter, int UserId, int intWorkStationId, int Error) {
            return base.Channel.FetchOccuranceSubTyesAsync(Filter, UserId, intWorkStationId, Error);
        }
        
        public int SaveOVRIncidentRequestDetails(
                    int IncidentTypeId, 
                    string IncidentDateTime, 
                    int HospDeptId, 
                    int ReqType, 
                    string FactualDescription, 
                    string Assessment, 
                    bool IsPhysicianNotified, 
                    int PhysicianId, 
                    bool IsMDSeepatient, 
                    string physicianEnterdDate, 
                    int Severity, 
                    System.Data.DataTable RequestDetails, 
                    System.Data.DataTable WitnessInformation, 
                    System.Data.DataTable OVRIncidentTypeinfo, 
                    int STATUS, 
                    int UserId, 
                    int WorkStationId, 
                    int Error, 
                    int InitiatingDeptID, 
                    string FilePath, 
                    int HospitalID) {
            return base.Channel.SaveOVRIncidentRequestDetails(IncidentTypeId, IncidentDateTime, HospDeptId, ReqType, FactualDescription, Assessment, IsPhysicianNotified, PhysicianId, IsMDSeepatient, physicianEnterdDate, Severity, RequestDetails, WitnessInformation, OVRIncidentTypeinfo, STATUS, UserId, WorkStationId, Error, InitiatingDeptID, FilePath, HospitalID);
        }
        
        public System.Threading.Tasks.Task<int> SaveOVRIncidentRequestDetailsAsync(
                    int IncidentTypeId, 
                    string IncidentDateTime, 
                    int HospDeptId, 
                    int ReqType, 
                    string FactualDescription, 
                    string Assessment, 
                    bool IsPhysicianNotified, 
                    int PhysicianId, 
                    bool IsMDSeepatient, 
                    string physicianEnterdDate, 
                    int Severity, 
                    System.Data.DataTable RequestDetails, 
                    System.Data.DataTable WitnessInformation, 
                    System.Data.DataTable OVRIncidentTypeinfo, 
                    int STATUS, 
                    int UserId, 
                    int WorkStationId, 
                    int Error, 
                    int InitiatingDeptID, 
                    string FilePath, 
                    int HospitalID) {
            return base.Channel.SaveOVRIncidentRequestDetailsAsync(IncidentTypeId, IncidentDateTime, HospDeptId, ReqType, FactualDescription, Assessment, IsPhysicianNotified, PhysicianId, IsMDSeepatient, physicianEnterdDate, Severity, RequestDetails, WitnessInformation, OVRIncidentTypeinfo, STATUS, UserId, WorkStationId, Error, InitiatingDeptID, FilePath, HospitalID);
        }
        
        public System.Data.DataSet GetOVRIncidentsWorkListDetails(string FromDate, string ToDate, int StatusId, int EmpId, int UserId, int WorkStnId, int Error, int DepartmentId, bool ISQOM, int HospitalId) {
            return base.Channel.GetOVRIncidentsWorkListDetails(FromDate, ToDate, StatusId, EmpId, UserId, WorkStnId, Error, DepartmentId, ISQOM, HospitalId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetOVRIncidentsWorkListDetailsAsync(string FromDate, string ToDate, int StatusId, int EmpId, int UserId, int WorkStnId, int Error, int DepartmentId, bool ISQOM, int HospitalId) {
            return base.Channel.GetOVRIncidentsWorkListDetailsAsync(FromDate, ToDate, StatusId, EmpId, UserId, WorkStnId, Error, DepartmentId, ISQOM, HospitalId);
        }
        
        public System.Data.DataSet FetchOVRIncidentReqDetails(int OVRIncReqId, string Table, int UserId, int WorkStnId, int Error, int HospitalId) {
            return base.Channel.FetchOVRIncidentReqDetails(OVRIncReqId, Table, UserId, WorkStnId, Error, HospitalId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchOVRIncidentReqDetailsAsync(int OVRIncReqId, string Table, int UserId, int WorkStnId, int Error, int HospitalId) {
            return base.Channel.FetchOVRIncidentReqDetailsAsync(OVRIncReqId, Table, UserId, WorkStnId, Error, HospitalId);
        }
        
        public int SaveOVRIncidentSectionWise(
                    int OvrIncidentId, 
                    int SectionId, 
                    string HODFactors, 
                    string HODAction, 
                    string HODPreventions, 
                    int HODRiskLevel, 
                    string RespondingDeptAction, 
                    bool IsHODAck, 
                    bool IsRespDeptAck, 
                    bool IsQOMAck, 
                    int RespondingDeptId, 
                    int status, 
                    int UserId, 
                    int WorkStationId, 
                    int Error, 
                    bool formComplete, 
                    bool properCasueIdentified, 
                    bool properTimeFrame, 
                    bool ActionCompliesStandard, 
                    bool EffectiveCorrectiveAction, 
                    int FurtherActionTaken, 
                    int CodeOfCat, 
                    int CodeOfSubCat, 
                    int CodeOfCause, 
                    int Severity, 
                    string Remarks, 
                    string FilePath, 
                    int HospitalID) {
            return base.Channel.SaveOVRIncidentSectionWise(OvrIncidentId, SectionId, HODFactors, HODAction, HODPreventions, HODRiskLevel, RespondingDeptAction, IsHODAck, IsRespDeptAck, IsQOMAck, RespondingDeptId, status, UserId, WorkStationId, Error, formComplete, properCasueIdentified, properTimeFrame, ActionCompliesStandard, EffectiveCorrectiveAction, FurtherActionTaken, CodeOfCat, CodeOfSubCat, CodeOfCause, Severity, Remarks, FilePath, HospitalID);
        }
        
        public System.Threading.Tasks.Task<int> SaveOVRIncidentSectionWiseAsync(
                    int OvrIncidentId, 
                    int SectionId, 
                    string HODFactors, 
                    string HODAction, 
                    string HODPreventions, 
                    int HODRiskLevel, 
                    string RespondingDeptAction, 
                    bool IsHODAck, 
                    bool IsRespDeptAck, 
                    bool IsQOMAck, 
                    int RespondingDeptId, 
                    int status, 
                    int UserId, 
                    int WorkStationId, 
                    int Error, 
                    bool formComplete, 
                    bool properCasueIdentified, 
                    bool properTimeFrame, 
                    bool ActionCompliesStandard, 
                    bool EffectiveCorrectiveAction, 
                    int FurtherActionTaken, 
                    int CodeOfCat, 
                    int CodeOfSubCat, 
                    int CodeOfCause, 
                    int Severity, 
                    string Remarks, 
                    string FilePath, 
                    int HospitalID) {
            return base.Channel.SaveOVRIncidentSectionWiseAsync(OvrIncidentId, SectionId, HODFactors, HODAction, HODPreventions, HODRiskLevel, RespondingDeptAction, IsHODAck, IsRespDeptAck, IsQOMAck, RespondingDeptId, status, UserId, WorkStationId, Error, formComplete, properCasueIdentified, properTimeFrame, ActionCompliesStandard, EffectiveCorrectiveAction, FurtherActionTaken, CodeOfCat, CodeOfSubCat, CodeOfCause, Severity, Remarks, FilePath, HospitalID);
        }
        
        public System.Data.DataSet FillCodeOfSubCategoryTyes(int CodeOfCatId, int intWorkStationId) {
            return base.Channel.FillCodeOfSubCategoryTyes(CodeOfCatId, intWorkStationId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FillCodeOfSubCategoryTyesAsync(int CodeOfCatId, int intWorkStationId) {
            return base.Channel.FillCodeOfSubCategoryTyesAsync(CodeOfCatId, intWorkStationId);
        }
        
        public System.Data.DataSet GetOvrEmpPermissions(int EmpID, int WorkStnId) {
            return base.Channel.GetOvrEmpPermissions(EmpID, WorkStnId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetOvrEmpPermissionsAsync(int EmpID, int WorkStnId) {
            return base.Channel.GetOvrEmpPermissionsAsync(EmpID, WorkStnId);
        }
        
        public System.Data.DataSet GetTestTaskStatusForOVR(int intUserId, int intWorkStationId) {
            return base.Channel.GetTestTaskStatusForOVR(intUserId, intWorkStationId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetTestTaskStatusForOVRAsync(int intUserId, int intWorkStationId) {
            return base.Channel.GetTestTaskStatusForOVRAsync(intUserId, intWorkStationId);
        }
        
        public string DayWiseUnbilledVisits(string frmDate, string toDate) {
            return base.Channel.DayWiseUnbilledVisits(frmDate, toDate);
        }
        
        public System.Threading.Tasks.Task<string> DayWiseUnbilledVisitsAsync(string frmDate, string toDate) {
            return base.Channel.DayWiseUnbilledVisitsAsync(frmDate, toDate);
        }
        
        public string GetOPOrdersForBilling(long lngIPID, int IntWorkStationID) {
            return base.Channel.GetOPOrdersForBilling(lngIPID, IntWorkStationID);
        }
        
        public System.Threading.Tasks.Task<string> GetOPOrdersForBillingAsync(long lngIPID, int IntWorkStationID) {
            return base.Channel.GetOPOrdersForBillingAsync(lngIPID, IntWorkStationID);
        }
        
        public System.Data.DataSet FetchPatientNewTestOrders(string FromDate, string ToDate, int PatientID, int AdmissionID, int intUserID, int intWorkStnId) {
            return base.Channel.FetchPatientNewTestOrders(FromDate, ToDate, PatientID, AdmissionID, intUserID, intWorkStnId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchPatientNewTestOrdersAsync(string FromDate, string ToDate, int PatientID, int AdmissionID, int intUserID, int intWorkStnId) {
            return base.Channel.FetchPatientNewTestOrdersAsync(FromDate, ToDate, PatientID, AdmissionID, intUserID, intWorkStnId);
        }
        
        public System.Data.DataSet FetchPatientVisitsForGOE_Moda(int PatientID, int intUserID, int intWorkStnId) {
            return base.Channel.FetchPatientVisitsForGOE_Moda(PatientID, intUserID, intWorkStnId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchPatientVisitsForGOE_ModaAsync(int PatientID, int intUserID, int intWorkStnId) {
            return base.Channel.FetchPatientVisitsForGOE_ModaAsync(PatientID, intUserID, intWorkStnId);
        }
        
        public System.Data.DataSet GetCostEstimationDetails(int PatientId, int TarrifId, int DoctId, int PatientType, int IPId, string SurgeryIds, int intUserId, int intWorkStationId, int intHospitalid, int intBedTypeID) {
            return base.Channel.GetCostEstimationDetails(PatientId, TarrifId, DoctId, PatientType, IPId, SurgeryIds, intUserId, intWorkStationId, intHospitalid, intBedTypeID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetCostEstimationDetailsAsync(int PatientId, int TarrifId, int DoctId, int PatientType, int IPId, string SurgeryIds, int intUserId, int intWorkStationId, int intHospitalid, int intBedTypeID) {
            return base.Channel.GetCostEstimationDetailsAsync(PatientId, TarrifId, DoctId, PatientType, IPId, SurgeryIds, intUserId, intWorkStationId, intHospitalid, intBedTypeID);
        }
        
        public int SaveCostEstimationDetails(int PatientId, decimal EstimatedAmount, decimal CPAY, System.Data.DataTable dtServices, int intUserId, int intWorkStationId) {
            return base.Channel.SaveCostEstimationDetails(PatientId, EstimatedAmount, CPAY, dtServices, intUserId, intWorkStationId);
        }
        
        public System.Threading.Tasks.Task<int> SaveCostEstimationDetailsAsync(int PatientId, decimal EstimatedAmount, decimal CPAY, System.Data.DataTable dtServices, int intUserId, int intWorkStationId) {
            return base.Channel.SaveCostEstimationDetailsAsync(PatientId, EstimatedAmount, CPAY, dtServices, intUserId, intWorkStationId);
        }
        
        public System.Data.DataSet GetHospitalVATRegistration(string Type, int HospitalId, int intUserID, int intWorkStationId) {
            return base.Channel.GetHospitalVATRegistration(Type, HospitalId, intUserID, intWorkStationId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetHospitalVATRegistrationAsync(string Type, int HospitalId, int intUserID, int intWorkStationId) {
            return base.Channel.GetHospitalVATRegistrationAsync(Type, HospitalId, intUserID, intWorkStationId);
        }
        
        public System.Data.DataSet GetMasterVATConfig(int PatientType, int HospitalId, int TaxType) {
            return base.Channel.GetMasterVATConfig(PatientType, HospitalId, TaxType);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetMasterVATConfigAsync(int PatientType, int HospitalId, int TaxType) {
            return base.Channel.GetMasterVATConfigAsync(PatientType, HospitalId, TaxType);
        }
        
        public System.Data.DataSet GetItemVATDetailsFromItemMaster(int itemId, int HospitalId) {
            return base.Channel.GetItemVATDetailsFromItemMaster(itemId, HospitalId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetItemVATDetailsFromItemMasterAsync(int itemId, int HospitalId) {
            return base.Channel.GetItemVATDetailsFromItemMasterAsync(itemId, HospitalId);
        }
        
        public int SaveUserAppointmentSpecialityMapping(int SID, System.Data.DataTable dtServices, int intUserId, int intWorkStationId) {
            return base.Channel.SaveUserAppointmentSpecialityMapping(SID, dtServices, intUserId, intWorkStationId);
        }
        
        public System.Threading.Tasks.Task<int> SaveUserAppointmentSpecialityMappingAsync(int SID, System.Data.DataTable dtServices, int intUserId, int intWorkStationId) {
            return base.Channel.SaveUserAppointmentSpecialityMappingAsync(SID, dtServices, intUserId, intWorkStationId);
        }
        
        public System.Data.DataSet fetchUserAppointmentSpecialityMapping(int SID, int intWorkStationId) {
            return base.Channel.fetchUserAppointmentSpecialityMapping(SID, intWorkStationId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> fetchUserAppointmentSpecialityMappingAsync(int SID, int intWorkStationId) {
            return base.Channel.fetchUserAppointmentSpecialityMappingAsync(SID, intWorkStationId);
        }
        
        public System.Data.DataSet GetWorkListDetailsPatientCheckIn(string strWorkListName, int TableId, int startrow, int endrow, string strfiltercondition, int intUserId, int intWorkStationId, System.Data.DataSet dsDBParams, string FromDate, string ToDate) {
            return base.Channel.GetWorkListDetailsPatientCheckIn(strWorkListName, TableId, startrow, endrow, strfiltercondition, intUserId, intWorkStationId, dsDBParams, FromDate, ToDate);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetWorkListDetailsPatientCheckInAsync(string strWorkListName, int TableId, int startrow, int endrow, string strfiltercondition, int intUserId, int intWorkStationId, System.Data.DataSet dsDBParams, string FromDate, string ToDate) {
            return base.Channel.GetWorkListDetailsPatientCheckInAsync(strWorkListName, TableId, startrow, endrow, strfiltercondition, intUserId, intWorkStationId, dsDBParams, FromDate, ToDate);
        }
        
        public string ResourceAavailability_Check(string strFromDate, string strToDate, string strDoctorId, System.Data.DataTable dtItems) {
            return base.Channel.ResourceAavailability_Check(strFromDate, strToDate, strDoctorId, dtItems);
        }
        
        public System.Threading.Tasks.Task<string> ResourceAavailability_CheckAsync(string strFromDate, string strToDate, string strDoctorId, System.Data.DataTable dtItems) {
            return base.Channel.ResourceAavailability_CheckAsync(strFromDate, strToDate, strDoctorId, dtItems);
        }
        
        public bool SaveDiscountPerf(string jsonStringForDisc, string jsonStringForVAT, long lngBillID, int intAuthorisedBy, string strReason, int intDiscountTypeID, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.SaveDiscountPerf(jsonStringForDisc, jsonStringForVAT, lngBillID, intAuthorisedBy, strReason, intDiscountTypeID, intUserId, intWorkStationId, intError);
        }
        
        public System.Threading.Tasks.Task<bool> SaveDiscountPerfAsync(string jsonStringForDisc, string jsonStringForVAT, long lngBillID, int intAuthorisedBy, string strReason, int intDiscountTypeID, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.SaveDiscountPerfAsync(jsonStringForDisc, jsonStringForVAT, lngBillID, intAuthorisedBy, strReason, intDiscountTypeID, intUserId, intWorkStationId, intError);
        }
        
        public System.Data.DataSet GetItemVATDetailsFromItemMasterOld(int itemId, int HospitalId, string BillDate) {
            return base.Channel.GetItemVATDetailsFromItemMasterOld(itemId, HospitalId, BillDate);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetItemVATDetailsFromItemMasterOldAsync(int itemId, int HospitalId, string BillDate) {
            return base.Channel.GetItemVATDetailsFromItemMasterOldAsync(itemId, HospitalId, BillDate);
        }
        
        public System.Data.DataSet GetMasterVATConfigOld(int PatientType, int HospitalId, int TaxType, string BillDate) {
            return base.Channel.GetMasterVATConfigOld(PatientType, HospitalId, TaxType, BillDate);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetMasterVATConfigOldAsync(int PatientType, int HospitalId, int TaxType, string BillDate) {
            return base.Channel.GetMasterVATConfigOldAsync(PatientType, HospitalId, TaxType, BillDate);
        }
        
        public System.Data.DataSet FetchPrescriptionData(int intIPID, int intUserid, int intWorkstationid) {
            return base.Channel.FetchPrescriptionData(intIPID, intUserid, intWorkstationid);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchPrescriptionDataAsync(int intIPID, int intUserid, int intWorkstationid) {
            return base.Channel.FetchPrescriptionDataAsync(intIPID, intUserid, intWorkstationid);
        }
        
        public System.Data.DataSet FetchNoofWalkins(int intEmpCliccodeID, int intUserid, int intWorkstationid) {
            return base.Channel.FetchNoofWalkins(intEmpCliccodeID, intUserid, intWorkstationid);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchNoofWalkinsAsync(int intEmpCliccodeID, int intUserid, int intWorkstationid) {
            return base.Channel.FetchNoofWalkinsAsync(intEmpCliccodeID, intUserid, intWorkstationid);
        }
        
        public System.Data.DataSet FetchVisitoutcomelaststatus(int PatientId, int Empcliniccodeid) {
            return base.Channel.FetchVisitoutcomelaststatus(PatientId, Empcliniccodeid);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchVisitoutcomelaststatusAsync(int PatientId, int Empcliniccodeid) {
            return base.Channel.FetchVisitoutcomelaststatusAsync(PatientId, Empcliniccodeid);
        }
        
        public string SaveSchoolInfo(int SchoolID, string SchoolName, string SchoolName2l, int SchoolTypeId, string SchoolAddress, string SchoolContactNumber, string Remarks, int UserId, int WorkStationId, int Error, bool Blocked) {
            return base.Channel.SaveSchoolInfo(SchoolID, SchoolName, SchoolName2l, SchoolTypeId, SchoolAddress, SchoolContactNumber, Remarks, UserId, WorkStationId, Error, Blocked);
        }
        
        public System.Threading.Tasks.Task<string> SaveSchoolInfoAsync(int SchoolID, string SchoolName, string SchoolName2l, int SchoolTypeId, string SchoolAddress, string SchoolContactNumber, string Remarks, int UserId, int WorkStationId, int Error, bool Blocked) {
            return base.Channel.SaveSchoolInfoAsync(SchoolID, SchoolName, SchoolName2l, SchoolTypeId, SchoolAddress, SchoolContactNumber, Remarks, UserId, WorkStationId, Error, Blocked);
        }
        
        public System.Data.DataSet FetchSchool(int SchoolID) {
            return base.Channel.FetchSchool(SchoolID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchSchoolAsync(int SchoolID) {
            return base.Channel.FetchSchoolAsync(SchoolID);
        }
        
        public System.Data.DataSet FetchSSNYakeenVerify(string SSN) {
            return base.Channel.FetchSSNYakeenVerify(SSN);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchSSNYakeenVerifyAsync(string SSN) {
            return base.Channel.FetchSSNYakeenVerifyAsync(SSN);
        }
        
        public System.Data.DataSet FetchSaveYakeenToken(int UserID, int WorkStationId) {
            return base.Channel.FetchSaveYakeenToken(UserID, WorkStationId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchSaveYakeenTokenAsync(int UserID, int WorkStationId) {
            return base.Channel.FetchSaveYakeenTokenAsync(UserID, WorkStationId);
        }
        
        public string SaveYakeenToken(System.Data.DataSet dsJWTToken) {
            return base.Channel.SaveYakeenToken(dsJWTToken);
        }
        
        public System.Threading.Tasks.Task<string> SaveYakeenTokenAsync(System.Data.DataSet dsJWTToken) {
            return base.Channel.SaveYakeenTokenAsync(dsJWTToken);
        }
        
        public System.Data.DataSet FetchYakeenMasters(int YakeenNationalityId, string YakeenGenderCode) {
            return base.Channel.FetchYakeenMasters(YakeenNationalityId, YakeenGenderCode);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchYakeenMastersAsync(int YakeenNationalityId, string YakeenGenderCode) {
            return base.Channel.FetchYakeenMastersAsync(YakeenNationalityId, YakeenGenderCode);
        }
        
        public string GetHijriDate(string strFilter) {
            return base.Channel.GetHijriDate(strFilter);
        }
        
        public System.Threading.Tasks.Task<string> GetHijriDateAsync(string strFilter) {
            return base.Channel.GetHijriDateAsync(strFilter);
        }
        
        public System.Data.DataSet FetchAllNationalities(string Filter) {
            return base.Channel.FetchAllNationalities(Filter);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchAllNationalitiesAsync(string Filter) {
            return base.Channel.FetchAllNationalitiesAsync(Filter);
        }
        
        public bool UpdatePatientsYakeen(int PatientID, System.Data.DataSet dsPatientYakeen, int intUserId, int intWorkStationId) {
            return base.Channel.UpdatePatientsYakeen(PatientID, dsPatientYakeen, intUserId, intWorkStationId);
        }
        
        public System.Threading.Tasks.Task<bool> UpdatePatientsYakeenAsync(int PatientID, System.Data.DataSet dsPatientYakeen, int intUserId, int intWorkStationId) {
            return base.Channel.UpdatePatientsYakeenAsync(PatientID, dsPatientYakeen, intUserId, intWorkStationId);
        }
        
        public string InsertPatientsYakeen(System.Data.DataSet dsYakeenPatient) {
            return base.Channel.InsertPatientsYakeen(dsYakeenPatient);
        }
        
        public System.Threading.Tasks.Task<string> InsertPatientsYakeenAsync(System.Data.DataSet dsYakeenPatient) {
            return base.Channel.InsertPatientsYakeenAsync(dsYakeenPatient);
        }
        
        public System.Data.DataSet FetchPatientEMRVisits(int PatientID, int HospitalD) {
            return base.Channel.FetchPatientEMRVisits(PatientID, HospitalD);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchPatientEMRVisitsAsync(int PatientID, int HospitalD) {
            return base.Channel.FetchPatientEMRVisitsAsync(PatientID, HospitalD);
        }
        
        public System.Data.DataSet FetchRegHospitalConfiguration(int Type, int Result, int HospitalID) {
            return base.Channel.FetchRegHospitalConfiguration(Type, Result, HospitalID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchRegHospitalConfigurationAsync(int Type, int Result, int HospitalID) {
            return base.Channel.FetchRegHospitalConfigurationAsync(Type, Result, HospitalID);
        }
        
        public System.Data.DataSet GetFOBillDetails(string strSelect, string strFilter, string strOrder, int intUserId, int intWorkStId, int user, string PatientType) {
            return base.Channel.GetFOBillDetails(strSelect, strFilter, strOrder, intUserId, intWorkStId, user, PatientType);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetFOBillDetailsAsync(string strSelect, string strFilter, string strOrder, int intUserId, int intWorkStId, int user, string PatientType) {
            return base.Channel.GetFOBillDetailsAsync(strSelect, strFilter, strOrder, intUserId, intWorkStId, user, PatientType);
        }
        
        public System.Data.DataSet GetScrollReportData(int intScrollId, string strTbl, int intUserId, int intWorkStationId) {
            return base.Channel.GetScrollReportData(intScrollId, strTbl, intUserId, intWorkStationId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetScrollReportDataAsync(int intScrollId, string strTbl, int intUserId, int intWorkStationId) {
            return base.Channel.GetScrollReportDataAsync(intScrollId, strTbl, intUserId, intWorkStationId);
        }
        
        public System.Data.DataSet GetHospScrollReportData(int intScrollId, string strTbl, int intUserId, int intWorkStationId, int intLocationID) {
            return base.Channel.GetHospScrollReportData(intScrollId, strTbl, intUserId, intWorkStationId, intLocationID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetHospScrollReportDataAsync(int intScrollId, string strTbl, int intUserId, int intWorkStationId, int intLocationID) {
            return base.Channel.GetHospScrollReportDataAsync(intScrollId, strTbl, intUserId, intWorkStationId, intLocationID);
        }
        
        public System.Data.DataSet GetSpecializationConfig(int intType, int intResult, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.GetSpecializationConfig(intType, intResult, intUserId, intWorkStationId, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetSpecializationConfigAsync(int intType, int intResult, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.GetSpecializationConfigAsync(intType, intResult, intUserId, intWorkStationId, intError);
        }
        
        public System.Data.DataSet EstimateBill(System.Data.DataSet dsEstimate, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.EstimateBill(dsEstimate, intUserId, intWorkStationId, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> EstimateBillAsync(System.Data.DataSet dsEstimate, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.EstimateBillAsync(dsEstimate, intUserId, intWorkStationId, intError);
        }
        
        public System.Data.DataSet FetchPatientHistoryDetails(string sSelect, string sFilter, string sOrder, int intUserID, int intWorkStationID, int intError) {
            return base.Channel.FetchPatientHistoryDetails(sSelect, sFilter, sOrder, intUserID, intWorkStationID, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchPatientHistoryDetailsAsync(string sSelect, string sFilter, string sOrder, int intUserID, int intWorkStationID, int intError) {
            return base.Channel.FetchPatientHistoryDetailsAsync(sSelect, sFilter, sOrder, intUserID, intWorkStationID, intError);
        }
        
        public System.Data.DataSet FetchDiscountsConfig(int DiscountId, string strTableId, int FeatureId, int FunctionId, string CallContext, int UserId, int WstationId, int intError) {
            return base.Channel.FetchDiscountsConfig(DiscountId, strTableId, FeatureId, FunctionId, CallContext, UserId, WstationId, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchDiscountsConfigAsync(int DiscountId, string strTableId, int FeatureId, int FunctionId, string CallContext, int UserId, int WstationId, int intError) {
            return base.Channel.FetchDiscountsConfigAsync(DiscountId, strTableId, FeatureId, FunctionId, CallContext, UserId, WstationId, intError);
        }
        
        public System.Data.DataSet GetDiscountsConfiglang(int DiscountId, string strTableId, int FeatureId, int FunctionId, string CallContext, int UserId, int WstationId, int intError, int intLanguageId) {
            return base.Channel.GetDiscountsConfiglang(DiscountId, strTableId, FeatureId, FunctionId, CallContext, UserId, WstationId, intError, intLanguageId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetDiscountsConfiglangAsync(int DiscountId, string strTableId, int FeatureId, int FunctionId, string CallContext, int UserId, int WstationId, int intError, int intLanguageId) {
            return base.Channel.GetDiscountsConfiglangAsync(DiscountId, strTableId, FeatureId, FunctionId, CallContext, UserId, WstationId, intError, intLanguageId);
        }
        
        public System.Data.DataSet DisplayARApprovals(int Type, string Filter, int UserID, int WorkStnID, int Error) {
            return base.Channel.DisplayARApprovals(Type, Filter, UserID, WorkStnID, Error);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> DisplayARApprovalsAsync(int Type, string Filter, int UserID, int WorkStnID, int Error) {
            return base.Channel.DisplayARApprovalsAsync(Type, Filter, UserID, WorkStnID, Error);
        }
        
        public System.Data.DataSet FetchBillDetailsAdv(int Type, string Filter, int intUserID, int intWorkStnId, int intError) {
            return base.Channel.FetchBillDetailsAdv(Type, Filter, intUserID, intWorkStnId, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchBillDetailsAdvAsync(int Type, string Filter, int intUserID, int intWorkStnId, int intError) {
            return base.Channel.FetchBillDetailsAdvAsync(Type, Filter, intUserID, intWorkStnId, intError);
        }
        
        public System.Data.DataSet FetchPackageStructure(int intPackageID, int intID, int intLevel, string strType, int intUserID, int intWorkStnId, int intError) {
            return base.Channel.FetchPackageStructure(intPackageID, intID, intLevel, strType, intUserID, intWorkStnId, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchPackageStructureAsync(int intPackageID, int intID, int intLevel, string strType, int intUserID, int intWorkStnId, int intError) {
            return base.Channel.FetchPackageStructureAsync(intPackageID, intID, intLevel, strType, intUserID, intWorkStnId, intError);
        }
        
        public System.Data.DataSet FetchPackageLOA(int intType, string strFilter, int intUserID, int intWorkStationID, int intError) {
            return base.Channel.FetchPackageLOA(intType, strFilter, intUserID, intWorkStationID, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchPackageLOAAsync(int intType, string strFilter, int intUserID, int intWorkStationID, int intError) {
            return base.Channel.FetchPackageLOAAsync(intType, strFilter, intUserID, intWorkStationID, intError);
        }
        
        public System.Data.DataSet FetchHospitalPackageLOA(int intType, string strFilter, int intUserID, int intWorkStationID, int intError, int HospitalID) {
            return base.Channel.FetchHospitalPackageLOA(intType, strFilter, intUserID, intWorkStationID, intError, HospitalID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchHospitalPackageLOAAsync(int intType, string strFilter, int intUserID, int intWorkStationID, int intError, int HospitalID) {
            return base.Channel.FetchHospitalPackageLOAAsync(intType, strFilter, intUserID, intWorkStationID, intError, HospitalID);
        }
        
        public System.Data.DataSet FetchPinBlock(int intType, string strFilter, int intUserID, int intWorkStationID, int intError) {
            return base.Channel.FetchPinBlock(intType, strFilter, intUserID, intWorkStationID, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchPinBlockAsync(int intType, string strFilter, int intUserID, int intWorkStationID, int intError) {
            return base.Channel.FetchPinBlockAsync(intType, strFilter, intUserID, intWorkStationID, intError);
        }
        
        public System.Data.DataSet GetOPPackagePrice(int intPackageID, int intType, int iUserId, int iWstationId, int iError) {
            return base.Channel.GetOPPackagePrice(intPackageID, intType, iUserId, iWstationId, iError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetOPPackagePriceAsync(int intPackageID, int intType, int iUserId, int iWstationId, int iError) {
            return base.Channel.GetOPPackagePriceAsync(intPackageID, intType, iUserId, iWstationId, iError);
        }
        
        public System.Data.DataSet UpdateAgreementData(System.Data.DataSet dsAggData, int intEligibleBedTypeID, int intGradeID, int PType) {
            return base.Channel.UpdateAgreementData(dsAggData, intEligibleBedTypeID, intGradeID, PType);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> UpdateAgreementDataAsync(System.Data.DataSet dsAggData, int intEligibleBedTypeID, int intGradeID, int PType) {
            return base.Channel.UpdateAgreementDataAsync(dsAggData, intEligibleBedTypeID, intGradeID, PType);
        }
        
        public System.Data.DataSet FetchOPBillDetailsForMapping(string strBillNo, string strTableId, int IntUserId, int intWorkStationId, int intError, int FeatureId, int FunctionId, string CallContext, int intLangID) {
            return base.Channel.FetchOPBillDetailsForMapping(strBillNo, strTableId, IntUserId, intWorkStationId, intError, FeatureId, FunctionId, CallContext, intLangID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchOPBillDetailsForMappingAsync(string strBillNo, string strTableId, int IntUserId, int intWorkStationId, int intError, int FeatureId, int FunctionId, string CallContext, int intLangID) {
            return base.Channel.FetchOPBillDetailsForMappingAsync(strBillNo, strTableId, IntUserId, intWorkStationId, intError, FeatureId, FunctionId, CallContext, intLangID);
        }
        
        public System.Data.DataSet FetchPatientClinicalConditions(int intEpisodeID, int intUserId, int intWorkStationId) {
            return base.Channel.FetchPatientClinicalConditions(intEpisodeID, intUserId, intWorkStationId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchPatientClinicalConditionsAsync(int intEpisodeID, int intUserId, int intWorkStationId) {
            return base.Channel.FetchPatientClinicalConditionsAsync(intEpisodeID, intUserId, intWorkStationId);
        }
        
        public int FetchEpisodeID_old(string SFilter, int intUserId, int intWorkStationId) {
            return base.Channel.FetchEpisodeID_old(SFilter, intUserId, intWorkStationId);
        }
        
        public System.Threading.Tasks.Task<int> FetchEpisodeID_oldAsync(string SFilter, int intUserId, int intWorkStationId) {
            return base.Channel.FetchEpisodeID_oldAsync(SFilter, intUserId, intWorkStationId);
        }
        
        public System.Data.DataSet FetchEpisodeID(string SFilter, int intUserId, int intWorkStationId) {
            return base.Channel.FetchEpisodeID(SFilter, intUserId, intWorkStationId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchEpisodeIDAsync(string SFilter, int intUserId, int intWorkStationId) {
            return base.Channel.FetchEpisodeIDAsync(SFilter, intUserId, intWorkStationId);
        }
        
        public decimal FetchMaxCollectable(System.DateTime dtFromdate, System.DateTime dtToDate, int intPatientID, int intGradeID, int intCompanyID, int intSpecialisationID, int intLOAID, string strtbl, int intUserId, int intWorkStationId, int intError, int intFeatureId, int intFunctionId, string strCallContext) {
            return base.Channel.FetchMaxCollectable(dtFromdate, dtToDate, intPatientID, intGradeID, intCompanyID, intSpecialisationID, intLOAID, strtbl, intUserId, intWorkStationId, intError, intFeatureId, intFunctionId, strCallContext);
        }
        
        public System.Threading.Tasks.Task<decimal> FetchMaxCollectableAsync(System.DateTime dtFromdate, System.DateTime dtToDate, int intPatientID, int intGradeID, int intCompanyID, int intSpecialisationID, int intLOAID, string strtbl, int intUserId, int intWorkStationId, int intError, int intFeatureId, int intFunctionId, string strCallContext) {
            return base.Channel.FetchMaxCollectableAsync(dtFromdate, dtToDate, intPatientID, intGradeID, intCompanyID, intSpecialisationID, intLOAID, strtbl, intUserId, intWorkStationId, intError, intFeatureId, intFunctionId, strCallContext);
        }
        
        public System.Data.DataSet FetchMaxCollectableForPharmacy(System.DateTime dtFromdate, System.DateTime dtToDate, int intPatientID, int intGradeID, int intCompanyID, int intSpecialisationID, int intLOAID, string strtbl, int intUserId, int intWorkStationId, int intError, int intFeatureId, int intFunctionId, string strCallContext) {
            return base.Channel.FetchMaxCollectableForPharmacy(dtFromdate, dtToDate, intPatientID, intGradeID, intCompanyID, intSpecialisationID, intLOAID, strtbl, intUserId, intWorkStationId, intError, intFeatureId, intFunctionId, strCallContext);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchMaxCollectableForPharmacyAsync(System.DateTime dtFromdate, System.DateTime dtToDate, int intPatientID, int intGradeID, int intCompanyID, int intSpecialisationID, int intLOAID, string strtbl, int intUserId, int intWorkStationId, int intError, int intFeatureId, int intFunctionId, string strCallContext) {
            return base.Channel.FetchMaxCollectableForPharmacyAsync(dtFromdate, dtToDate, intPatientID, intGradeID, intCompanyID, intSpecialisationID, intLOAID, strtbl, intUserId, intWorkStationId, intError, intFeatureId, intFunctionId, strCallContext);
        }
        
        public System.Data.DataSet FetchScheduledConsultations(int PatientId, int NoOFdays, int HospitalID) {
            return base.Channel.FetchScheduledConsultations(PatientId, NoOFdays, HospitalID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchScheduledConsultationsAsync(int PatientId, int NoOFdays, int HospitalID) {
            return base.Channel.FetchScheduledConsultationsAsync(PatientId, NoOFdays, HospitalID);
        }
        
        public System.Data.DataSet FetchModuleArabizationStatus(int ModuleId, int Table, int UserId, int WorkStationId) {
            return base.Channel.FetchModuleArabizationStatus(ModuleId, Table, UserId, WorkStationId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchModuleArabizationStatusAsync(int ModuleId, int Table, int UserId, int WorkStationId) {
            return base.Channel.FetchModuleArabizationStatusAsync(ModuleId, Table, UserId, WorkStationId);
        }
        
        public bool WSCheckFollowUpLimit(int ServiceID, int SpecialiseID, int OrderTypeID, int PatientID, int UserID, int WorkStationID, int Error) {
            return base.Channel.WSCheckFollowUpLimit(ServiceID, SpecialiseID, OrderTypeID, PatientID, UserID, WorkStationID, Error);
        }
        
        public System.Threading.Tasks.Task<bool> WSCheckFollowUpLimitAsync(int ServiceID, int SpecialiseID, int OrderTypeID, int PatientID, int UserID, int WorkStationID, int Error) {
            return base.Channel.WSCheckFollowUpLimitAsync(ServiceID, SpecialiseID, OrderTypeID, PatientID, UserID, WorkStationID, Error);
        }
        
        public System.Data.DataSet GetBillPrintDetails(string strBillID, string strBillNo, int IntUserId, int intWorkStationId, int intError) {
            return base.Channel.GetBillPrintDetails(strBillID, strBillNo, IntUserId, intWorkStationId, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetBillPrintDetailsAsync(string strBillID, string strBillNo, int IntUserId, int intWorkStationId, int intError) {
            return base.Channel.GetBillPrintDetailsAsync(strBillID, strBillNo, IntUserId, intWorkStationId, intError);
        }
        
        public System.Data.DataSet GetGradeDoctorSpecializationWS(int PatientId, int DoctorId, int SpecializationId, int ServiceId, string Table, int UserId, int WorkstationId, int Error) {
            return base.Channel.GetGradeDoctorSpecializationWS(PatientId, DoctorId, SpecializationId, ServiceId, Table, UserId, WorkstationId, Error);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetGradeDoctorSpecializationWSAsync(int PatientId, int DoctorId, int SpecializationId, int ServiceId, string Table, int UserId, int WorkstationId, int Error) {
            return base.Channel.GetGradeDoctorSpecializationWSAsync(PatientId, DoctorId, SpecializationId, ServiceId, Table, UserId, WorkstationId, Error);
        }
        
        public System.Data.DataSet FetchBillDetailsforPrinting(string strBillNo, int IntUserId, int intWorkStationId, int intError, int LangID) {
            return base.Channel.FetchBillDetailsforPrinting(strBillNo, IntUserId, intWorkStationId, intError, LangID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchBillDetailsforPrintingAsync(string strBillNo, int IntUserId, int intWorkStationId, int intError, int LangID) {
            return base.Channel.FetchBillDetailsforPrintingAsync(strBillNo, IntUserId, intWorkStationId, intError, LangID);
        }
        
        public System.Data.DataSet GetDiscBillDetails(long lngBillID, string strBillNo, long lngIPID, int intPatientType, int intTableID, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.GetDiscBillDetails(lngBillID, strBillNo, lngIPID, intPatientType, intTableID, intUserId, intWorkStationId, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetDiscBillDetailsAsync(long lngBillID, string strBillNo, long lngIPID, int intPatientType, int intTableID, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.GetDiscBillDetailsAsync(lngBillID, strBillNo, lngIPID, intPatientType, intTableID, intUserId, intWorkStationId, intError);
        }
        
        public System.Data.DataSet GetDiscBillDetailsTagID(long lngBillID, string strBillNo, long lngIPID, int intPatientType, int intTableID, int intUserId, int intWorkStationId, int intError, int tagid) {
            return base.Channel.GetDiscBillDetailsTagID(lngBillID, strBillNo, lngIPID, intPatientType, intTableID, intUserId, intWorkStationId, intError, tagid);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetDiscBillDetailsTagIDAsync(long lngBillID, string strBillNo, long lngIPID, int intPatientType, int intTableID, int intUserId, int intWorkStationId, int intError, int tagid) {
            return base.Channel.GetDiscBillDetailsTagIDAsync(lngBillID, strBillNo, lngIPID, intPatientType, intTableID, intUserId, intWorkStationId, intError, tagid);
        }
        
        public System.Data.DataSet GetTableDetails(string strTableName, string strColName, string strParam) {
            return base.Channel.GetTableDetails(strTableName, strColName, strParam);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetTableDetailsAsync(string strTableName, string strColName, string strParam) {
            return base.Channel.GetTableDetailsAsync(strTableName, strColName, strParam);
        }
        
        public System.Data.DataSet FetchConsultationConfig(int DocID, int HospitalID, string TBL, int UserID, int WorkstationID, int intError) {
            return base.Channel.FetchConsultationConfig(DocID, HospitalID, TBL, UserID, WorkstationID, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchConsultationConfigAsync(int DocID, int HospitalID, string TBL, int UserID, int WorkstationID, int intError) {
            return base.Channel.FetchConsultationConfigAsync(DocID, HospitalID, TBL, UserID, WorkstationID, intError);
        }
        
        public System.Data.DataSet FetchMaxDaywiseAppointments(int DocID, int HospitalID, string TBL, int UserId, int WstationId, int intError, System.DateTime Appointmentdate) {
            return base.Channel.FetchMaxDaywiseAppointments(DocID, HospitalID, TBL, UserId, WstationId, intError, Appointmentdate);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchMaxDaywiseAppointmentsAsync(int DocID, int HospitalID, string TBL, int UserId, int WstationId, int intError, System.DateTime Appointmentdate) {
            return base.Channel.FetchMaxDaywiseAppointmentsAsync(DocID, HospitalID, TBL, UserId, WstationId, intError, Appointmentdate);
        }
        
        public System.Data.DataSet FetchConsultations_Perf(int intTableId, string strFilter, int intUserId, int intWorkStationId, int intError, int LangID, int DoctorID, System.DateTime OrderDate, int hospitalID) {
            return base.Channel.FetchConsultations_Perf(intTableId, strFilter, intUserId, intWorkStationId, intError, LangID, DoctorID, OrderDate, hospitalID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchConsultations_PerfAsync(int intTableId, string strFilter, int intUserId, int intWorkStationId, int intError, int LangID, int DoctorID, System.DateTime OrderDate, int hospitalID) {
            return base.Channel.FetchConsultations_PerfAsync(intTableId, strFilter, intUserId, intWorkStationId, intError, LangID, DoctorID, OrderDate, hospitalID);
        }
        
        public string SaveBill(System.Data.DataSet dsBill, string BillPrefix, string ParentBillId) {
            return base.Channel.SaveBill(dsBill, BillPrefix, ParentBillId);
        }
        
        public System.Threading.Tasks.Task<string> SaveBillAsync(System.Data.DataSet dsBill, string BillPrefix, string ParentBillId) {
            return base.Channel.SaveBillAsync(dsBill, BillPrefix, ParentBillId);
        }
        
        public int UpdatePatientDetails(System.Data.DataSet ds) {
            return base.Channel.UpdatePatientDetails(ds);
        }
        
        public System.Threading.Tasks.Task<int> UpdatePatientDetailsAsync(System.Data.DataSet ds) {
            return base.Channel.UpdatePatientDetailsAsync(ds);
        }
        
        public string SaveDeposit(System.Data.DataSet dsDeposit) {
            return base.Channel.SaveDeposit(dsDeposit);
        }
        
        public System.Threading.Tasks.Task<string> SaveDepositAsync(System.Data.DataSet dsDeposit) {
            return base.Channel.SaveDepositAsync(dsDeposit);
        }
        
        public string SaveReceipt(System.Data.DataSet dsReceipt) {
            return base.Channel.SaveReceipt(dsReceipt);
        }
        
        public System.Threading.Tasks.Task<string> SaveReceiptAsync(System.Data.DataSet dsReceipt) {
            return base.Channel.SaveReceiptAsync(dsReceipt);
        }
        
        public bool CancelBill(System.Data.DataSet dsBillDetails) {
            return base.Channel.CancelBill(dsBillDetails);
        }
        
        public System.Threading.Tasks.Task<bool> CancelBillAsync(System.Data.DataSet dsBillDetails) {
            return base.Channel.CancelBillAsync(dsBillDetails);
        }
        
        public bool SaveDiscount(System.Data.DataSet dsDiscount, long lngBillID, int intAuthorisedBy, string strReason, int intDiscountTypeID, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.SaveDiscount(dsDiscount, lngBillID, intAuthorisedBy, strReason, intDiscountTypeID, intUserId, intWorkStationId, intError);
        }
        
        public System.Threading.Tasks.Task<bool> SaveDiscountAsync(System.Data.DataSet dsDiscount, long lngBillID, int intAuthorisedBy, string strReason, int intDiscountTypeID, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.SaveDiscountAsync(dsDiscount, lngBillID, intAuthorisedBy, strReason, intDiscountTypeID, intUserId, intWorkStationId, intError);
        }
        
        public bool SaveRegConfiguration(System.Data.DataSet dsConfig, int intUserId, int intWorkStationId, int intError, int Hospitalid) {
            return base.Channel.SaveRegConfiguration(dsConfig, intUserId, intWorkStationId, intError, Hospitalid);
        }
        
        public System.Threading.Tasks.Task<bool> SaveRegConfigurationAsync(System.Data.DataSet dsConfig, int intUserId, int intWorkStationId, int intError, int Hospitalid) {
            return base.Channel.SaveRegConfigurationAsync(dsConfig, intUserId, intWorkStationId, intError, Hospitalid);
        }
        
        public bool SaveUHIDmerging(int ParentID, System.Data.DataSet dsChild, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.SaveUHIDmerging(ParentID, dsChild, intUserId, intWorkStationId, intError);
        }
        
        public System.Threading.Tasks.Task<bool> SaveUHIDmergingAsync(int ParentID, System.Data.DataSet dsChild, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.SaveUHIDmergingAsync(ParentID, dsChild, intUserId, intWorkStationId, intError);
        }
        
        public string SaveScrollReport(System.Data.DataSet dsScroll, int intScrollModuleId, int ScrollUserId, int intUserId, int intWorkStationId, int intRoutID) {
            return base.Channel.SaveScrollReport(dsScroll, intScrollModuleId, ScrollUserId, intUserId, intWorkStationId, intRoutID);
        }
        
        public System.Threading.Tasks.Task<string> SaveScrollReportAsync(System.Data.DataSet dsScroll, int intScrollModuleId, int ScrollUserId, int intUserId, int intWorkStationId, int intRoutID) {
            return base.Channel.SaveScrollReportAsync(dsScroll, intScrollModuleId, ScrollUserId, intUserId, intWorkStationId, intRoutID);
        }
        
        public int UpdateDeposit(int EntryID, int BlockId, decimal Amount, int intUserID, int intWorkStationID, int intError) {
            return base.Channel.UpdateDeposit(EntryID, BlockId, Amount, intUserID, intWorkStationID, intError);
        }
        
        public System.Threading.Tasks.Task<int> UpdateDepositAsync(int EntryID, int BlockId, decimal Amount, int intUserID, int intWorkStationID, int intError) {
            return base.Channel.UpdateDepositAsync(EntryID, BlockId, Amount, intUserID, intWorkStationID, intError);
        }
        
        public int UpdateDepositIPID(int EntryID, int BlockId, decimal Amount, int intUserID, int intWorkStationID, int intError, int intIPID) {
            return base.Channel.UpdateDepositIPID(EntryID, BlockId, Amount, intUserID, intWorkStationID, intError, intIPID);
        }
        
        public System.Threading.Tasks.Task<int> UpdateDepositIPIDAsync(int EntryID, int BlockId, decimal Amount, int intUserID, int intWorkStationID, int intError, int intIPID) {
            return base.Channel.UpdateDepositIPIDAsync(EntryID, BlockId, Amount, intUserID, intWorkStationID, intError, intIPID);
        }
        
        public int UpdateBillPrintStatus(string BillID, bool IsPrint, int intUserID, int intWorkStationID, int intError, int FeatureId, int FunctionId, string CallContext) {
            return base.Channel.UpdateBillPrintStatus(BillID, IsPrint, intUserID, intWorkStationID, intError, FeatureId, FunctionId, CallContext);
        }
        
        public System.Threading.Tasks.Task<int> UpdateBillPrintStatusAsync(string BillID, bool IsPrint, int intUserID, int intWorkStationID, int intError, int FeatureId, int FunctionId, string CallContext) {
            return base.Channel.UpdateBillPrintStatusAsync(BillID, IsPrint, intUserID, intWorkStationID, intError, FeatureId, FunctionId, CallContext);
        }
        
        public bool IsItemSlotConfigured(int ServiceID, int ServiceItemID, int TableID, int UserID, int WorkStationID, int Error, int Hospitalid) {
            return base.Channel.IsItemSlotConfigured(ServiceID, ServiceItemID, TableID, UserID, WorkStationID, Error, Hospitalid);
        }
        
        public System.Threading.Tasks.Task<bool> IsItemSlotConfiguredAsync(int ServiceID, int ServiceItemID, int TableID, int UserID, int WorkStationID, int Error, int Hospitalid) {
            return base.Channel.IsItemSlotConfiguredAsync(ServiceID, ServiceItemID, TableID, UserID, WorkStationID, Error, Hospitalid);
        }
        
        public System.Data.DataSet GetLOAonEMPID(int intPatientID, string strEmpID, int intCompanyID, int intDoctorID, int intUserID, int intWorkStationID, int intError) {
            return base.Channel.GetLOAonEMPID(intPatientID, strEmpID, intCompanyID, intDoctorID, intUserID, intWorkStationID, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetLOAonEMPIDAsync(int intPatientID, string strEmpID, int intCompanyID, int intDoctorID, int intUserID, int intWorkStationID, int intError) {
            return base.Channel.GetLOAonEMPIDAsync(intPatientID, strEmpID, intCompanyID, intDoctorID, intUserID, intWorkStationID, intError);
        }
        
        public bool DeleteDiscount(int DisID, int BillID, int intAuthorisedBy, string strReason, int intUserId, int intWorkStationId, int intError, double amt, int type) {
            return base.Channel.DeleteDiscount(DisID, BillID, intAuthorisedBy, strReason, intUserId, intWorkStationId, intError, amt, type);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteDiscountAsync(int DisID, int BillID, int intAuthorisedBy, string strReason, int intUserId, int intWorkStationId, int intError, double amt, int type) {
            return base.Channel.DeleteDiscountAsync(DisID, BillID, intAuthorisedBy, strReason, intUserId, intWorkStationId, intError, amt, type);
        }
        
        public bool DeleteDiscountNew(string jsonStringForVAT, int DisID, int BillID, int intAuthorisedBy, string strReason, int intUserId, int intWorkStationId, int intError, double amt, int type) {
            return base.Channel.DeleteDiscountNew(jsonStringForVAT, DisID, BillID, intAuthorisedBy, strReason, intUserId, intWorkStationId, intError, amt, type);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteDiscountNewAsync(string jsonStringForVAT, int DisID, int BillID, int intAuthorisedBy, string strReason, int intUserId, int intWorkStationId, int intError, double amt, int type) {
            return base.Channel.DeleteDiscountNewAsync(jsonStringForVAT, DisID, BillID, intAuthorisedBy, strReason, intUserId, intWorkStationId, intError, amt, type);
        }
        
        public string ModifyPayerPatientList(System.Data.DataSet dsPatient) {
            return base.Channel.ModifyPayerPatientList(dsPatient);
        }
        
        public System.Threading.Tasks.Task<string> ModifyPayerPatientListAsync(System.Data.DataSet dsPatient) {
            return base.Channel.ModifyPayerPatientListAsync(dsPatient);
        }
        
        public string SavePayerPatientList(System.Data.DataSet dsPatient) {
            return base.Channel.SavePayerPatientList(dsPatient);
        }
        
        public System.Threading.Tasks.Task<string> SavePayerPatientListAsync(System.Data.DataSet dsPatient) {
            return base.Channel.SavePayerPatientListAsync(dsPatient);
        }
        
        public System.Data.DataSet FetchPayerPatientList(string strPatId, bool BlnDeleted, int intUserId, int intWorkStnId, int intError) {
            return base.Channel.FetchPayerPatientList(strPatId, BlnDeleted, intUserId, intWorkStnId, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchPayerPatientListAsync(string strPatId, bool BlnDeleted, int intUserId, int intWorkStnId, int intError) {
            return base.Channel.FetchPayerPatientListAsync(strPatId, BlnDeleted, intUserId, intWorkStnId, intError);
        }
        
        public System.Data.DataSet FetchPayerPatientListTagID(string strPatId, bool BlnDeleted, int intUserId, int intWorkStnId, int intError, int tagId) {
            return base.Channel.FetchPayerPatientListTagID(strPatId, BlnDeleted, intUserId, intWorkStnId, intError, tagId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchPayerPatientListTagIDAsync(string strPatId, bool BlnDeleted, int intUserId, int intWorkStnId, int intError, int tagId) {
            return base.Channel.FetchPayerPatientListTagIDAsync(strPatId, BlnDeleted, intUserId, intWorkStnId, intError, tagId);
        }
        
        public int CheckEmpId(string EmpId, int CompanyId) {
            return base.Channel.CheckEmpId(EmpId, CompanyId);
        }
        
        public System.Threading.Tasks.Task<int> CheckEmpIdAsync(string EmpId, int CompanyId) {
            return base.Channel.CheckEmpIdAsync(EmpId, CompanyId);
        }
        
        public bool SaveConsultationConfig(int DocID, int HospitalID, System.Data.DataSet dsConsultationConfig, int UserID, int WorkstationID, int intError) {
            return base.Channel.SaveConsultationConfig(DocID, HospitalID, dsConsultationConfig, UserID, WorkstationID, intError);
        }
        
        public System.Threading.Tasks.Task<bool> SaveConsultationConfigAsync(int DocID, int HospitalID, System.Data.DataSet dsConsultationConfig, int UserID, int WorkstationID, int intError) {
            return base.Channel.SaveConsultationConfigAsync(DocID, HospitalID, dsConsultationConfig, UserID, WorkstationID, intError);
        }
        
        public string SavePatient(System.Data.DataSet dsPatient) {
            return base.Channel.SavePatient(dsPatient);
        }
        
        public System.Threading.Tasks.Task<string> SavePatientAsync(System.Data.DataSet dsPatient) {
            return base.Channel.SavePatientAsync(dsPatient);
        }
        
        public string SavePrePatient(System.Data.DataSet dsPatient) {
            return base.Channel.SavePrePatient(dsPatient);
        }
        
        public System.Threading.Tasks.Task<string> SavePrePatientAsync(System.Data.DataSet dsPatient) {
            return base.Channel.SavePrePatientAsync(dsPatient);
        }
        
        public string UpdatePatient(System.Data.DataSet dsPatient) {
            return base.Channel.UpdatePatient(dsPatient);
        }
        
        public System.Threading.Tasks.Task<string> UpdatePatientAsync(System.Data.DataSet dsPatient) {
            return base.Channel.UpdatePatientAsync(dsPatient);
        }
        
        public string SaveModifyInpatients(bool blnFlag, System.Data.DataSet objDS, int intUserID, int intWorkStationId) {
            return base.Channel.SaveModifyInpatients(blnFlag, objDS, intUserID, intWorkStationId);
        }
        
        public System.Threading.Tasks.Task<string> SaveModifyInpatientsAsync(bool blnFlag, System.Data.DataSet objDS, int intUserID, int intWorkStationId) {
            return base.Channel.SaveModifyInpatientsAsync(blnFlag, objDS, intUserID, intWorkStationId);
        }
        
        public System.Data.DataSet SetBillDetails(System.Data.DataSet dsBillDetails, int IntUserId, int intWorkStationId, int intError, int LangID) {
            return base.Channel.SetBillDetails(dsBillDetails, IntUserId, intWorkStationId, intError, LangID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SetBillDetailsAsync(System.Data.DataSet dsBillDetails, int IntUserId, int intWorkStationId, int intError, int LangID) {
            return base.Channel.SetBillDetailsAsync(dsBillDetails, IntUserId, intWorkStationId, intError, LangID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Reports.FrontOfficeServiceClient.SetBillDetailsNewResponse Reports.FrontOfficeServiceClient.FrontOfficeServiceContract.SetBillDetailsNew(Reports.FrontOfficeServiceClient.SetBillDetailsNewRequest request) {
            return base.Channel.SetBillDetailsNew(request);
        }
        
        public System.Data.DataSet SetBillDetailsNew(System.Data.DataSet dsBillDetails, int IntUserId, int intWorkStationId, int intError, int LangID, out string strValue, out string StrClinical) {
            Reports.FrontOfficeServiceClient.SetBillDetailsNewRequest inValue = new Reports.FrontOfficeServiceClient.SetBillDetailsNewRequest();
            inValue.dsBillDetails = dsBillDetails;
            inValue.IntUserId = IntUserId;
            inValue.intWorkStationId = intWorkStationId;
            inValue.intError = intError;
            inValue.LangID = LangID;
            Reports.FrontOfficeServiceClient.SetBillDetailsNewResponse retVal = ((Reports.FrontOfficeServiceClient.FrontOfficeServiceContract)(this)).SetBillDetailsNew(inValue);
            strValue = retVal.strValue;
            StrClinical = retVal.StrClinical;
            return retVal.SetBillDetailsNewResult;
        }
        
        public System.Threading.Tasks.Task<Reports.FrontOfficeServiceClient.SetBillDetailsNewResponse> SetBillDetailsNewAsync(Reports.FrontOfficeServiceClient.SetBillDetailsNewRequest request) {
            return base.Channel.SetBillDetailsNewAsync(request);
        }
        
        public System.Data.DataSet ProcessBillDetails(System.Data.DataSet DsCreditBillDetails, int BillType, int Priority, System.Data.DataSet dsOrderAndProfile, string strFilterDeposit, int IntUserId, int intWorkStationId, int intTransType) {
            return base.Channel.ProcessBillDetails(DsCreditBillDetails, BillType, Priority, dsOrderAndProfile, strFilterDeposit, IntUserId, intWorkStationId, intTransType);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> ProcessBillDetailsAsync(System.Data.DataSet DsCreditBillDetails, int BillType, int Priority, System.Data.DataSet dsOrderAndProfile, string strFilterDeposit, int IntUserId, int intWorkStationId, int intTransType) {
            return base.Channel.ProcessBillDetailsAsync(DsCreditBillDetails, BillType, Priority, dsOrderAndProfile, strFilterDeposit, IntUserId, intWorkStationId, intTransType);
        }
        
        public int SaveTempBillDetails(System.Data.DataSet dtTempBillDetails, string strSessionId, string strAdmissionUHID, int intPatientType, int intBillType, int intPatienId) {
            return base.Channel.SaveTempBillDetails(dtTempBillDetails, strSessionId, strAdmissionUHID, intPatientType, intBillType, intPatienId);
        }
        
        public System.Threading.Tasks.Task<int> SaveTempBillDetailsAsync(System.Data.DataSet dtTempBillDetails, string strSessionId, string strAdmissionUHID, int intPatientType, int intBillType, int intPatienId) {
            return base.Channel.SaveTempBillDetailsAsync(dtTempBillDetails, strSessionId, strAdmissionUHID, intPatientType, intBillType, intPatienId);
        }
        
        public int SaveIPTempBillDetails(System.Data.DataSet dtTempBillDetails, string strSessionId, string strAdmissionUHID, int intPatientType, int intBillType, int intPatienId) {
            return base.Channel.SaveIPTempBillDetails(dtTempBillDetails, strSessionId, strAdmissionUHID, intPatientType, intBillType, intPatienId);
        }
        
        public System.Threading.Tasks.Task<int> SaveIPTempBillDetailsAsync(System.Data.DataSet dtTempBillDetails, string strSessionId, string strAdmissionUHID, int intPatientType, int intBillType, int intPatienId) {
            return base.Channel.SaveIPTempBillDetailsAsync(dtTempBillDetails, strSessionId, strAdmissionUHID, intPatientType, intBillType, intPatienId);
        }
        
        public int SaveTempBillDetailsForOP(System.Data.DataSet dtTempBillDetails, string strSessionId, string strAdmissionUHID, int intPatientType, int intBillType, int intPatienId) {
            return base.Channel.SaveTempBillDetailsForOP(dtTempBillDetails, strSessionId, strAdmissionUHID, intPatientType, intBillType, intPatienId);
        }
        
        public System.Threading.Tasks.Task<int> SaveTempBillDetailsForOPAsync(System.Data.DataSet dtTempBillDetails, string strSessionId, string strAdmissionUHID, int intPatientType, int intBillType, int intPatienId) {
            return base.Channel.SaveTempBillDetailsForOPAsync(dtTempBillDetails, strSessionId, strAdmissionUHID, intPatientType, intBillType, intPatienId);
        }
        
        public System.Data.DataSet GetBillDetailsWithCardorCash(string strBillId, string strTableID, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.GetBillDetailsWithCardorCash(strBillId, strTableID, intUserId, intWorkStationId, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetBillDetailsWithCardorCashAsync(string strBillId, string strTableID, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.GetBillDetailsWithCardorCashAsync(strBillId, strTableID, intUserId, intWorkStationId, intError);
        }
        
        public System.Data.DataSet GetBedRentals() {
            return base.Channel.GetBedRentals();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetBedRentalsAsync() {
            return base.Channel.GetBedRentalsAsync();
        }
        
        public System.Data.DataSet GetTempBillDetails(System.Data.DataTable dtBreakUpRequisition) {
            return base.Channel.GetTempBillDetails(dtBreakUpRequisition);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetTempBillDetailsAsync(System.Data.DataTable dtBreakUpRequisition) {
            return base.Channel.GetTempBillDetailsAsync(dtBreakUpRequisition);
        }
        
        public int SaveTempLOAContribution(System.Data.DataTable dtLOAContribution, string strSessionId, string strAdmissionUHID, int intPatientType, int intBillType, int intPatienId) {
            return base.Channel.SaveTempLOAContribution(dtLOAContribution, strSessionId, strAdmissionUHID, intPatientType, intBillType, intPatienId);
        }
        
        public System.Threading.Tasks.Task<int> SaveTempLOAContributionAsync(System.Data.DataTable dtLOAContribution, string strSessionId, string strAdmissionUHID, int intPatientType, int intBillType, int intPatienId) {
            return base.Channel.SaveTempLOAContributionAsync(dtLOAContribution, strSessionId, strAdmissionUHID, intPatientType, intBillType, intPatienId);
        }
        
        public int SaveDoctorAvaliable(System.Data.DataSet objDSSave) {
            return base.Channel.SaveDoctorAvaliable(objDSSave);
        }
        
        public System.Threading.Tasks.Task<int> SaveDoctorAvaliableAsync(System.Data.DataSet objDSSave) {
            return base.Channel.SaveDoctorAvaliableAsync(objDSSave);
        }
        
        public string CheckNationalID(string NationalId) {
            return base.Channel.CheckNationalID(NationalId);
        }
        
        public System.Threading.Tasks.Task<string> CheckNationalIDAsync(string NationalId) {
            return base.Channel.CheckNationalIDAsync(NationalId);
        }
        
        public System.Data.DataSet ValidateResourceSlots(int DoctorID, System.DateTime Fromdate, System.DateTime Todate, int IntUserId, int intWorkStationId, int error) {
            return base.Channel.ValidateResourceSlots(DoctorID, Fromdate, Todate, IntUserId, intWorkStationId, error);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> ValidateResourceSlotsAsync(int DoctorID, System.DateTime Fromdate, System.DateTime Todate, int IntUserId, int intWorkStationId, int error) {
            return base.Channel.ValidateResourceSlotsAsync(DoctorID, Fromdate, Todate, IntUserId, intWorkStationId, error);
        }
        
        public System.Data.DataSet ValidateResourceSlotsAvail(int DoctorID, System.DateTime Fromdate, int HospitalID, int FeatureId, int FunctionId, string CallContext) {
            return base.Channel.ValidateResourceSlotsAvail(DoctorID, Fromdate, HospitalID, FeatureId, FunctionId, CallContext);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> ValidateResourceSlotsAvailAsync(int DoctorID, System.DateTime Fromdate, int HospitalID, int FeatureId, int FunctionId, string CallContext) {
            return base.Channel.ValidateResourceSlotsAvailAsync(DoctorID, Fromdate, HospitalID, FeatureId, FunctionId, CallContext);
        }
        
        public string SaveCheckInBillType(
                    System.Data.DataSet dsChekIn, 
                    int AdmissionID, 
                    int PatientID, 
                    int HospitalID, 
                    int Investigation, 
                    int IpOpProcedures, 
                    int Pharmacy, 
                    int VisitID, 
                    int VisitType, 
                    int DoctorID, 
                    bool ISExternal, 
                    int EpisodeID, 
                    int RefDoctorID, 
                    int intFeatureId, 
                    int intFunctionId, 
                    string strCallContext, 
                    bool CheckIn, 
                    int intUserId, 
                    int intWorkStationId, 
                    int intError, 
                    System.Data.DataSet Diseasecode, 
                    int ActiveInsID, 
                    byte IsCollectablebyEmployer, 
                    byte IsDeductablebyEmployer, 
                    byte IsSupplimentarybyEmployer, 
                    byte IsExcessbyEmployer, 
                    int IsNewCheckin, 
                    int SpecialisationID, 
                    int PatientType, 
                    int BillType) {
            return base.Channel.SaveCheckInBillType(dsChekIn, AdmissionID, PatientID, HospitalID, Investigation, IpOpProcedures, Pharmacy, VisitID, VisitType, DoctorID, ISExternal, EpisodeID, RefDoctorID, intFeatureId, intFunctionId, strCallContext, CheckIn, intUserId, intWorkStationId, intError, Diseasecode, ActiveInsID, IsCollectablebyEmployer, IsDeductablebyEmployer, IsSupplimentarybyEmployer, IsExcessbyEmployer, IsNewCheckin, SpecialisationID, PatientType, BillType);
        }
        
        public System.Threading.Tasks.Task<string> SaveCheckInBillTypeAsync(
                    System.Data.DataSet dsChekIn, 
                    int AdmissionID, 
                    int PatientID, 
                    int HospitalID, 
                    int Investigation, 
                    int IpOpProcedures, 
                    int Pharmacy, 
                    int VisitID, 
                    int VisitType, 
                    int DoctorID, 
                    bool ISExternal, 
                    int EpisodeID, 
                    int RefDoctorID, 
                    int intFeatureId, 
                    int intFunctionId, 
                    string strCallContext, 
                    bool CheckIn, 
                    int intUserId, 
                    int intWorkStationId, 
                    int intError, 
                    System.Data.DataSet Diseasecode, 
                    int ActiveInsID, 
                    byte IsCollectablebyEmployer, 
                    byte IsDeductablebyEmployer, 
                    byte IsSupplimentarybyEmployer, 
                    byte IsExcessbyEmployer, 
                    int IsNewCheckin, 
                    int SpecialisationID, 
                    int PatientType, 
                    int BillType) {
            return base.Channel.SaveCheckInBillTypeAsync(dsChekIn, AdmissionID, PatientID, HospitalID, Investigation, IpOpProcedures, Pharmacy, VisitID, VisitType, DoctorID, ISExternal, EpisodeID, RefDoctorID, intFeatureId, intFunctionId, strCallContext, CheckIn, intUserId, intWorkStationId, intError, Diseasecode, ActiveInsID, IsCollectablebyEmployer, IsDeductablebyEmployer, IsSupplimentarybyEmployer, IsExcessbyEmployer, IsNewCheckin, SpecialisationID, PatientType, BillType);
        }
        
        public string SaveCheckInBillTypeMODA(
                    System.Data.DataSet dsChekIn, 
                    int AdmissionID, 
                    int PatientID, 
                    int HospitalID, 
                    int Investigation, 
                    int IpOpProcedures, 
                    int Pharmacy, 
                    int VisitID, 
                    int VisitType, 
                    int DoctorID, 
                    bool ISExternal, 
                    int EpisodeID, 
                    int RefDoctorID, 
                    int intFeatureId, 
                    int intFunctionId, 
                    string strCallContext, 
                    bool CheckIn, 
                    int intUserId, 
                    int intWorkStationId, 
                    int intError, 
                    System.Data.DataSet Diseasecode, 
                    int ActiveInsID, 
                    byte IsCollectablebyEmployer, 
                    byte IsDeductablebyEmployer, 
                    byte IsSupplimentarybyEmployer, 
                    byte IsExcessbyEmployer, 
                    int IsNewCheckin, 
                    int SpecialisationID, 
                    int PatientType, 
                    int BillType) {
            return base.Channel.SaveCheckInBillTypeMODA(dsChekIn, AdmissionID, PatientID, HospitalID, Investigation, IpOpProcedures, Pharmacy, VisitID, VisitType, DoctorID, ISExternal, EpisodeID, RefDoctorID, intFeatureId, intFunctionId, strCallContext, CheckIn, intUserId, intWorkStationId, intError, Diseasecode, ActiveInsID, IsCollectablebyEmployer, IsDeductablebyEmployer, IsSupplimentarybyEmployer, IsExcessbyEmployer, IsNewCheckin, SpecialisationID, PatientType, BillType);
        }
        
        public System.Threading.Tasks.Task<string> SaveCheckInBillTypeMODAAsync(
                    System.Data.DataSet dsChekIn, 
                    int AdmissionID, 
                    int PatientID, 
                    int HospitalID, 
                    int Investigation, 
                    int IpOpProcedures, 
                    int Pharmacy, 
                    int VisitID, 
                    int VisitType, 
                    int DoctorID, 
                    bool ISExternal, 
                    int EpisodeID, 
                    int RefDoctorID, 
                    int intFeatureId, 
                    int intFunctionId, 
                    string strCallContext, 
                    bool CheckIn, 
                    int intUserId, 
                    int intWorkStationId, 
                    int intError, 
                    System.Data.DataSet Diseasecode, 
                    int ActiveInsID, 
                    byte IsCollectablebyEmployer, 
                    byte IsDeductablebyEmployer, 
                    byte IsSupplimentarybyEmployer, 
                    byte IsExcessbyEmployer, 
                    int IsNewCheckin, 
                    int SpecialisationID, 
                    int PatientType, 
                    int BillType) {
            return base.Channel.SaveCheckInBillTypeMODAAsync(dsChekIn, AdmissionID, PatientID, HospitalID, Investigation, IpOpProcedures, Pharmacy, VisitID, VisitType, DoctorID, ISExternal, EpisodeID, RefDoctorID, intFeatureId, intFunctionId, strCallContext, CheckIn, intUserId, intWorkStationId, intError, Diseasecode, ActiveInsID, IsCollectablebyEmployer, IsDeductablebyEmployer, IsSupplimentarybyEmployer, IsExcessbyEmployer, IsNewCheckin, SpecialisationID, PatientType, BillType);
        }
        
        public System.Data.DataSet GetAllCheckInDetails(int IPID, int PackageId, string TableId, int intUserID, int intWorkStationID, int intError, int HospitalID) {
            return base.Channel.GetAllCheckInDetails(IPID, PackageId, TableId, intUserID, intWorkStationID, intError, HospitalID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetAllCheckInDetailsAsync(int IPID, int PackageId, string TableId, int intUserID, int intWorkStationID, int intError, int HospitalID) {
            return base.Channel.GetAllCheckInDetailsAsync(IPID, PackageId, TableId, intUserID, intWorkStationID, intError, HospitalID);
        }
        
        public int CancelCheckin(int IPID, int PatientID, int UserID, int WorkStationID, int FeatureID, int FunctionID) {
            return base.Channel.CancelCheckin(IPID, PatientID, UserID, WorkStationID, FeatureID, FunctionID);
        }
        
        public System.Threading.Tasks.Task<int> CancelCheckinAsync(int IPID, int PatientID, int UserID, int WorkStationID, int FeatureID, int FunctionID) {
            return base.Channel.CancelCheckinAsync(IPID, PatientID, UserID, WorkStationID, FeatureID, FunctionID);
        }
        
        public System.Data.DataSet GetPackages(string REGCODE, string Tbl, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.GetPackages(REGCODE, Tbl, intUserId, intWorkStationId, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetPackagesAsync(string REGCODE, string Tbl, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.GetPackagesAsync(REGCODE, Tbl, intUserId, intWorkStationId, intError);
        }
        
        public System.Data.DataSet GetFetchRecallNewOrder(int Pid, int intUserID, int intFeatureID, int HospitalID) {
            return base.Channel.GetFetchRecallNewOrder(Pid, intUserID, intFeatureID, HospitalID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetFetchRecallNewOrderAsync(int Pid, int intUserID, int intFeatureID, int HospitalID) {
            return base.Channel.GetFetchRecallNewOrderAsync(Pid, intUserID, intFeatureID, HospitalID);
        }
        
        public System.Data.DataSet GetApprovalStatus(System.Data.DataSet dsApproval) {
            return base.Channel.GetApprovalStatus(dsApproval);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetApprovalStatusAsync(System.Data.DataSet dsApproval) {
            return base.Channel.GetApprovalStatusAsync(dsApproval);
        }
        
        public System.Data.DataSet FetchSurgeryConfigurations() {
            return base.Channel.FetchSurgeryConfigurations();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchSurgeryConfigurationsAsync() {
            return base.Channel.FetchSurgeryConfigurationsAsync();
        }
        
        public System.Data.DataSet FetchADVProcedureDetailsLangIDADV(int min, int max, string ProcedureName, string Type, string Filter, int UserId, int WstationId, int intError, int intLanguageID) {
            return base.Channel.FetchADVProcedureDetailsLangIDADV(min, max, ProcedureName, Type, Filter, UserId, WstationId, intError, intLanguageID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchADVProcedureDetailsLangIDADVAsync(int min, int max, string ProcedureName, string Type, string Filter, int UserId, int WstationId, int intError, int intLanguageID) {
            return base.Channel.FetchADVProcedureDetailsLangIDADVAsync(min, max, ProcedureName, Type, Filter, UserId, WstationId, intError, intLanguageID);
        }
        
        public System.Data.DataSet FetchProcedureHospitalDetailsADV(int min, int max, string ProcedureName, string Type, string Filter, int UserId, int WstationId, int intError, int intLanguageID, int intHospitalID) {
            return base.Channel.FetchProcedureHospitalDetailsADV(min, max, ProcedureName, Type, Filter, UserId, WstationId, intError, intLanguageID, intHospitalID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchProcedureHospitalDetailsADVAsync(int min, int max, string ProcedureName, string Type, string Filter, int UserId, int WstationId, int intError, int intLanguageID, int intHospitalID) {
            return base.Channel.FetchProcedureHospitalDetailsADVAsync(min, max, ProcedureName, Type, Filter, UserId, WstationId, intError, intLanguageID, intHospitalID);
        }
        
        public System.Data.DataSet GetRegistrationFee(int intPatientId, int intTable, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.GetRegistrationFee(intPatientId, intTable, intUserId, intWorkStationId, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetRegistrationFeeAsync(int intPatientId, int intTable, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.GetRegistrationFeeAsync(intPatientId, intTable, intUserId, intWorkStationId, intError);
        }
        
        public System.Data.DataSet GetPriceTarifDetails(int GradeID, int Receiverid, int Payerid) {
            return base.Channel.GetPriceTarifDetails(GradeID, Receiverid, Payerid);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetPriceTarifDetailsAsync(int GradeID, int Receiverid, int Payerid) {
            return base.Channel.GetPriceTarifDetailsAsync(GradeID, Receiverid, Payerid);
        }
        
        public System.Data.DataSet GetCheckinDetailForBill(int IPID, int PackageId, string TableId, int intUserID, int intWorkStationID, int intError, int intHospitalid) {
            return base.Channel.GetCheckinDetailForBill(IPID, PackageId, TableId, intUserID, intWorkStationID, intError, intHospitalid);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetCheckinDetailForBillAsync(int IPID, int PackageId, string TableId, int intUserID, int intWorkStationID, int intError, int intHospitalid) {
            return base.Channel.GetCheckinDetailForBillAsync(IPID, PackageId, TableId, intUserID, intWorkStationID, intError, intHospitalid);
        }
        
        public System.Data.DataSet GetCheckinIssues(long lngIPID, int intDefTariffID, int intTariffID, int intEBedType, int intLoacationID, string strDischargeDateTime, int intServiceID, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.GetCheckinIssues(lngIPID, intDefTariffID, intTariffID, intEBedType, intLoacationID, strDischargeDateTime, intServiceID, intUserId, intWorkStationId, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetCheckinIssuesAsync(long lngIPID, int intDefTariffID, int intTariffID, int intEBedType, int intLoacationID, string strDischargeDateTime, int intServiceID, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.GetCheckinIssuesAsync(lngIPID, intDefTariffID, intTariffID, intEBedType, intLoacationID, strDischargeDateTime, intServiceID, intUserId, intWorkStationId, intError);
        }
        
        public System.Data.DataSet GetOnlineAppointDetails(string ProcedureName, string Filter, int UserId, int WstationId, int intError) {
            return base.Channel.GetOnlineAppointDetails(ProcedureName, Filter, UserId, WstationId, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetOnlineAppointDetailsAsync(string ProcedureName, string Filter, int UserId, int WstationId, int intError) {
            return base.Channel.GetOnlineAppointDetailsAsync(ProcedureName, Filter, UserId, WstationId, intError);
        }
        
        public System.Data.DataSet GetSchedulerConfigOfResources(string Filter, int intUserID, int intWorkStationID, int intError, string strOrder, int HospitalID) {
            return base.Channel.GetSchedulerConfigOfResources(Filter, intUserID, intWorkStationID, intError, strOrder, HospitalID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetSchedulerConfigOfResourcesAsync(string Filter, int intUserID, int intWorkStationID, int intError, string strOrder, int HospitalID) {
            return base.Channel.GetSchedulerConfigOfResourcesAsync(Filter, intUserID, intWorkStationID, intError, strOrder, HospitalID);
        }
        
        public bool SaveOnlineAppointDetails(string Filter, int UserId, int WstationId, int intError) {
            return base.Channel.SaveOnlineAppointDetails(Filter, UserId, WstationId, intError);
        }
        
        public System.Threading.Tasks.Task<bool> SaveOnlineAppointDetailsAsync(string Filter, int UserId, int WstationId, int intError) {
            return base.Channel.SaveOnlineAppointDetailsAsync(Filter, UserId, WstationId, intError);
        }
        
        public bool DeclineAppointments(string strRequestID, int UserId, int WstationId, int intError) {
            return base.Channel.DeclineAppointments(strRequestID, UserId, WstationId, intError);
        }
        
        public System.Threading.Tasks.Task<bool> DeclineAppointmentsAsync(string strRequestID, int UserId, int WstationId, int intError) {
            return base.Channel.DeclineAppointmentsAsync(strRequestID, UserId, WstationId, intError);
        }
        
        public System.Data.DataSet GetPatientDetails(string ProcedureName, string Type, string Filter, int UserId, int WstationId, int intError) {
            return base.Channel.GetPatientDetails(ProcedureName, Type, Filter, UserId, WstationId, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetPatientDetailsAsync(string ProcedureName, string Type, string Filter, int UserId, int WstationId, int intError) {
            return base.Channel.GetPatientDetailsAsync(ProcedureName, Type, Filter, UserId, WstationId, intError);
        }
        
        public string GetServiceItems(int serviceitemid, int hospitalid, int langid, int UserId, int WstationId, int intError) {
            return base.Channel.GetServiceItems(serviceitemid, hospitalid, langid, UserId, WstationId, intError);
        }
        
        public System.Threading.Tasks.Task<string> GetServiceItemsAsync(int serviceitemid, int hospitalid, int langid, int UserId, int WstationId, int intError) {
            return base.Channel.GetServiceItemsAsync(serviceitemid, hospitalid, langid, UserId, WstationId, intError);
        }
        
        public string GetServiceItemsByServiceId(int serviceitemid, int hospitalid, int langid, int UserId, int WstationId, int intError, int ServiceId) {
            return base.Channel.GetServiceItemsByServiceId(serviceitemid, hospitalid, langid, UserId, WstationId, intError, ServiceId);
        }
        
        public System.Threading.Tasks.Task<string> GetServiceItemsByServiceIdAsync(int serviceitemid, int hospitalid, int langid, int UserId, int WstationId, int intError, int ServiceId) {
            return base.Channel.GetServiceItemsByServiceIdAsync(serviceitemid, hospitalid, langid, UserId, WstationId, intError, ServiceId);
        }
        
        public System.Data.DataSet FetchCountryCities(int intCountryID, int intStateID, int intCityID, int intUserID, int intworkStnID) {
            return base.Channel.FetchCountryCities(intCountryID, intStateID, intCityID, intUserID, intworkStnID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchCountryCitiesAsync(int intCountryID, int intStateID, int intCityID, int intUserID, int intworkStnID) {
            return base.Channel.FetchCountryCitiesAsync(intCountryID, intStateID, intCityID, intUserID, intworkStnID);
        }
        
        public System.Data.DataSet FetchFollowupdays(int DocID, int SpecilaseId, int UserId, int WstationId, int intError, int PatientID) {
            return base.Channel.FetchFollowupdays(DocID, SpecilaseId, UserId, WstationId, intError, PatientID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchFollowupdaysAsync(int DocID, int SpecilaseId, int UserId, int WstationId, int intError, int PatientID) {
            return base.Channel.FetchFollowupdaysAsync(DocID, SpecilaseId, UserId, WstationId, intError, PatientID);
        }
        
        public System.Data.DataSet FetchMaxconsultdays(int DocID, string TBL, int UserId, int WstationId, int intError) {
            return base.Channel.FetchMaxconsultdays(DocID, TBL, UserId, WstationId, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchMaxconsultdaysAsync(int DocID, string TBL, int UserId, int WstationId, int intError) {
            return base.Channel.FetchMaxconsultdaysAsync(DocID, TBL, UserId, WstationId, intError);
        }
        
        public System.Data.DataSet getDetails(int patientid, string datefrom, string dateto, string tableid, int intUserId, int intWorkstationid, int intError) {
            return base.Channel.getDetails(patientid, datefrom, dateto, tableid, intUserId, intWorkstationid, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> getDetailsAsync(int patientid, string datefrom, string dateto, string tableid, int intUserId, int intWorkstationid, int intError) {
            return base.Channel.getDetailsAsync(patientid, datefrom, dateto, tableid, intUserId, intWorkstationid, intError);
        }
        
        public System.Data.DataSet getDetailsintServiceId(int patientid, string datefrom, string dateto, string tableid, int intUserId, int intWorkstationid, int intError, int intServiceId) {
            return base.Channel.getDetailsintServiceId(patientid, datefrom, dateto, tableid, intUserId, intWorkstationid, intError, intServiceId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> getDetailsintServiceIdAsync(int patientid, string datefrom, string dateto, string tableid, int intUserId, int intWorkstationid, int intError, int intServiceId) {
            return base.Channel.getDetailsintServiceIdAsync(patientid, datefrom, dateto, tableid, intUserId, intWorkstationid, intError, intServiceId);
        }
        
        public System.Data.DataSet getcompBillDetails(int companyid, string datefrom, string dateto, string tableid, int intUserId, int intWorkstationid, int intError) {
            return base.Channel.getcompBillDetails(companyid, datefrom, dateto, tableid, intUserId, intWorkstationid, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> getcompBillDetailsAsync(int companyid, string datefrom, string dateto, string tableid, int intUserId, int intWorkstationid, int intError) {
            return base.Channel.getcompBillDetailsAsync(companyid, datefrom, dateto, tableid, intUserId, intWorkstationid, intError);
        }
        
        public string UpdatePatientPayerDetails(System.Data.DataSet dsPatient) {
            return base.Channel.UpdatePatientPayerDetails(dsPatient);
        }
        
        public System.Threading.Tasks.Task<string> UpdatePatientPayerDetailsAsync(System.Data.DataSet dsPatient) {
            return base.Channel.UpdatePatientPayerDetailsAsync(dsPatient);
        }
        
        public string CheckInsurance(string Insurance) {
            return base.Channel.CheckInsurance(Insurance);
        }
        
        public System.Threading.Tasks.Task<string> CheckInsuranceAsync(string Insurance) {
            return base.Channel.CheckInsuranceAsync(Insurance);
        }
        
        public string CheckInsuranceCompanyID(string Insurance, int CompanyID) {
            return base.Channel.CheckInsuranceCompanyID(Insurance, CompanyID);
        }
        
        public System.Threading.Tasks.Task<string> CheckInsuranceCompanyIDAsync(string Insurance, int CompanyID) {
            return base.Channel.CheckInsuranceCompanyIDAsync(Insurance, CompanyID);
        }
        
        public string SavePatient_PartOne(System.Data.DataSet dsPatient) {
            return base.Channel.SavePatient_PartOne(dsPatient);
        }
        
        public System.Threading.Tasks.Task<string> SavePatient_PartOneAsync(System.Data.DataSet dsPatient) {
            return base.Channel.SavePatient_PartOneAsync(dsPatient);
        }
        
        public string UpdatePatient_PartOne(System.Data.DataSet dsPatient) {
            return base.Channel.UpdatePatient_PartOne(dsPatient);
        }
        
        public System.Threading.Tasks.Task<string> UpdatePatient_PartOneAsync(System.Data.DataSet dsPatient) {
            return base.Channel.UpdatePatient_PartOneAsync(dsPatient);
        }
        
        public string SaveAndUpdatePatient_PartTwo(System.Data.DataSet dsPatient) {
            return base.Channel.SaveAndUpdatePatient_PartTwo(dsPatient);
        }
        
        public System.Threading.Tasks.Task<string> SaveAndUpdatePatient_PartTwoAsync(System.Data.DataSet dsPatient) {
            return base.Channel.SaveAndUpdatePatient_PartTwoAsync(dsPatient);
        }
        
        public System.Data.DataSet GetProcServiceItems(int serviceitemid, int hospitalid, int langid, int UserId, int WstationId, int intError, int ServiceId) {
            return base.Channel.GetProcServiceItems(serviceitemid, hospitalid, langid, UserId, WstationId, intError, ServiceId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetProcServiceItemsAsync(int serviceitemid, int hospitalid, int langid, int UserId, int WstationId, int intError, int ServiceId) {
            return base.Channel.GetProcServiceItemsAsync(serviceitemid, hospitalid, langid, UserId, WstationId, intError, ServiceId);
        }
        
        public System.Data.DataSet GetPrimaryDistinctConsultants(int hospitalId) {
            return base.Channel.GetPrimaryDistinctConsultants(hospitalId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetPrimaryDistinctConsultantsAsync(int hospitalId) {
            return base.Channel.GetPrimaryDistinctConsultantsAsync(hospitalId);
        }
        
        public System.Data.DataSet GetIPDemographicDetails(int intIPID, int intUserID, System.Nullable<int> intWorkStationID, System.Nullable<int> intFeatureId, System.Nullable<int> intFunctionId, string CallContext, bool LanguageID) {
            return base.Channel.GetIPDemographicDetails(intIPID, intUserID, intWorkStationID, intFeatureId, intFunctionId, CallContext, LanguageID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetIPDemographicDetailsAsync(int intIPID, int intUserID, System.Nullable<int> intWorkStationID, System.Nullable<int> intFeatureId, System.Nullable<int> intFunctionId, string CallContext, bool LanguageID) {
            return base.Channel.GetIPDemographicDetailsAsync(intIPID, intUserID, intWorkStationID, intFeatureId, intFunctionId, CallContext, LanguageID);
        }
        
        public string SavePatientAdmission(System.Data.DataSet dsPatient, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.SavePatientAdmission(dsPatient, intUserId, intWorkStationId, intError);
        }
        
        public System.Threading.Tasks.Task<string> SavePatientAdmissionAsync(System.Data.DataSet dsPatient, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.SavePatientAdmissionAsync(dsPatient, intUserId, intWorkStationId, intError);
        }
        
        public short GetActiveAdmissions(int AdmissionID, int intWorkStationId) {
            return base.Channel.GetActiveAdmissions(AdmissionID, intWorkStationId);
        }
        
        public System.Threading.Tasks.Task<short> GetActiveAdmissionsAsync(int AdmissionID, int intWorkStationId) {
            return base.Channel.GetActiveAdmissionsAsync(AdmissionID, intWorkStationId);
        }
        
        public System.Data.DataSet GetSchedulerConfigurations(int intHospitalID, string Filter, int intUserID, int intWorkStationID, int intError, string strOrder) {
            return base.Channel.GetSchedulerConfigurations(intHospitalID, Filter, intUserID, intWorkStationID, intError, strOrder);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetSchedulerConfigurationsAsync(int intHospitalID, string Filter, int intUserID, int intWorkStationID, int intError, string strOrder) {
            return base.Channel.GetSchedulerConfigurationsAsync(intHospitalID, Filter, intUserID, intWorkStationID, intError, strOrder);
        }
        
        public System.Data.DataSet FetchAllBillDetailsAdv(int Type, string Filter, int intUserID, int intWorkStnId, int intError) {
            return base.Channel.FetchAllBillDetailsAdv(Type, Filter, intUserID, intWorkStnId, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchAllBillDetailsAdvAsync(int Type, string Filter, int intUserID, int intWorkStnId, int intError) {
            return base.Channel.FetchAllBillDetailsAdvAsync(Type, Filter, intUserID, intWorkStnId, intError);
        }
        
        public System.Data.DataSet FetchPatientAuditDetails(string orderType, string strFilter, int userID, int workStationID, int error, string order, short languageID, int featureID, int functionID, string callContext, int startRow, int endRow) {
            return base.Channel.FetchPatientAuditDetails(orderType, strFilter, userID, workStationID, error, order, languageID, featureID, functionID, callContext, startRow, endRow);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchPatientAuditDetailsAsync(string orderType, string strFilter, int userID, int workStationID, int error, string order, short languageID, int featureID, int functionID, string callContext, int startRow, int endRow) {
            return base.Channel.FetchPatientAuditDetailsAsync(orderType, strFilter, userID, workStationID, error, order, languageID, featureID, functionID, callContext, startRow, endRow);
        }
        
        public System.Data.DataSet FetchPatientAuditTrailDetails(int AuditID, string sRegCode, string TBL, short deleted, int iUserId, int iWorkStnId, int iError) {
            return base.Channel.FetchPatientAuditTrailDetails(AuditID, sRegCode, TBL, deleted, iUserId, iWorkStnId, iError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchPatientAuditTrailDetailsAsync(int AuditID, string sRegCode, string TBL, short deleted, int iUserId, int iWorkStnId, int iError) {
            return base.Channel.FetchPatientAuditTrailDetailsAsync(AuditID, sRegCode, TBL, deleted, iUserId, iWorkStnId, iError);
        }
        
        public System.Data.DataSet FetchPatientAuditTrailDetailsMODA(int AuditID, string sRegCode, string TBL, short deleted, int iUserId, int iWorkStnId, int iError) {
            return base.Channel.FetchPatientAuditTrailDetailsMODA(AuditID, sRegCode, TBL, deleted, iUserId, iWorkStnId, iError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchPatientAuditTrailDetailsMODAAsync(int AuditID, string sRegCode, string TBL, short deleted, int iUserId, int iWorkStnId, int iError) {
            return base.Channel.FetchPatientAuditTrailDetailsMODAAsync(AuditID, sRegCode, TBL, deleted, iUserId, iWorkStnId, iError);
        }
        
        public int SaveCashierScrollAmt(int ScrollUserID, System.DateTime LastScrollDate, System.DateTime ENDDATE, int ExpecedAmount, int userid, string TransactionDetails) {
            return base.Channel.SaveCashierScrollAmt(ScrollUserID, LastScrollDate, ENDDATE, ExpecedAmount, userid, TransactionDetails);
        }
        
        public System.Threading.Tasks.Task<int> SaveCashierScrollAmtAsync(int ScrollUserID, System.DateTime LastScrollDate, System.DateTime ENDDATE, int ExpecedAmount, int userid, string TransactionDetails) {
            return base.Channel.SaveCashierScrollAmtAsync(ScrollUserID, LastScrollDate, ENDDATE, ExpecedAmount, userid, TransactionDetails);
        }
        
        public System.Data.DataSet FetchCashierScrollAmt(string ScrollUserID, int intUserId) {
            return base.Channel.FetchCashierScrollAmt(ScrollUserID, intUserId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchCashierScrollAmtAsync(string ScrollUserID, int intUserId) {
            return base.Channel.FetchCashierScrollAmtAsync(ScrollUserID, intUserId);
        }
        
        public System.Data.DataSet GetPendingOrders(long lngIPID, int intUserID, int IntWorkStationID, int intError) {
            return base.Channel.GetPendingOrders(lngIPID, intUserID, IntWorkStationID, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetPendingOrdersAsync(long lngIPID, int intUserID, int IntWorkStationID, int intError) {
            return base.Channel.GetPendingOrdersAsync(lngIPID, intUserID, IntWorkStationID, intError);
        }
        
        public int SavePendingOrdersClearence(int IPID, int ServiceID, int OrderID, string OrderNo, int OrderItemID, int ServiceItemID, string Remarks, int userid) {
            return base.Channel.SavePendingOrdersClearence(IPID, ServiceID, OrderID, OrderNo, OrderItemID, ServiceItemID, Remarks, userid);
        }
        
        public System.Threading.Tasks.Task<int> SavePendingOrdersClearenceAsync(int IPID, int ServiceID, int OrderID, string OrderNo, int OrderItemID, int ServiceItemID, string Remarks, int userid) {
            return base.Channel.SavePendingOrdersClearenceAsync(IPID, ServiceID, OrderID, OrderNo, OrderItemID, ServiceItemID, Remarks, userid);
        }
        
        public System.Data.DataSet GetPendingOrdersClearence(int TBL, int IPID) {
            return base.Channel.GetPendingOrdersClearence(TBL, IPID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetPendingOrdersClearenceAsync(int TBL, int IPID) {
            return base.Channel.GetPendingOrdersClearenceAsync(TBL, IPID);
        }
        
        public int SaveDoctorInOutTime(System.Data.DataSet objDSSave) {
            return base.Channel.SaveDoctorInOutTime(objDSSave);
        }
        
        public System.Threading.Tasks.Task<int> SaveDoctorInOutTimeAsync(System.Data.DataSet objDSSave) {
            return base.Channel.SaveDoctorInOutTimeAsync(objDSSave);
        }
        
        public System.Data.DataSet FetchDoctorInOutTime(int DocID, int HospitalID, System.DateTime Scheduledatedate, int sessionid, int UserId, int WorkstationID, int intError, int intTbl) {
            return base.Channel.FetchDoctorInOutTime(DocID, HospitalID, Scheduledatedate, sessionid, UserId, WorkstationID, intError, intTbl);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchDoctorInOutTimeAsync(int DocID, int HospitalID, System.DateTime Scheduledatedate, int sessionid, int UserId, int WorkstationID, int intError, int intTbl) {
            return base.Channel.FetchDoctorInOutTimeAsync(DocID, HospitalID, Scheduledatedate, sessionid, UserId, WorkstationID, intError, intTbl);
        }
        
        public System.Data.DataSet FetchDoctorFacilities(System.DateTime Fromdate, System.DateTime Todate, int UserId, int WorkstationID, int intError) {
            return base.Channel.FetchDoctorFacilities(Fromdate, Todate, UserId, WorkstationID, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchDoctorFacilitiesAsync(System.DateTime Fromdate, System.DateTime Todate, int UserId, int WorkstationID, int intError) {
            return base.Channel.FetchDoctorFacilitiesAsync(Fromdate, Todate, UserId, WorkstationID, intError);
        }
        
        public System.Data.DataSet GetEvents(int intTableId, string strFilter, int IntUserId, int intWorkStationId, int intError) {
            return base.Channel.GetEvents(intTableId, strFilter, IntUserId, intWorkStationId, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetEventsAsync(int intTableId, string strFilter, int IntUserId, int intWorkStationId, int intError) {
            return base.Channel.GetEventsAsync(intTableId, strFilter, IntUserId, intWorkStationId, intError);
        }
        
        public int SaveCorporateHealthCheckUp(int CorporateHealthCheckUpId, int CompanyID, string FromDate, string ToDate, int EventId, string FileName, int HospitalId, int Blocked, int intUserid, int intWorkstationid, int intError) {
            return base.Channel.SaveCorporateHealthCheckUp(CorporateHealthCheckUpId, CompanyID, FromDate, ToDate, EventId, FileName, HospitalId, Blocked, intUserid, intWorkstationid, intError);
        }
        
        public System.Threading.Tasks.Task<int> SaveCorporateHealthCheckUpAsync(int CorporateHealthCheckUpId, int CompanyID, string FromDate, string ToDate, int EventId, string FileName, int HospitalId, int Blocked, int intUserid, int intWorkstationid, int intError) {
            return base.Channel.SaveCorporateHealthCheckUpAsync(CorporateHealthCheckUpId, CompanyID, FromDate, ToDate, EventId, FileName, HospitalId, Blocked, intUserid, intWorkstationid, intError);
        }
        
        public string SavePatientDeatils(Reports.FrontOfficeServiceClient.PatientDetails patient) {
            return base.Channel.SavePatientDeatils(patient);
        }
        
        public System.Threading.Tasks.Task<string> SavePatientDeatilsAsync(Reports.FrontOfficeServiceClient.PatientDetails patient) {
            return base.Channel.SavePatientDeatilsAsync(patient);
        }
        
        public string SavePatientPassportDetails(Reports.FrontOfficeServiceClient.PatientDetails patient) {
            return base.Channel.SavePatientPassportDetails(patient);
        }
        
        public System.Threading.Tasks.Task<string> SavePatientPassportDetailsAsync(Reports.FrontOfficeServiceClient.PatientDetails patient) {
            return base.Channel.SavePatientPassportDetailsAsync(patient);
        }
        
        public int SaveClinicVisitRequest(int intVisitRequestId, int intPatientId, int intDoctorId, int intHospitalId, System.DateTime dtVisitDate, int intUserid, int intWorkstationid, string strVisitReason, int intdocSpecID, string strClinicCode, string isFit, int intSavedPatientId, int Blocked) {
            return base.Channel.SaveClinicVisitRequest(intVisitRequestId, intPatientId, intDoctorId, intHospitalId, dtVisitDate, intUserid, intWorkstationid, strVisitReason, intdocSpecID, strClinicCode, isFit, intSavedPatientId, Blocked);
        }
        
        public System.Threading.Tasks.Task<int> SaveClinicVisitRequestAsync(int intVisitRequestId, int intPatientId, int intDoctorId, int intHospitalId, System.DateTime dtVisitDate, int intUserid, int intWorkstationid, string strVisitReason, int intdocSpecID, string strClinicCode, string isFit, int intSavedPatientId, int Blocked) {
            return base.Channel.SaveClinicVisitRequestAsync(intVisitRequestId, intPatientId, intDoctorId, intHospitalId, dtVisitDate, intUserid, intWorkstationid, strVisitReason, intdocSpecID, strClinicCode, isFit, intSavedPatientId, Blocked);
        }
        
        public System.Data.DataSet FetchClinicVisitWorklist(int intPatientID, System.DateTime dtFromDate, System.DateTime dtToDate, int intWorkstationID, int intAdmissionID) {
            return base.Channel.FetchClinicVisitWorklist(intPatientID, dtFromDate, dtToDate, intWorkstationID, intAdmissionID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchClinicVisitWorklistAsync(int intPatientID, System.DateTime dtFromDate, System.DateTime dtToDate, int intWorkstationID, int intAdmissionID) {
            return base.Channel.FetchClinicVisitWorklistAsync(intPatientID, dtFromDate, dtToDate, intWorkstationID, intAdmissionID);
        }
        
        public string SavePatientAddressDetails(Reports.FrontOfficeServiceClient.PatientDetails patient) {
            return base.Channel.SavePatientAddressDetails(patient);
        }
        
        public System.Threading.Tasks.Task<string> SavePatientAddressDetailsAsync(Reports.FrontOfficeServiceClient.PatientDetails patient) {
            return base.Channel.SavePatientAddressDetailsAsync(patient);
        }
        
        public string SavePatientOtherDetails(Reports.FrontOfficeServiceClient.PatientDetails patient) {
            return base.Channel.SavePatientOtherDetails(patient);
        }
        
        public System.Threading.Tasks.Task<string> SavePatientOtherDetailsAsync(Reports.FrontOfficeServiceClient.PatientDetails patient) {
            return base.Channel.SavePatientOtherDetailsAsync(patient);
        }
        
        public string SavePatientRegistrationDetailsNew(string strXMLPatientDetails, string strXMLFoodAllergies, string strXMLDrugAllergies, string strXMLOtherAllergies, int intuserID, int WorkstnID) {
            return base.Channel.SavePatientRegistrationDetailsNew(strXMLPatientDetails, strXMLFoodAllergies, strXMLDrugAllergies, strXMLOtherAllergies, intuserID, WorkstnID);
        }
        
        public System.Threading.Tasks.Task<string> SavePatientRegistrationDetailsNewAsync(string strXMLPatientDetails, string strXMLFoodAllergies, string strXMLDrugAllergies, string strXMLOtherAllergies, int intuserID, int WorkstnID) {
            return base.Channel.SavePatientRegistrationDetailsNewAsync(strXMLPatientDetails, strXMLFoodAllergies, strXMLDrugAllergies, strXMLOtherAllergies, intuserID, WorkstnID);
        }
        
        public long SaveCountryNewMaster(System.Data.DataSet dscountrynewmaster, byte IsInsert) {
            return base.Channel.SaveCountryNewMaster(dscountrynewmaster, IsInsert);
        }
        
        public System.Threading.Tasks.Task<long> SaveCountryNewMasterAsync(System.Data.DataSet dscountrynewmaster, byte IsInsert) {
            return base.Channel.SaveCountryNewMasterAsync(dscountrynewmaster, IsInsert);
        }
        
        public int SaveApprovalRequest(System.Data.DataSet dsSendToSave, string strAppDetail, int intUserID, int intWorkstationID, int intFeatureID, int intFunctionID, string strCallContext, int intUcafID) {
            return base.Channel.SaveApprovalRequest(dsSendToSave, strAppDetail, intUserID, intWorkstationID, intFeatureID, intFunctionID, strCallContext, intUcafID);
        }
        
        public System.Threading.Tasks.Task<int> SaveApprovalRequestAsync(System.Data.DataSet dsSendToSave, string strAppDetail, int intUserID, int intWorkstationID, int intFeatureID, int intFunctionID, string strCallContext, int intUcafID) {
            return base.Channel.SaveApprovalRequestAsync(dsSendToSave, strAppDetail, intUserID, intWorkstationID, intFeatureID, intFunctionID, strCallContext, intUcafID);
        }
        
        public int SaveConsultationOrder(int BillableConsultationID, int PatientId, int intRefDoctorID, int IntSpeclizationID, string strBillNo, int ActionType, int intUserID, int intWorkstationID, int intError, string strCallContext, int HospitalId, int ScheduleID) {
            return base.Channel.SaveConsultationOrder(BillableConsultationID, PatientId, intRefDoctorID, IntSpeclizationID, strBillNo, ActionType, intUserID, intWorkstationID, intError, strCallContext, HospitalId, ScheduleID);
        }
        
        public System.Threading.Tasks.Task<int> SaveConsultationOrderAsync(int BillableConsultationID, int PatientId, int intRefDoctorID, int IntSpeclizationID, string strBillNo, int ActionType, int intUserID, int intWorkstationID, int intError, string strCallContext, int HospitalId, int ScheduleID) {
            return base.Channel.SaveConsultationOrderAsync(BillableConsultationID, PatientId, intRefDoctorID, IntSpeclizationID, strBillNo, ActionType, intUserID, intWorkstationID, intError, strCallContext, HospitalId, ScheduleID);
        }
        
        public System.Data.DataSet GetRaiseConsultationOrder(int intMin, int intMax, string strConsFilter, int intUserID, int intWorkstationID, int intError) {
            return base.Channel.GetRaiseConsultationOrder(intMin, intMax, strConsFilter, intUserID, intWorkstationID, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetRaiseConsultationOrderAsync(int intMin, int intMax, string strConsFilter, int intUserID, int intWorkstationID, int intError) {
            return base.Channel.GetRaiseConsultationOrderAsync(intMin, intMax, strConsFilter, intUserID, intWorkstationID, intError);
        }
        
        public System.Data.DataSet FetchData(string strSP, int intMin, int intMax, int intType, string strConsFilter, int intUserID, int intWorkstationID, int intError, int HospitalId) {
            return base.Channel.FetchData(strSP, intMin, intMax, intType, strConsFilter, intUserID, intWorkstationID, intError, HospitalId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchDataAsync(string strSP, int intMin, int intMax, int intType, string strConsFilter, int intUserID, int intWorkstationID, int intError, int HospitalId) {
            return base.Channel.FetchDataAsync(strSP, intMin, intMax, intType, strConsFilter, intUserID, intWorkstationID, intError, HospitalId);
        }
        
        public System.Data.DataSet FetchPrescripton(int intMin, int intMax, int intType, string strFilter, int intUserID, int intWorkstationID, int intError) {
            return base.Channel.FetchPrescripton(intMin, intMax, intType, strFilter, intUserID, intWorkstationID, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchPrescriptonAsync(int intMin, int intMax, int intType, string strFilter, int intUserID, int intWorkstationID, int intError) {
            return base.Channel.FetchPrescriptonAsync(intMin, intMax, intType, strFilter, intUserID, intWorkstationID, intError);
        }
        
        public System.Data.DataSet GetLOA_Deatils(int intMin, int intMax, int intType, string strFilter, int intUserID, int intWorkstationID, int intError) {
            return base.Channel.GetLOA_Deatils(intMin, intMax, intType, strFilter, intUserID, intWorkstationID, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetLOA_DeatilsAsync(int intMin, int intMax, int intType, string strFilter, int intUserID, int intWorkstationID, int intError) {
            return base.Channel.GetLOA_DeatilsAsync(intMin, intMax, intType, strFilter, intUserID, intWorkstationID, intError);
        }
        
        public System.Data.DataSet NewFetchPatientFile(int EpisodeID, int VisitID, int MonitorID, string TBL, int intUserId, int intWorkStationId) {
            return base.Channel.NewFetchPatientFile(EpisodeID, VisitID, MonitorID, TBL, intUserId, intWorkStationId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> NewFetchPatientFileAsync(int EpisodeID, int VisitID, int MonitorID, string TBL, int intUserId, int intWorkStationId) {
            return base.Channel.NewFetchPatientFileAsync(EpisodeID, VisitID, MonitorID, TBL, intUserId, intWorkStationId);
        }
        
        public System.Data.DataSet ValidationTest(string strDoctorID, int intPatientID, System.DateTime schDate, int intFeatureID, int intFunctionID, string CallContext, int intUserID, int intWorkstationID, int intError) {
            return base.Channel.ValidationTest(strDoctorID, intPatientID, schDate, intFeatureID, intFunctionID, CallContext, intUserID, intWorkstationID, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> ValidationTestAsync(string strDoctorID, int intPatientID, System.DateTime schDate, int intFeatureID, int intFunctionID, string CallContext, int intUserID, int intWorkstationID, int intError) {
            return base.Channel.ValidationTestAsync(strDoctorID, intPatientID, schDate, intFeatureID, intFunctionID, CallContext, intUserID, intWorkstationID, intError);
        }
        
        public System.Data.DataSet ValidationTests(string strDoctorID, int intPatientID, System.DateTime schDate, int intFeatureID, int intFunctionID, string CallContext, int intUserID, int intWorkstationID, int intError, int Type) {
            return base.Channel.ValidationTests(strDoctorID, intPatientID, schDate, intFeatureID, intFunctionID, CallContext, intUserID, intWorkstationID, intError, Type);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> ValidationTestsAsync(string strDoctorID, int intPatientID, System.DateTime schDate, int intFeatureID, int intFunctionID, string CallContext, int intUserID, int intWorkstationID, int intError, int Type) {
            return base.Channel.ValidationTestsAsync(strDoctorID, intPatientID, schDate, intFeatureID, intFunctionID, CallContext, intUserID, intWorkstationID, intError, Type);
        }
        
        public System.Data.DataSet ValidationTest_New(string strDoctorID, int intPatientID, System.DateTime schDate, int intFeatureID, int intFunctionID, string CallContext, int intUserID, int intWorkstationID, int intError, string Table, string specialiseID) {
            return base.Channel.ValidationTest_New(strDoctorID, intPatientID, schDate, intFeatureID, intFunctionID, CallContext, intUserID, intWorkstationID, intError, Table, specialiseID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> ValidationTest_NewAsync(string strDoctorID, int intPatientID, System.DateTime schDate, int intFeatureID, int intFunctionID, string CallContext, int intUserID, int intWorkstationID, int intError, string Table, string specialiseID) {
            return base.Channel.ValidationTest_NewAsync(strDoctorID, intPatientID, schDate, intFeatureID, intFunctionID, CallContext, intUserID, intWorkstationID, intError, Table, specialiseID);
        }
        
        public System.Data.DataSet GetMasters(string strTableIds, string[] strTableNames, int UserId, int intError) {
            return base.Channel.GetMasters(strTableIds, strTableNames, UserId, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetMastersAsync(string strTableIds, string[] strTableNames, int UserId, int intError) {
            return base.Channel.GetMastersAsync(strTableIds, strTableNames, UserId, intError);
        }
        
        public System.Data.DataSet GetMastersTagID(string strTableIds, string[] strTableNames, int UserId, int intError, int tagId) {
            return base.Channel.GetMastersTagID(strTableIds, strTableNames, UserId, intError, tagId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetMastersTagIDAsync(string strTableIds, string[] strTableNames, int UserId, int intError, int tagId) {
            return base.Channel.GetMastersTagIDAsync(strTableIds, strTableNames, UserId, intError, tagId);
        }
        
        public System.Data.DataSet FetchPatientDetails(string strPatId, string strRegCode, bool BlnDeleted, int intUserId, int intWorkStnId, int intError, byte IsReg) {
            return base.Channel.FetchPatientDetails(strPatId, strRegCode, BlnDeleted, intUserId, intWorkStnId, intError, IsReg);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchPatientDetailsAsync(string strPatId, string strRegCode, bool BlnDeleted, int intUserId, int intWorkStnId, int intError, byte IsReg) {
            return base.Channel.FetchPatientDetailsAsync(strPatId, strRegCode, BlnDeleted, intUserId, intWorkStnId, intError, IsReg);
        }
        
        public System.Data.DataSet FetchPatientDetailsOPIP(string strPatId, string strRegCode, bool BlnDeleted, int intUserId, int intWorkStnId, int intError, byte IsReg) {
            return base.Channel.FetchPatientDetailsOPIP(strPatId, strRegCode, BlnDeleted, intUserId, intWorkStnId, intError, IsReg);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchPatientDetailsOPIPAsync(string strPatId, string strRegCode, bool BlnDeleted, int intUserId, int intWorkStnId, int intError, byte IsReg) {
            return base.Channel.FetchPatientDetailsOPIPAsync(strPatId, strRegCode, BlnDeleted, intUserId, intWorkStnId, intError, IsReg);
        }
        
        public int SaveIPTempBillDetailsPerf(System.Data.DataSet dtTempBillDetails, string strSessionId, string strAdmissionUHID, int intPatientType, int intBillType, int intPatienId) {
            return base.Channel.SaveIPTempBillDetailsPerf(dtTempBillDetails, strSessionId, strAdmissionUHID, intPatientType, intBillType, intPatienId);
        }
        
        public System.Threading.Tasks.Task<int> SaveIPTempBillDetailsPerfAsync(System.Data.DataSet dtTempBillDetails, string strSessionId, string strAdmissionUHID, int intPatientType, int intBillType, int intPatienId) {
            return base.Channel.SaveIPTempBillDetailsPerfAsync(dtTempBillDetails, strSessionId, strAdmissionUHID, intPatientType, intBillType, intPatienId);
        }
        
        public int SaveIPTempBillDetailsPerfNewForIP(System.Data.DataSet dtTempBillDetails, string strSessionId, string strAdmissionUHID, int intPatientType, int intBillType, int intPatienId) {
            return base.Channel.SaveIPTempBillDetailsPerfNewForIP(dtTempBillDetails, strSessionId, strAdmissionUHID, intPatientType, intBillType, intPatienId);
        }
        
        public System.Threading.Tasks.Task<int> SaveIPTempBillDetailsPerfNewForIPAsync(System.Data.DataSet dtTempBillDetails, string strSessionId, string strAdmissionUHID, int intPatientType, int intBillType, int intPatienId) {
            return base.Channel.SaveIPTempBillDetailsPerfNewForIPAsync(dtTempBillDetails, strSessionId, strAdmissionUHID, intPatientType, intBillType, intPatienId);
        }
        
        public System.Data.DataSet FetchPatientDetails_IPBillPerf(string strRegCode, int IPID, string Status, string PatientType, int HospitalId, int intUserId, int intWorkStnId, int intError) {
            return base.Channel.FetchPatientDetails_IPBillPerf(strRegCode, IPID, Status, PatientType, HospitalId, intUserId, intWorkStnId, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchPatientDetails_IPBillPerfAsync(string strRegCode, int IPID, string Status, string PatientType, int HospitalId, int intUserId, int intWorkStnId, int intError) {
            return base.Channel.FetchPatientDetails_IPBillPerfAsync(strRegCode, IPID, Status, PatientType, HospitalId, intUserId, intWorkStnId, intError);
        }
        
        public System.Data.DataSet FetchPatientDetailsLangID(string strPatId, string strRegCode, bool BlnDeleted, int intUserId, int intWorkStnId, int intError, byte IsReg, int LanguageID) {
            return base.Channel.FetchPatientDetailsLangID(strPatId, strRegCode, BlnDeleted, intUserId, intWorkStnId, intError, IsReg, LanguageID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchPatientDetailsLangIDAsync(string strPatId, string strRegCode, bool BlnDeleted, int intUserId, int intWorkStnId, int intError, byte IsReg, int LanguageID) {
            return base.Channel.FetchPatientDetailsLangIDAsync(strPatId, strRegCode, BlnDeleted, intUserId, intWorkStnId, intError, IsReg, LanguageID);
        }
        
        public System.Data.DataSet FetchPatientDetailsLangIDPatientData(string strPatId, string strRegCode, bool BlnDeleted, int intUserId, int intWorkStnId, int intError, byte IsReg, int LanguageID, string TblNums) {
            return base.Channel.FetchPatientDetailsLangIDPatientData(strPatId, strRegCode, BlnDeleted, intUserId, intWorkStnId, intError, IsReg, LanguageID, TblNums);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchPatientDetailsLangIDPatientDataAsync(string strPatId, string strRegCode, bool BlnDeleted, int intUserId, int intWorkStnId, int intError, byte IsReg, int LanguageID, string TblNums) {
            return base.Channel.FetchPatientDetailsLangIDPatientDataAsync(strPatId, strRegCode, BlnDeleted, intUserId, intWorkStnId, intError, IsReg, LanguageID, TblNums);
        }
        
        public System.Data.DataSet FetchPatientDetailsLangIDMODA(string strPatId, string strRegCode, bool BlnDeleted, int intUserId, int intWorkStnId, int intError, byte IsReg, int LanguageID) {
            return base.Channel.FetchPatientDetailsLangIDMODA(strPatId, strRegCode, BlnDeleted, intUserId, intWorkStnId, intError, IsReg, LanguageID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchPatientDetailsLangIDMODAAsync(string strPatId, string strRegCode, bool BlnDeleted, int intUserId, int intWorkStnId, int intError, byte IsReg, int LanguageID) {
            return base.Channel.FetchPatientDetailsLangIDMODAAsync(strPatId, strRegCode, BlnDeleted, intUserId, intWorkStnId, intError, IsReg, LanguageID);
        }
        
        public System.Data.DataSet FetchSingleMaster(int intTableId, string StrFilter, int UserId, int WstationId, int intError) {
            return base.Channel.FetchSingleMaster(intTableId, StrFilter, UserId, WstationId, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchSingleMasterAsync(int intTableId, string StrFilter, int UserId, int WstationId, int intError) {
            return base.Channel.FetchSingleMasterAsync(intTableId, StrFilter, UserId, WstationId, intError);
        }
        
        public System.Data.DataSet FetchSingleMastTagId(int intTableId, string StrFilter, int UserId, int WstationId, int intError, int TagId) {
            return base.Channel.FetchSingleMastTagId(intTableId, StrFilter, UserId, WstationId, intError, TagId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchSingleMastTagIdAsync(int intTableId, string StrFilter, int UserId, int WstationId, int intError, int TagId) {
            return base.Channel.FetchSingleMastTagIdAsync(intTableId, StrFilter, UserId, WstationId, intError, TagId);
        }
        
        public System.Data.DataSet FetchOrganizationDetails(int intTableId, string strFilter, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.FetchOrganizationDetails(intTableId, strFilter, intUserId, intWorkStationId, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchOrganizationDetailsAsync(int intTableId, string strFilter, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.FetchOrganizationDetailsAsync(intTableId, strFilter, intUserId, intWorkStationId, intError);
        }
        
        public int FetchDefaultTariff(string strFilter) {
            return base.Channel.FetchDefaultTariff(strFilter);
        }
        
        public System.Threading.Tasks.Task<int> FetchDefaultTariffAsync(string strFilter) {
            return base.Channel.FetchDefaultTariffAsync(strFilter);
        }
        
        public System.Data.DataSet FetchADVProcedureDetails(string ProcedureName, string Type, string Filter, int UserId, int WstationId, int intError) {
            return base.Channel.FetchADVProcedureDetails(ProcedureName, Type, Filter, UserId, WstationId, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchADVProcedureDetailsAsync(string ProcedureName, string Type, string Filter, int UserId, int WstationId, int intError) {
            return base.Channel.FetchADVProcedureDetailsAsync(ProcedureName, Type, Filter, UserId, WstationId, intError);
        }
        
        public System.Data.DataSet FetchADVProcedureHospitalDetails(string ProcedureName, string Type, string Filter, int UserId, int WstationId, int intError, int HospitalID) {
            return base.Channel.FetchADVProcedureHospitalDetails(ProcedureName, Type, Filter, UserId, WstationId, intError, HospitalID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchADVProcedureHospitalDetailsAsync(string ProcedureName, string Type, string Filter, int UserId, int WstationId, int intError, int HospitalID) {
            return base.Channel.FetchADVProcedureHospitalDetailsAsync(ProcedureName, Type, Filter, UserId, WstationId, intError, HospitalID);
        }
        
        public System.Data.DataSet FetchADVProcedureDetailsLangID(string ProcedureName, string Type, string Filter, int UserId, int WstationId, int intError, int intLanguageID) {
            return base.Channel.FetchADVProcedureDetailsLangID(ProcedureName, Type, Filter, UserId, WstationId, intError, intLanguageID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchADVProcedureDetailsLangIDAsync(string ProcedureName, string Type, string Filter, int UserId, int WstationId, int intError, int intLanguageID) {
            return base.Channel.FetchADVProcedureDetailsLangIDAsync(ProcedureName, Type, Filter, UserId, WstationId, intError, intLanguageID);
        }
        
        public System.Data.DataSet GetvisitProcedureDetails(string ProcedureName, string Type, string Filter, int UserId, int WstationId, int intError, int intLanguageID) {
            return base.Channel.GetvisitProcedureDetails(ProcedureName, Type, Filter, UserId, WstationId, intError, intLanguageID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetvisitProcedureDetailsAsync(string ProcedureName, string Type, string Filter, int UserId, int WstationId, int intError, int intLanguageID) {
            return base.Channel.GetvisitProcedureDetailsAsync(ProcedureName, Type, Filter, UserId, WstationId, intError, intLanguageID);
        }
        
        public int FetchRootPatientId(string UHID, int iUserId, int iWStationId) {
            return base.Channel.FetchRootPatientId(UHID, iUserId, iWStationId);
        }
        
        public System.Threading.Tasks.Task<int> FetchRootPatientIdAsync(string UHID, int iUserId, int iWStationId) {
            return base.Channel.FetchRootPatientIdAsync(UHID, iUserId, iWStationId);
        }
        
        public int FetchRootPatientIdPerformance(string UHID, int iUserId, int iWStationId) {
            return base.Channel.FetchRootPatientIdPerformance(UHID, iUserId, iWStationId);
        }
        
        public System.Threading.Tasks.Task<int> FetchRootPatientIdPerformanceAsync(string UHID, int iUserId, int iWStationId) {
            return base.Channel.FetchRootPatientIdPerformanceAsync(UHID, iUserId, iWStationId);
        }
        
        public int[] FetchRootPatientIdPerformanceMODA(string UHID, int iUserId, int iWStationId) {
            return base.Channel.FetchRootPatientIdPerformanceMODA(UHID, iUserId, iWStationId);
        }
        
        public System.Threading.Tasks.Task<int[]> FetchRootPatientIdPerformanceMODAAsync(string UHID, int iUserId, int iWStationId) {
            return base.Channel.FetchRootPatientIdPerformanceMODAAsync(UHID, iUserId, iWStationId);
        }
        
        public int FetchPatientIdPerformance(string UHID, int iUserId, int iWStationId) {
            return base.Channel.FetchPatientIdPerformance(UHID, iUserId, iWStationId);
        }
        
        public System.Threading.Tasks.Task<int> FetchPatientIdPerformanceAsync(string UHID, int iUserId, int iWStationId) {
            return base.Channel.FetchPatientIdPerformanceAsync(UHID, iUserId, iWStationId);
        }
        
        public System.Data.DataSet FetchTitles(int intTitleId, int intTableId, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.FetchTitles(intTitleId, intTableId, intUserId, intWorkStationId, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchTitlesAsync(int intTitleId, int intTableId, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.FetchTitlesAsync(intTitleId, intTableId, intUserId, intWorkStationId, intError);
        }
        
        public string FetchAgeDetails(System.DateTime DateOfBirth, System.DateTime CurrentDate) {
            return base.Channel.FetchAgeDetails(DateOfBirth, CurrentDate);
        }
        
        public System.Threading.Tasks.Task<string> FetchAgeDetailsAsync(System.DateTime DateOfBirth, System.DateTime CurrentDate) {
            return base.Channel.FetchAgeDetailsAsync(DateOfBirth, CurrentDate);
        }
        
        public System.Data.DataSet GetInPatientDetails(string Condition, int UserID, int WorkStationID, int Error) {
            return base.Channel.GetInPatientDetails(Condition, UserID, WorkStationID, Error);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetInPatientDetailsAsync(string Condition, int UserID, int WorkStationID, int Error) {
            return base.Channel.GetInPatientDetailsAsync(Condition, UserID, WorkStationID, Error);
        }
        
        public System.Data.DataSet FetchADVProcedureDetailsCall(string ProcedureName, string Type, string Filter, int UserId, int WstationId, int intError, int FeatureId, int FunctionId, string CallContext) {
            return base.Channel.FetchADVProcedureDetailsCall(ProcedureName, Type, Filter, UserId, WstationId, intError, FeatureId, FunctionId, CallContext);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchADVProcedureDetailsCallAsync(string ProcedureName, string Type, string Filter, int UserId, int WstationId, int intError, int FeatureId, int FunctionId, string CallContext) {
            return base.Channel.FetchADVProcedureDetailsCallAsync(ProcedureName, Type, Filter, UserId, WstationId, intError, FeatureId, FunctionId, CallContext);
        }
        
        public System.Data.DataSet FetchMISProcedureDetails(string ProcedureName, string sSelect, string sFilter, string sOrder, int UserId, int WstationId, int intError, bool IsMIS) {
            return base.Channel.FetchMISProcedureDetails(ProcedureName, sSelect, sFilter, sOrder, UserId, WstationId, intError, IsMIS);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchMISProcedureDetailsAsync(string ProcedureName, string sSelect, string sFilter, string sOrder, int UserId, int WstationId, int intError, bool IsMIS) {
            return base.Channel.FetchMISProcedureDetailsAsync(ProcedureName, sSelect, sFilter, sOrder, UserId, WstationId, intError, IsMIS);
        }
        
        public decimal GetRoundedValue(decimal BillValue) {
            return base.Channel.GetRoundedValue(BillValue);
        }
        
        public System.Threading.Tasks.Task<decimal> GetRoundedValueAsync(decimal BillValue) {
            return base.Channel.GetRoundedValueAsync(BillValue);
        }
        
        public System.Data.DataSet FetchOutstandingAmount(int PatientId, int PatientType) {
            return base.Channel.FetchOutstandingAmount(PatientId, PatientType);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchOutstandingAmountAsync(int PatientId, int PatientType) {
            return base.Channel.FetchOutstandingAmountAsync(PatientId, PatientType);
        }
        
        public System.Data.DataSet FetchAvailDepositAmount(int PatientId, int PatientType, int intUserId, int intWorkStationId) {
            return base.Channel.FetchAvailDepositAmount(PatientId, PatientType, intUserId, intWorkStationId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchAvailDepositAmountAsync(int PatientId, int PatientType, int intUserId, int intWorkStationId) {
            return base.Channel.FetchAvailDepositAmountAsync(PatientId, PatientType, intUserId, intWorkStationId);
        }
        
        public int GetOPCashIssuePatient(int PatientId, int iUserId, int iWStationId) {
            return base.Channel.GetOPCashIssuePatient(PatientId, iUserId, iWStationId);
        }
        
        public System.Threading.Tasks.Task<int> GetOPCashIssuePatientAsync(int PatientId, int iUserId, int iWStationId) {
            return base.Channel.GetOPCashIssuePatientAsync(PatientId, iUserId, iWStationId);
        }
        
        public System.Data.DataSet GetFeatures(int intPatientType, int intUserId, int intWorkStationId) {
            return base.Channel.GetFeatures(intPatientType, intUserId, intWorkStationId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetFeaturesAsync(int intPatientType, int intUserId, int intWorkStationId) {
            return base.Channel.GetFeaturesAsync(intPatientType, intUserId, intWorkStationId);
        }
        
        public System.Data.DataSet GetFeatureAuthorizedUsers(int intPatientType, int intUserId, int intWorkStationId) {
            return base.Channel.GetFeatureAuthorizedUsers(intPatientType, intUserId, intWorkStationId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetFeatureAuthorizedUsersAsync(int intPatientType, int intUserId, int intWorkStationId) {
            return base.Channel.GetFeatureAuthorizedUsersAsync(intPatientType, intUserId, intWorkStationId);
        }
        
        public int SaveFeatureAuthorizedUsers(System.Data.DataSet DsSave, int intFeatureId, int intUserID, int intWorkstationID, int intHospitalID) {
            return base.Channel.SaveFeatureAuthorizedUsers(DsSave, intFeatureId, intUserID, intWorkstationID, intHospitalID);
        }
        
        public System.Threading.Tasks.Task<int> SaveFeatureAuthorizedUsersAsync(System.Data.DataSet DsSave, int intFeatureId, int intUserID, int intWorkstationID, int intHospitalID) {
            return base.Channel.SaveFeatureAuthorizedUsersAsync(DsSave, intFeatureId, intUserID, intWorkstationID, intHospitalID);
        }
        
        public System.Data.DataSet GetCityDetails(int iMin, int iMax, int iType, string sFilter, int UserId, int iWKS, int intError) {
            return base.Channel.GetCityDetails(iMin, iMax, iType, sFilter, UserId, iWKS, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetCityDetailsAsync(int iMin, int iMax, int iType, string sFilter, int UserId, int iWKS, int intError) {
            return base.Channel.GetCityDetailsAsync(iMin, iMax, iType, sFilter, UserId, iWKS, intError);
        }
        
        public System.Data.DataSet GetCityDetailsTagId(int iMin, int iMax, int iType, string sFilter, int UserId, int iWKS, int intError, int TagId) {
            return base.Channel.GetCityDetailsTagId(iMin, iMax, iType, sFilter, UserId, iWKS, intError, TagId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetCityDetailsTagIdAsync(int iMin, int iMax, int iType, string sFilter, int UserId, int iWKS, int intError, int TagId) {
            return base.Channel.GetCityDetailsTagIdAsync(iMin, iMax, iType, sFilter, UserId, iWKS, intError, TagId);
        }
        
        public System.Data.DataSet GetGradeDetailsTagId(int iMin, int iMax, int iType, string sFilter, int UserId, int iWKS, int intError, int TagId) {
            return base.Channel.GetGradeDetailsTagId(iMin, iMax, iType, sFilter, UserId, iWKS, intError, TagId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetGradeDetailsTagIdAsync(int iMin, int iMax, int iType, string sFilter, int UserId, int iWKS, int intError, int TagId) {
            return base.Channel.GetGradeDetailsTagIdAsync(iMin, iMax, iType, sFilter, UserId, iWKS, intError, TagId);
        }
        
        public int GetRootPatientId(string PatientID, int iUserId, int iWStationId, string sType, string sSSN) {
            return base.Channel.GetRootPatientId(PatientID, iUserId, iWStationId, sType, sSSN);
        }
        
        public System.Threading.Tasks.Task<int> GetRootPatientIdAsync(string PatientID, int iUserId, int iWStationId, string sType, string sSSN) {
            return base.Channel.GetRootPatientIdAsync(PatientID, iUserId, iWStationId, sType, sSSN);
        }
        
        public int SaveCheckIn(
                    System.Data.DataSet dsChekIn, 
                    int AdmissionID, 
                    int PatientID, 
                    int HospitalID, 
                    int Investigation, 
                    int IpOpProcedures, 
                    int Pharmacy, 
                    int VisitID, 
                    int VisitType, 
                    int DoctorID, 
                    bool ISExternal, 
                    int EpisodeID, 
                    int RefDoctorID, 
                    int intFeatureId, 
                    int intFunctionId, 
                    string strCallContext, 
                    bool CheckIn, 
                    int intUserId, 
                    int intWorkStationId, 
                    int intError) {
            return base.Channel.SaveCheckIn(dsChekIn, AdmissionID, PatientID, HospitalID, Investigation, IpOpProcedures, Pharmacy, VisitID, VisitType, DoctorID, ISExternal, EpisodeID, RefDoctorID, intFeatureId, intFunctionId, strCallContext, CheckIn, intUserId, intWorkStationId, intError);
        }
        
        public System.Threading.Tasks.Task<int> SaveCheckInAsync(
                    System.Data.DataSet dsChekIn, 
                    int AdmissionID, 
                    int PatientID, 
                    int HospitalID, 
                    int Investigation, 
                    int IpOpProcedures, 
                    int Pharmacy, 
                    int VisitID, 
                    int VisitType, 
                    int DoctorID, 
                    bool ISExternal, 
                    int EpisodeID, 
                    int RefDoctorID, 
                    int intFeatureId, 
                    int intFunctionId, 
                    string strCallContext, 
                    bool CheckIn, 
                    int intUserId, 
                    int intWorkStationId, 
                    int intError) {
            return base.Channel.SaveCheckInAsync(dsChekIn, AdmissionID, PatientID, HospitalID, Investigation, IpOpProcedures, Pharmacy, VisitID, VisitType, DoctorID, ISExternal, EpisodeID, RefDoctorID, intFeatureId, intFunctionId, strCallContext, CheckIn, intUserId, intWorkStationId, intError);
        }
        
        public System.Data.DataSet FetchCheckInDetails(int Type, string strFilter, int intUserID, int intWorkStationID, int intError) {
            return base.Channel.FetchCheckInDetails(Type, strFilter, intUserID, intWorkStationID, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchCheckInDetailsAsync(int Type, string strFilter, int intUserID, int intWorkStationID, int intError) {
            return base.Channel.FetchCheckInDetailsAsync(Type, strFilter, intUserID, intWorkStationID, intError);
        }
        
        public System.Data.DataSet FetchConsultantPriceDetails(int ServiceId, int ItemId, int TariffId, int BillType, int Priority, int SpecialisationId, string BedtypeId, int iUserId, int iWstationId, int iError) {
            return base.Channel.FetchConsultantPriceDetails(ServiceId, ItemId, TariffId, BillType, Priority, SpecialisationId, BedtypeId, iUserId, iWstationId, iError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchConsultantPriceDetailsAsync(int ServiceId, int ItemId, int TariffId, int BillType, int Priority, int SpecialisationId, string BedtypeId, int iUserId, int iWstationId, int iError) {
            return base.Channel.FetchConsultantPriceDetailsAsync(ServiceId, ItemId, TariffId, BillType, Priority, SpecialisationId, BedtypeId, iUserId, iWstationId, iError);
        }
        
        public System.Data.DataSet FetchMCCIDDetails(string Select, string strFilter, int intUserID, int intWorkStationID, int intError) {
            return base.Channel.FetchMCCIDDetails(Select, strFilter, intUserID, intWorkStationID, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchMCCIDDetailsAsync(string Select, string strFilter, int intUserID, int intWorkStationID, int intError) {
            return base.Channel.FetchMCCIDDetailsAsync(Select, strFilter, intUserID, intWorkStationID, intError);
        }
        
        public System.Data.DataSet FetchTitlesDetails(long lngTitleId, int intUserId, int intWorkStnId, int intError) {
            return base.Channel.FetchTitlesDetails(lngTitleId, intUserId, intWorkStnId, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchTitlesDetailsAsync(long lngTitleId, int intUserId, int intWorkStnId, int intError) {
            return base.Channel.FetchTitlesDetailsAsync(lngTitleId, intUserId, intWorkStnId, intError);
        }
        
        public System.Data.DataSet FetchTitleDetailsLangID(long lngTitleId, int intUserId, int intWorkStnId, int intError, int LanguageID) {
            return base.Channel.FetchTitleDetailsLangID(lngTitleId, intUserId, intWorkStnId, intError, LanguageID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchTitleDetailsLangIDAsync(long lngTitleId, int intUserId, int intWorkStnId, int intError, int LanguageID) {
            return base.Channel.FetchTitleDetailsLangIDAsync(lngTitleId, intUserId, intWorkStnId, intError, LanguageID);
        }
        
        public System.Data.DataSet FetchEmployeesBySpecialization(int SpecializationId, bool IsMedical, int MedicalType, string TBL, int UserId, int WstationId, int LanguageID, int intError) {
            return base.Channel.FetchEmployeesBySpecialization(SpecializationId, IsMedical, MedicalType, TBL, UserId, WstationId, LanguageID, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchEmployeesBySpecializationAsync(int SpecializationId, bool IsMedical, int MedicalType, string TBL, int UserId, int WstationId, int LanguageID, int intError) {
            return base.Channel.FetchEmployeesBySpecializationAsync(SpecializationId, IsMedical, MedicalType, TBL, UserId, WstationId, LanguageID, intError);
        }
        
        public System.Data.DataSet FetchEmpMasters(int EmpID, string EmpNo, string TBL, bool Deleted, int UserId, int WstationId, int intError) {
            return base.Channel.FetchEmpMasters(EmpID, EmpNo, TBL, Deleted, UserId, WstationId, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchEmpMastersAsync(int EmpID, string EmpNo, string TBL, bool Deleted, int UserId, int WstationId, int intError) {
            return base.Channel.FetchEmpMastersAsync(EmpID, EmpNo, TBL, Deleted, UserId, WstationId, intError);
        }
        
        public System.Data.DataSet FetchEmpMastersLangID(int EmpID, string EmpNo, string TBL, bool Deleted, int UserId, int WstationId, int intError, int LanguageID) {
            return base.Channel.FetchEmpMastersLangID(EmpID, EmpNo, TBL, Deleted, UserId, WstationId, intError, LanguageID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchEmpMastersLangIDAsync(int EmpID, string EmpNo, string TBL, bool Deleted, int UserId, int WstationId, int intError, int LanguageID) {
            return base.Channel.FetchEmpMastersLangIDAsync(EmpID, EmpNo, TBL, Deleted, UserId, WstationId, intError, LanguageID);
        }
        
        public System.Data.DataSet FetchBedStatusDetails() {
            return base.Channel.FetchBedStatusDetails();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchBedStatusDetailsAsync() {
            return base.Channel.FetchBedStatusDetailsAsync();
        }
        
        public System.Data.DataSet FetchBedDetails(string Type, string Filter, int UserId, int WstationId, int intError) {
            return base.Channel.FetchBedDetails(Type, Filter, UserId, WstationId, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchBedDetailsAsync(string Type, string Filter, int UserId, int WstationId, int intError) {
            return base.Channel.FetchBedDetailsAsync(Type, Filter, UserId, WstationId, intError);
        }
        
        public System.Data.DataSet FetchTitleRules(string Type, string Filter, int UserId, int WstationId, int intError) {
            return base.Channel.FetchTitleRules(Type, Filter, UserId, WstationId, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchTitleRulesAsync(string Type, string Filter, int UserId, int WstationId, int intError) {
            return base.Channel.FetchTitleRulesAsync(Type, Filter, UserId, WstationId, intError);
        }
        
        public System.Data.DataSet FetchTitleRulesTagID(string Type, string Filter, int UserId, int WstationId, int intError, int tagId) {
            return base.Channel.FetchTitleRulesTagID(Type, Filter, UserId, WstationId, intError, tagId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchTitleRulesTagIDAsync(string Type, string Filter, int UserId, int WstationId, int intError, int tagId) {
            return base.Channel.FetchTitleRulesTagIDAsync(Type, Filter, UserId, WstationId, intError, tagId);
        }
        
        public System.Data.DataSet FetchRefInstDetails(string Type, string Filter, int UserId, int WstationId, int intError, int tagID) {
            return base.Channel.FetchRefInstDetails(Type, Filter, UserId, WstationId, intError, tagID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchRefInstDetailsAsync(string Type, string Filter, int UserId, int WstationId, int intError, int tagID) {
            return base.Channel.FetchRefInstDetailsAsync(Type, Filter, UserId, WstationId, intError, tagID);
        }
        
        public System.Data.DataSet FetchAllPackagesPrice(int intSerID, int intPkgID, string strHospID, string strTariffID, string strBdID, string strOrdrID, int intTblID, int intUserid, int intWorkStationId, int intError) {
            return base.Channel.FetchAllPackagesPrice(intSerID, intPkgID, strHospID, strTariffID, strBdID, strOrdrID, intTblID, intUserid, intWorkStationId, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchAllPackagesPriceAsync(int intSerID, int intPkgID, string strHospID, string strTariffID, string strBdID, string strOrdrID, int intTblID, int intUserid, int intWorkStationId, int intError) {
            return base.Channel.FetchAllPackagesPriceAsync(intSerID, intPkgID, strHospID, strTariffID, strBdID, strOrdrID, intTblID, intUserid, intWorkStationId, intError);
        }
        
        public System.Data.DataSet FetchHospitalTariffDetails(int TariffId, string Filter, int FetatureId, int FunctionId, string CallContext, int UserId, int WstationId, int intError) {
            return base.Channel.FetchHospitalTariffDetails(TariffId, Filter, FetatureId, FunctionId, CallContext, UserId, WstationId, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchHospitalTariffDetailsAsync(int TariffId, string Filter, int FetatureId, int FunctionId, string CallContext, int UserId, int WstationId, int intError) {
            return base.Channel.FetchHospitalTariffDetailsAsync(TariffId, Filter, FetatureId, FunctionId, CallContext, UserId, WstationId, intError);
        }
        
        public System.Data.DataSet GetHospitalTariffDetailsTagID(int TariffId, string Filter, int FetatureId, int FunctionId, string CallContext, int UserId, int WstationId, int intError, int TagId) {
            return base.Channel.GetHospitalTariffDetailsTagID(TariffId, Filter, FetatureId, FunctionId, CallContext, UserId, WstationId, intError, TagId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetHospitalTariffDetailsTagIDAsync(int TariffId, string Filter, int FetatureId, int FunctionId, string CallContext, int UserId, int WstationId, int intError, int TagId) {
            return base.Channel.GetHospitalTariffDetailsTagIDAsync(TariffId, Filter, FetatureId, FunctionId, CallContext, UserId, WstationId, intError, TagId);
        }
        
        public int SaveTitleRules(System.Data.DataSet dsTitleRules) {
            return base.Channel.SaveTitleRules(dsTitleRules);
        }
        
        public System.Threading.Tasks.Task<int> SaveTitleRulesAsync(System.Data.DataSet dsTitleRules) {
            return base.Channel.SaveTitleRulesAsync(dsTitleRules);
        }
        
        public long SaveStateMaster(System.Data.DataSet dsStateMaster, byte IsInsert) {
            return base.Channel.SaveStateMaster(dsStateMaster, IsInsert);
        }
        
        public System.Threading.Tasks.Task<long> SaveStateMasterAsync(System.Data.DataSet dsStateMaster, byte IsInsert) {
            return base.Channel.SaveStateMasterAsync(dsStateMaster, IsInsert);
        }
        
        public long SaveReferralDoctorMaster(System.Data.DataSet dsReferralDoctorMaster, byte IsInsert) {
            return base.Channel.SaveReferralDoctorMaster(dsReferralDoctorMaster, IsInsert);
        }
        
        public System.Threading.Tasks.Task<long> SaveReferralDoctorMasterAsync(System.Data.DataSet dsReferralDoctorMaster, byte IsInsert) {
            return base.Channel.SaveReferralDoctorMasterAsync(dsReferralDoctorMaster, IsInsert);
        }
        
        public long SaveReasonMaster(System.Data.DataSet dsReasonMaster, byte IsInsert) {
            return base.Channel.SaveReasonMaster(dsReasonMaster, IsInsert);
        }
        
        public System.Threading.Tasks.Task<long> SaveReasonMasterAsync(System.Data.DataSet dsReasonMaster, byte IsInsert) {
            return base.Channel.SaveReasonMasterAsync(dsReasonMaster, IsInsert);
        }
        
        public long SaveCityMaster(System.Data.DataSet dsCityMaster, byte IsInsert) {
            return base.Channel.SaveCityMaster(dsCityMaster, IsInsert);
        }
        
        public System.Threading.Tasks.Task<long> SaveCityMasterAsync(System.Data.DataSet dsCityMaster, byte IsInsert) {
            return base.Channel.SaveCityMasterAsync(dsCityMaster, IsInsert);
        }
        
        public bool SaveDataBankMaster(System.Data.DataSet dsDataBankMaster, byte IsInsert) {
            return base.Channel.SaveDataBankMaster(dsDataBankMaster, IsInsert);
        }
        
        public System.Threading.Tasks.Task<bool> SaveDataBankMasterAsync(System.Data.DataSet dsDataBankMaster, byte IsInsert) {
            return base.Channel.SaveDataBankMasterAsync(dsDataBankMaster, IsInsert);
        }
        
        public long SaveConsultationTypeMaster(System.Data.DataSet dsConsTypeMaster, byte IsInsert) {
            return base.Channel.SaveConsultationTypeMaster(dsConsTypeMaster, IsInsert);
        }
        
        public System.Threading.Tasks.Task<long> SaveConsultationTypeMasterAsync(System.Data.DataSet dsConsTypeMaster, byte IsInsert) {
            return base.Channel.SaveConsultationTypeMasterAsync(dsConsTypeMaster, IsInsert);
        }
        
        public bool SaveDatabankType(int intUserId, int intWorkStationId, int intError, System.Data.DataSet dsDatabankType) {
            return base.Channel.SaveDatabankType(intUserId, intWorkStationId, intError, dsDatabankType);
        }
        
        public System.Threading.Tasks.Task<bool> SaveDatabankTypeAsync(int intUserId, int intWorkStationId, int intError, System.Data.DataSet dsDatabankType) {
            return base.Channel.SaveDatabankTypeAsync(intUserId, intWorkStationId, intError, dsDatabankType);
        }
        
        public bool BlockMasters(int intTableId, int intSPId, string strFieldName, int intId, bool blnRevert, int intFeatureId, int intFuntionID, string strCallContext, int intUserId, int intWorkStationId) {
            return base.Channel.BlockMasters(intTableId, intSPId, strFieldName, intId, blnRevert, intFeatureId, intFuntionID, strCallContext, intUserId, intWorkStationId);
        }
        
        public System.Threading.Tasks.Task<bool> BlockMastersAsync(int intTableId, int intSPId, string strFieldName, int intId, bool blnRevert, int intFeatureId, int intFuntionID, string strCallContext, int intUserId, int intWorkStationId) {
            return base.Channel.BlockMastersAsync(intTableId, intSPId, strFieldName, intId, blnRevert, intFeatureId, intFuntionID, strCallContext, intUserId, intWorkStationId);
        }
        
        public long SaveAreaMaster(System.Data.DataSet dsAreaMaster, byte IsInsert) {
            return base.Channel.SaveAreaMaster(dsAreaMaster, IsInsert);
        }
        
        public System.Threading.Tasks.Task<long> SaveAreaMasterAsync(System.Data.DataSet dsAreaMaster, byte IsInsert) {
            return base.Channel.SaveAreaMasterAsync(dsAreaMaster, IsInsert);
        }
        
        public bool SaveReferenceCodes(System.Data.DataSet dsdata, int intTariffId, int intFeatureId, int intFunctionId, string strCallContext, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.SaveReferenceCodes(dsdata, intTariffId, intFeatureId, intFunctionId, strCallContext, intUserId, intWorkStationId, intError);
        }
        
        public System.Threading.Tasks.Task<bool> SaveReferenceCodesAsync(System.Data.DataSet dsdata, int intTariffId, int intFeatureId, int intFunctionId, string strCallContext, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.SaveReferenceCodesAsync(dsdata, intTariffId, intFeatureId, intFunctionId, strCallContext, intUserId, intWorkStationId, intError);
        }
        
        public System.Data.DataSet WSGetPackageDetails(int intPackageID, int intUserId, int intWorkStationId, int intError, int intLanguageID) {
            return base.Channel.WSGetPackageDetails(intPackageID, intUserId, intWorkStationId, intError, intLanguageID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> WSGetPackageDetailsAsync(int intPackageID, int intUserId, int intWorkStationId, int intError, int intLanguageID) {
            return base.Channel.WSGetPackageDetailsAsync(intPackageID, intUserId, intWorkStationId, intError, intLanguageID);
        }
        
        public long SaveTitle(System.Data.DataSet dsTitle, byte IsInsert) {
            return base.Channel.SaveTitle(dsTitle, IsInsert);
        }
        
        public System.Threading.Tasks.Task<long> SaveTitleAsync(System.Data.DataSet dsTitle, byte IsInsert) {
            return base.Channel.SaveTitleAsync(dsTitle, IsInsert);
        }
        
        public System.Data.DataSet GetPatientADVProcedure(string ProcedureName, string Type, string Filter, int UserId, int WstationId, int intError) {
            return base.Channel.GetPatientADVProcedure(ProcedureName, Type, Filter, UserId, WstationId, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetPatientADVProcedureAsync(string ProcedureName, string Type, string Filter, int UserId, int WstationId, int intError) {
            return base.Channel.GetPatientADVProcedureAsync(ProcedureName, Type, Filter, UserId, WstationId, intError);
        }
        
        public System.Data.DataSet FetchPostalAddress(string strSelect, string strFilter) {
            return base.Channel.FetchPostalAddress(strSelect, strFilter);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchPostalAddressAsync(string strSelect, string strFilter) {
            return base.Channel.FetchPostalAddressAsync(strSelect, strFilter);
        }
        
        public bool SavePatientDictionaryMaster(System.Data.DataSet dsPatientDictionary) {
            return base.Channel.SavePatientDictionaryMaster(dsPatientDictionary);
        }
        
        public System.Threading.Tasks.Task<bool> SavePatientDictionaryMasterAsync(System.Data.DataSet dsPatientDictionary) {
            return base.Channel.SavePatientDictionaryMasterAsync(dsPatientDictionary);
        }
        
        public System.Data.DataSet GetTestProfileSpecimen(int intProfileId, int intOrderTypeID, int intTableId, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.GetTestProfileSpecimen(intProfileId, intOrderTypeID, intTableId, intUserId, intWorkStationId, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetTestProfileSpecimenAsync(int intProfileId, int intOrderTypeID, int intTableId, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.GetTestProfileSpecimenAsync(intProfileId, intOrderTypeID, intTableId, intUserId, intWorkStationId, intError);
        }
        
        public System.Data.DataSet FetchPriceDetails(int ServiceId, int ItemId, int TariffId, int BillType, int Priority, int SpecialisationId, string BedtypeId, int iUserId, int iWstationId, int iError) {
            return base.Channel.FetchPriceDetails(ServiceId, ItemId, TariffId, BillType, Priority, SpecialisationId, BedtypeId, iUserId, iWstationId, iError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchPriceDetailsAsync(int ServiceId, int ItemId, int TariffId, int BillType, int Priority, int SpecialisationId, string BedtypeId, int iUserId, int iWstationId, int iError) {
            return base.Channel.FetchPriceDetailsAsync(ServiceId, ItemId, TariffId, BillType, Priority, SpecialisationId, BedtypeId, iUserId, iWstationId, iError);
        }
        
        public System.Data.DataSet FetchPriceDetailsDt(System.Data.DataTable dt) {
            return base.Channel.FetchPriceDetailsDt(dt);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchPriceDetailsDtAsync(System.Data.DataTable dt) {
            return base.Channel.FetchPriceDetailsDtAsync(dt);
        }
        
        public System.Data.DataSet FetchPriceDetailsDtNew(System.Data.DataTable dt) {
            return base.Channel.FetchPriceDetailsDtNew(dt);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchPriceDetailsDtNewAsync(System.Data.DataTable dt) {
            return base.Channel.FetchPriceDetailsDtNewAsync(dt);
        }
        
        public System.Data.DataSet FetchPriceDetailsWithProfCharge(int ServiceId, int ItemId, int TariffId, int BillType, int Priority, int SpecialisationId, string BedtypeId, int iUserId, int iWstationId, int iError) {
            return base.Channel.FetchPriceDetailsWithProfCharge(ServiceId, ItemId, TariffId, BillType, Priority, SpecialisationId, BedtypeId, iUserId, iWstationId, iError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchPriceDetailsWithProfChargeAsync(int ServiceId, int ItemId, int TariffId, int BillType, int Priority, int SpecialisationId, string BedtypeId, int iUserId, int iWstationId, int iError) {
            return base.Channel.FetchPriceDetailsWithProfChargeAsync(ServiceId, ItemId, TariffId, BillType, Priority, SpecialisationId, BedtypeId, iUserId, iWstationId, iError);
        }
        
        public System.Data.DataSet FetchPriceDetailsNew(int ServiceId, int ItemId, int TariffId, int BillType, int Priority, int SpecialisationId, string BedtypeId, int iUserId, int iWstationId, int iError, int type) {
            return base.Channel.FetchPriceDetailsNew(ServiceId, ItemId, TariffId, BillType, Priority, SpecialisationId, BedtypeId, iUserId, iWstationId, iError, type);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchPriceDetailsNewAsync(int ServiceId, int ItemId, int TariffId, int BillType, int Priority, int SpecialisationId, string BedtypeId, int iUserId, int iWstationId, int iError, int type) {
            return base.Channel.FetchPriceDetailsNewAsync(ServiceId, ItemId, TariffId, BillType, Priority, SpecialisationId, BedtypeId, iUserId, iWstationId, iError, type);
        }
        
        public System.Data.DataSet FetchServices(int intTableId, string strFilter, int IntUserId, int intWorkStationId, int intError) {
            return base.Channel.FetchServices(intTableId, strFilter, IntUserId, intWorkStationId, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchServicesAsync(int intTableId, string strFilter, int IntUserId, int intWorkStationId, int intError) {
            return base.Channel.FetchServicesAsync(intTableId, strFilter, IntUserId, intWorkStationId, intError);
        }
        
        public System.Data.DataSet FetchOrderTypes(int intTableId, string strFilter, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.FetchOrderTypes(intTableId, strFilter, intUserId, intWorkStationId, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchOrderTypesAsync(int intTableId, string strFilter, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.FetchOrderTypesAsync(intTableId, strFilter, intUserId, intWorkStationId, intError);
        }
        
        public System.Data.DataSet FetchPackageItems(int intPackageId, int intTableId, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.FetchPackageItems(intPackageId, intTableId, intUserId, intWorkStationId, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchPackageItemsAsync(int intPackageId, int intTableId, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.FetchPackageItemsAsync(intPackageId, intTableId, intUserId, intWorkStationId, intError);
        }
        
        public System.Data.DataSet FetchDepositDetails(int IntPatientId, int IntUserId, int intWorkStationId, int intError) {
            return base.Channel.FetchDepositDetails(IntPatientId, IntUserId, intWorkStationId, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchDepositDetailsAsync(int IntPatientId, int IntUserId, int intWorkStationId, int intError) {
            return base.Channel.FetchDepositDetailsAsync(IntPatientId, IntUserId, intWorkStationId, intError);
        }
        
        public System.Data.DataSet FetchDepositDetailsTagID(int IntPatientId, int IntUserId, int intWorkStationId, int intError, int inttagId) {
            return base.Channel.FetchDepositDetailsTagID(IntPatientId, IntUserId, intWorkStationId, intError, inttagId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchDepositDetailsTagIDAsync(int IntPatientId, int IntUserId, int intWorkStationId, int intError, int inttagId) {
            return base.Channel.FetchDepositDetailsTagIDAsync(IntPatientId, IntUserId, intWorkStationId, intError, inttagId);
        }
        
        public System.Data.DataSet FetchReceiptDetails(string strBillNo, int IntReceiptType, int IntUserId, int intWorkStationId, int intError) {
            return base.Channel.FetchReceiptDetails(strBillNo, IntReceiptType, IntUserId, intWorkStationId, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchReceiptDetailsAsync(string strBillNo, int IntReceiptType, int IntUserId, int intWorkStationId, int intError) {
            return base.Channel.FetchReceiptDetailsAsync(strBillNo, IntReceiptType, IntUserId, intWorkStationId, intError);
        }
        
        public System.Data.DataSet FetchReceiptDetailsLangID(string strBillNo, int IntReceiptType, int IntUserId, int intWorkStationId, int intError, int intLanguageID) {
            return base.Channel.FetchReceiptDetailsLangID(strBillNo, IntReceiptType, IntUserId, intWorkStationId, intError, intLanguageID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchReceiptDetailsLangIDAsync(string strBillNo, int IntReceiptType, int IntUserId, int intWorkStationId, int intError, int intLanguageID) {
            return base.Channel.FetchReceiptDetailsLangIDAsync(strBillNo, IntReceiptType, IntUserId, intWorkStationId, intError, intLanguageID);
        }
        
        public System.Data.DataSet FetchReceiptDetailsperf(string strBillNo, int IntReceiptType, int IntUserId, int intWorkStationId, int intError, int intLanguageID) {
            return base.Channel.FetchReceiptDetailsperf(strBillNo, IntReceiptType, IntUserId, intWorkStationId, intError, intLanguageID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchReceiptDetailsperfAsync(string strBillNo, int IntReceiptType, int IntUserId, int intWorkStationId, int intError, int intLanguageID) {
            return base.Channel.FetchReceiptDetailsperfAsync(strBillNo, IntReceiptType, IntUserId, intWorkStationId, intError, intLanguageID);
        }
        
        public System.Data.DataSet FetchBillDetails(string strBillNo, int IntUserId, int intWorkStationId, int intError) {
            return base.Channel.FetchBillDetails(strBillNo, IntUserId, intWorkStationId, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchBillDetailsAsync(string strBillNo, int IntUserId, int intWorkStationId, int intError) {
            return base.Channel.FetchBillDetailsAsync(strBillNo, IntUserId, intWorkStationId, intError);
        }
        
        public System.Data.DataSet FetchBillDetailsTagID(string strBillNo, int IntUserId, int intWorkStationId, int intError, int tagid) {
            return base.Channel.FetchBillDetailsTagID(strBillNo, IntUserId, intWorkStationId, intError, tagid);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchBillDetailsTagIDAsync(string strBillNo, int IntUserId, int intWorkStationId, int intError, int tagid) {
            return base.Channel.FetchBillDetailsTagIDAsync(strBillNo, IntUserId, intWorkStationId, intError, tagid);
        }
        
        public System.Data.DataSet FetchTariffDetails(int TariffID, int intUserID, int intWorkStationID, int intError, int GradeID) {
            return base.Channel.FetchTariffDetails(TariffID, intUserID, intWorkStationID, intError, GradeID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchTariffDetailsAsync(int TariffID, int intUserID, int intWorkStationID, int intError, int GradeID) {
            return base.Channel.FetchTariffDetailsAsync(TariffID, intUserID, intWorkStationID, intError, GradeID);
        }
        
        public System.Data.DataSet FetchCompanyDetails(int CompanyID, string CompanyType, string Tables, int intUserID, int intWorkStationID, int intError) {
            return base.Channel.FetchCompanyDetails(CompanyID, CompanyType, Tables, intUserID, intWorkStationID, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchCompanyDetailsAsync(int CompanyID, string CompanyType, string Tables, int intUserID, int intWorkStationID, int intError) {
            return base.Channel.FetchCompanyDetailsAsync(CompanyID, CompanyType, Tables, intUserID, intWorkStationID, intError);
        }
        
        public System.Data.DataSet FetchHospitalCompanyDetails(int CompanyID, string CompanyType, string Tables, int intUserID, int intWorkStationID, int intError, int HospitalID) {
            return base.Channel.FetchHospitalCompanyDetails(CompanyID, CompanyType, Tables, intUserID, intWorkStationID, intError, HospitalID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchHospitalCompanyDetailsAsync(int CompanyID, string CompanyType, string Tables, int intUserID, int intWorkStationID, int intError, int HospitalID) {
            return base.Channel.FetchHospitalCompanyDetailsAsync(CompanyID, CompanyType, Tables, intUserID, intWorkStationID, intError, HospitalID);
        }
        
        public System.Data.DataSet FetchHospitalCompanyDetailsMODA(int CompanyID, string CompanyType, string Tables, int intUserID, int intWorkStationID, int intError, int HospitalID) {
            return base.Channel.FetchHospitalCompanyDetailsMODA(CompanyID, CompanyType, Tables, intUserID, intWorkStationID, intError, HospitalID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchHospitalCompanyDetailsMODAAsync(int CompanyID, string CompanyType, string Tables, int intUserID, int intWorkStationID, int intError, int HospitalID) {
            return base.Channel.FetchHospitalCompanyDetailsMODAAsync(CompanyID, CompanyType, Tables, intUserID, intWorkStationID, intError, HospitalID);
        }
        
        public System.Data.DataSet FetchLetterDetails(int intLetterId, int intLevel, string strTableId, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.FetchLetterDetails(intLetterId, intLevel, strTableId, intUserId, intWorkStationId, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchLetterDetailsAsync(int intLetterId, int intLevel, string strTableId, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.FetchLetterDetailsAsync(intLetterId, intLevel, strTableId, intUserId, intWorkStationId, intError);
        }
        
        public System.Data.DataSet FetchHospitalLetterDetails(int intLetterId, int intLevel, string strTableId, int intUserId, int intWorkStationId, int intError, int HospitalID) {
            return base.Channel.FetchHospitalLetterDetails(intLetterId, intLevel, strTableId, intUserId, intWorkStationId, intError, HospitalID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchHospitalLetterDetailsAsync(int intLetterId, int intLevel, string strTableId, int intUserId, int intWorkStationId, int intError, int HospitalID) {
            return base.Channel.FetchHospitalLetterDetailsAsync(intLetterId, intLevel, strTableId, intUserId, intWorkStationId, intError, HospitalID);
        }
        
        public System.Data.DataSet FetchOtherDetails(int Type, string strFilter, int intUserID, int intWorkStationID, int intError) {
            return base.Channel.FetchOtherDetails(Type, strFilter, intUserID, intWorkStationID, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchOtherDetailsAsync(int Type, string strFilter, int intUserID, int intWorkStationID, int intError) {
            return base.Channel.FetchOtherDetailsAsync(Type, strFilter, intUserID, intWorkStationID, intError);
        }
        
        public System.Data.DataSet FetchTestSpecimen(int intTestId, int intTableId, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.FetchTestSpecimen(intTestId, intTableId, intUserId, intWorkStationId, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchTestSpecimenAsync(int intTestId, int intTableId, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.FetchTestSpecimenAsync(intTestId, intTableId, intUserId, intWorkStationId, intError);
        }
        
        public System.Data.DataSet GetDiscountDetails(long lngBillNo, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.GetDiscountDetails(lngBillNo, intUserId, intWorkStationId, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetDiscountDetailsAsync(long lngBillNo, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.GetDiscountDetailsAsync(lngBillNo, intUserId, intWorkStationId, intError);
        }
        
        public System.Data.DataSet FetchViewDiscountDetails(long lngBillNo, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.FetchViewDiscountDetails(lngBillNo, intUserId, intWorkStationId, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchViewDiscountDetailsAsync(long lngBillNo, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.FetchViewDiscountDetailsAsync(lngBillNo, intUserId, intWorkStationId, intError);
        }
        
        public System.Data.DataSet FetchOtherDocDetails(int PatientId, int PatientType, int intUserID, int intWorkStationID, int intError) {
            return base.Channel.FetchOtherDocDetails(PatientId, PatientType, intUserID, intWorkStationID, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchOtherDocDetailsAsync(int PatientId, int PatientType, int intUserID, int intWorkStationID, int intError) {
            return base.Channel.FetchOtherDocDetailsAsync(PatientId, PatientType, intUserID, intWorkStationID, intError);
        }
        
        public System.Data.DataSet FetchBloodBankDetails(int PatientId, int PatientType, int IPID, string TableID, int intUserID, int intWorkStationID, int intError) {
            return base.Channel.FetchBloodBankDetails(PatientId, PatientType, IPID, TableID, intUserID, intWorkStationID, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchBloodBankDetailsAsync(int PatientId, int PatientType, int IPID, string TableID, int intUserID, int intWorkStationID, int intError) {
            return base.Channel.FetchBloodBankDetailsAsync(PatientId, PatientType, IPID, TableID, intUserID, intWorkStationID, intError);
        }
        
        public System.Data.DataSet FetchPatientallerts(int PatientID, int AdmissionID, int AlertTypeID, string strTbl, int intUserID, int intWorkstnID) {
            return base.Channel.FetchPatientallerts(PatientID, AdmissionID, AlertTypeID, strTbl, intUserID, intWorkstnID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchPatientallertsAsync(int PatientID, int AdmissionID, int AlertTypeID, string strTbl, int intUserID, int intWorkstnID) {
            return base.Channel.FetchPatientallertsAsync(PatientID, AdmissionID, AlertTypeID, strTbl, intUserID, intWorkstnID);
        }
        
        public System.Data.DataSet FetchDoctorsByFilter(int intTableId, string strFilter, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.FetchDoctorsByFilter(intTableId, strFilter, intUserId, intWorkStationId, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchDoctorsByFilterAsync(int intTableId, string strFilter, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.FetchDoctorsByFilterAsync(intTableId, strFilter, intUserId, intWorkStationId, intError);
        }
        
        public System.Data.DataSet FetchAccountBooks(string strType, string strFilter, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.FetchAccountBooks(strType, strFilter, intUserId, intWorkStationId, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchAccountBooksAsync(string strType, string strFilter, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.FetchAccountBooksAsync(strType, strFilter, intUserId, intWorkStationId, intError);
        }
        
        public System.Data.DataSet FetchServiceItems(int intServiceId, int intHospId, int intTariffId, int intBedTypeId, int intOrderTypeId, int intTableId, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.FetchServiceItems(intServiceId, intHospId, intTariffId, intBedTypeId, intOrderTypeId, intTableId, intUserId, intWorkStationId, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchServiceItemsAsync(int intServiceId, int intHospId, int intTariffId, int intBedTypeId, int intOrderTypeId, int intTableId, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.FetchServiceItemsAsync(intServiceId, intHospId, intTariffId, intBedTypeId, intOrderTypeId, intTableId, intUserId, intWorkStationId, intError);
        }
        
        public System.Data.DataSet FetchTest(int intTestId, int intTableId, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.FetchTest(intTestId, intTableId, intUserId, intWorkStationId, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchTestAsync(int intTestId, int intTableId, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.FetchTestAsync(intTestId, intTableId, intUserId, intWorkStationId, intError);
        }
        
        public System.Data.DataSet FetchDependencyDetails(int intTariffID, int intTable, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.FetchDependencyDetails(intTariffID, intTable, intUserId, intWorkStationId, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchDependencyDetailsAsync(int intTariffID, int intTable, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.FetchDependencyDetailsAsync(intTariffID, intTable, intUserId, intWorkStationId, intError);
        }
        
        public System.Data.DataSet FetchDayCareServiceDetails(long lngIPID, int intDefTariffID, int intTariffID, int intEBedType, int intLoacationID, string strDischargeDateTime, int intServiceID, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.FetchDayCareServiceDetails(lngIPID, intDefTariffID, intTariffID, intEBedType, intLoacationID, strDischargeDateTime, intServiceID, intUserId, intWorkStationId, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchDayCareServiceDetailsAsync(long lngIPID, int intDefTariffID, int intTariffID, int intEBedType, int intLoacationID, string strDischargeDateTime, int intServiceID, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.FetchDayCareServiceDetailsAsync(lngIPID, intDefTariffID, intTariffID, intEBedType, intLoacationID, strDischargeDateTime, intServiceID, intUserId, intWorkStationId, intError);
        }
        
        public System.Data.DataSet FetchFlatServices(int intPatientId, int intTable, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.FetchFlatServices(intPatientId, intTable, intUserId, intWorkStationId, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchFlatServicesAsync(int intPatientId, int intTable, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.FetchFlatServicesAsync(intPatientId, intTable, intUserId, intWorkStationId, intError);
        }
        
        public int GetServiceType(string strServiceType) {
            return base.Channel.GetServiceType(strServiceType);
        }
        
        public System.Threading.Tasks.Task<int> GetServiceTypeAsync(string strServiceType) {
            return base.Channel.GetServiceTypeAsync(strServiceType);
        }
        
        public System.Data.DataSet FetchPackage(long lngPackageId, int intId, int intLevel, string strTableId, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.FetchPackage(lngPackageId, intId, intLevel, strTableId, intUserId, intWorkStationId, intError);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchPackageAsync(long lngPackageId, int intId, int intLevel, string strTableId, int intUserId, int intWorkStationId, int intError) {
            return base.Channel.FetchPackageAsync(lngPackageId, intId, intLevel, strTableId, intUserId, intWorkStationId, intError);
        }
        
        public System.Data.DataSet FetchRegConfiguration(int Type, int Result) {
            return base.Channel.FetchRegConfiguration(Type, Result);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchRegConfigurationAsync(int Type, int Result) {
            return base.Channel.FetchRegConfigurationAsync(Type, Result);
        }
    }
}
