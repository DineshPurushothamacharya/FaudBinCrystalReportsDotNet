//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Reports.BillingCalculationServiceClient {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
    [System.SerializableAttribute()]
    public partial class NextGenCustomException : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorDetailsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorMessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorSourceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorStackTraceField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorCode {
            get {
                return this.ErrorCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorCodeField, value) != true)) {
                    this.ErrorCodeField = value;
                    this.RaisePropertyChanged("ErrorCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorDetails {
            get {
                return this.ErrorDetailsField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorDetailsField, value) != true)) {
                    this.ErrorDetailsField = value;
                    this.RaisePropertyChanged("ErrorDetails");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorMessage {
            get {
                return this.ErrorMessageField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorMessageField, value) != true)) {
                    this.ErrorMessageField = value;
                    this.RaisePropertyChanged("ErrorMessage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorSource {
            get {
                return this.ErrorSourceField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorSourceField, value) != true)) {
                    this.ErrorSourceField = value;
                    this.RaisePropertyChanged("ErrorSource");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorStackTrace {
            get {
                return this.ErrorStackTraceField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorStackTraceField, value) != true)) {
                    this.ErrorStackTraceField = value;
                    this.RaisePropertyChanged("ErrorStackTrace");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://Wipro.NxG.HIS", ConfigurationName="BillingCalculationServiceClient.BillingCalculatonServiceContract")]
    public interface BillingCalculatonServiceContract {
        
        [System.ServiceModel.OperationContractAttribute(Action="GetBillRule", ReplyAction="http://Wipro.NxG.HIS/BillingCalculatonServiceContract/GetBillRuleResponse")]
        void GetBillRule();
        
        [System.ServiceModel.OperationContractAttribute(Action="GetBillRule", ReplyAction="http://Wipro.NxG.HIS/BillingCalculatonServiceContract/GetBillRuleResponse")]
        System.Threading.Tasks.Task GetBillRuleAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="ApplyAgreementRule", ReplyAction="http://Wipro.NxG.HIS/BillingCalculatonServiceContract/ApplyAgreementRuleResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.BillingCalculationServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/BillingCalculatonServiceContract/ApplyAgreementRuleNextGenCu" +
            "stomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet ApplyAgreementRule(System.Data.DataTable BillData, System.Data.DataSet AgreementData, bool IsServiceStart, int EligibleBedTypeID, string EligibleBedTypeName, System.Data.DataSet dsCompDeductables, bool IsOPPackage);
        
        [System.ServiceModel.OperationContractAttribute(Action="ApplyAgreementRule", ReplyAction="http://Wipro.NxG.HIS/BillingCalculatonServiceContract/ApplyAgreementRuleResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> ApplyAgreementRuleAsync(System.Data.DataTable BillData, System.Data.DataSet AgreementData, bool IsServiceStart, int EligibleBedTypeID, string EligibleBedTypeName, System.Data.DataSet dsCompDeductables, bool IsOPPackage);
        
        [System.ServiceModel.OperationContractAttribute(Action="ApplyServiceDependencyConfig", ReplyAction="http://Wipro.NxG.HIS/BillingCalculatonServiceContract/ApplyServiceDependencyConfi" +
            "gResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.BillingCalculationServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/BillingCalculatonServiceContract/ApplyServiceDependencyConfi" +
            "gNextGenCustomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataTable ApplyServiceDependencyConfig(System.Data.DataTable BillDetails, System.Data.DataTable ServiceConfig);
        
        [System.ServiceModel.OperationContractAttribute(Action="ApplyServiceDependencyConfig", ReplyAction="http://Wipro.NxG.HIS/BillingCalculatonServiceContract/ApplyServiceDependencyConfi" +
            "gResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> ApplyServiceDependencyConfigAsync(System.Data.DataTable BillDetails, System.Data.DataTable ServiceConfig);
        
        [System.ServiceModel.OperationContractAttribute(Action="SplitBedRentalsDataOld", ReplyAction="http://Wipro.NxG.HIS/BillingCalculatonServiceContract/SplitBedRentalsDataOldRespo" +
            "nse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.BillingCalculationServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/BillingCalculatonServiceContract/SplitBedRentalsDataOldNextG" +
            "enCustomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet SplitBedRentalsDataOld(System.Data.DataSet DsBillData, System.Data.DataSet DsBedRentBreakUpData, System.DateTime PackStartDate, System.DateTime PackEndDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="SplitBedRentalsDataOld", ReplyAction="http://Wipro.NxG.HIS/BillingCalculatonServiceContract/SplitBedRentalsDataOldRespo" +
            "nse")]
        System.Threading.Tasks.Task<System.Data.DataSet> SplitBedRentalsDataOldAsync(System.Data.DataSet DsBillData, System.Data.DataSet DsBedRentBreakUpData, System.DateTime PackStartDate, System.DateTime PackEndDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="SplitBedRentalsData", ReplyAction="http://Wipro.NxG.HIS/BillingCalculatonServiceContract/SplitBedRentalsDataResponse" +
            "")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.BillingCalculationServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/BillingCalculatonServiceContract/SplitBedRentalsDataNextGenC" +
            "ustomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet SplitBedRentalsData(System.Data.DataSet DsBillData, System.Data.DataSet DsBedRentBreakUpData, System.DateTime PackStartDate, System.DateTime PackEndDate, bool blnFirst);
        
        [System.ServiceModel.OperationContractAttribute(Action="SplitBedRentalsData", ReplyAction="http://Wipro.NxG.HIS/BillingCalculatonServiceContract/SplitBedRentalsDataResponse" +
            "")]
        System.Threading.Tasks.Task<System.Data.DataSet> SplitBedRentalsDataAsync(System.Data.DataSet DsBillData, System.Data.DataSet DsBedRentBreakUpData, System.DateTime PackStartDate, System.DateTime PackEndDate, bool blnFirst);
        
        [System.ServiceModel.OperationContractAttribute(Action="ApplyPackageOnBill", ReplyAction="http://Wipro.NxG.HIS/BillingCalculatonServiceContract/ApplyPackageOnBillResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.BillingCalculationServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/BillingCalculatonServiceContract/ApplyPackageOnBillNextGenCu" +
            "stomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet ApplyPackageOnBill(System.Data.DataSet[] PackageData, System.Data.DataTable BillData, System.Data.DataSet PackageList, int EligibleBedTypeID, System.Data.DataSet DsBedsList, System.Data.DataSet DsBedRentBreakUp, System.Data.DataSet dsRoomRentConfig, string strDischargeDateTime, bool IsDischarged, int intPatientType);
        
        [System.ServiceModel.OperationContractAttribute(Action="ApplyPackageOnBill", ReplyAction="http://Wipro.NxG.HIS/BillingCalculatonServiceContract/ApplyPackageOnBillResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> ApplyPackageOnBillAsync(System.Data.DataSet[] PackageData, System.Data.DataTable BillData, System.Data.DataSet PackageList, int EligibleBedTypeID, System.Data.DataSet DsBedsList, System.Data.DataSet DsBedRentBreakUp, System.Data.DataSet dsRoomRentConfig, string strDischargeDateTime, bool IsDischarged, int intPatientType);
        
        [System.ServiceModel.OperationContractAttribute(Action="CalculateDeductibles", ReplyAction="http://Wipro.NxG.HIS/BillingCalculatonServiceContract/CalculateDeductiblesRespons" +
            "e")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.BillingCalculationServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/BillingCalculatonServiceContract/CalculateDeductiblesNextGen" +
            "CustomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet CalculateDeductibles(System.Data.DataTable OutPutTable, bool IsServiceStart, bool IsOPPackage, decimal DiscAmount);
        
        [System.ServiceModel.OperationContractAttribute(Action="CalculateDeductibles", ReplyAction="http://Wipro.NxG.HIS/BillingCalculatonServiceContract/CalculateDeductiblesRespons" +
            "e")]
        System.Threading.Tasks.Task<System.Data.DataSet> CalculateDeductiblesAsync(System.Data.DataTable OutPutTable, bool IsServiceStart, bool IsOPPackage, decimal DiscAmount);
        
        [System.ServiceModel.OperationContractAttribute(Action="ApplyPackageExclusionInclusionRule", ReplyAction="http://Wipro.NxG.HIS/BillingCalculatonServiceContract/ApplyPackageExclusionInclus" +
            "ionRuleResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Reports.BillingCalculationServiceClient.NextGenCustomException), Action="http://Wipro.NxG.HIS/BillingCalculatonServiceContract/ApplyPackageExclusionInclus" +
            "ionRuleNextGenCustomExceptionFault", Name="NextGenCustomException", Namespace="http://schemas.datacontract.org/2004/07/HIS.CustomException")]
        System.Data.DataSet ApplyPackageExclusionInclusionRule();
        
        [System.ServiceModel.OperationContractAttribute(Action="ApplyPackageExclusionInclusionRule", ReplyAction="http://Wipro.NxG.HIS/BillingCalculatonServiceContract/ApplyPackageExclusionInclus" +
            "ionRuleResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> ApplyPackageExclusionInclusionRuleAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface BillingCalculatonServiceContractChannel : Reports.BillingCalculationServiceClient.BillingCalculatonServiceContract, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BillingCalculatonServiceContractClient : System.ServiceModel.ClientBase<Reports.BillingCalculationServiceClient.BillingCalculatonServiceContract>, Reports.BillingCalculationServiceClient.BillingCalculatonServiceContract {
        
        public BillingCalculatonServiceContractClient() {
        }
        
        public BillingCalculatonServiceContractClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public BillingCalculatonServiceContractClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BillingCalculatonServiceContractClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BillingCalculatonServiceContractClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void GetBillRule() {
            base.Channel.GetBillRule();
        }
        
        public System.Threading.Tasks.Task GetBillRuleAsync() {
            return base.Channel.GetBillRuleAsync();
        }
        
        public System.Data.DataSet ApplyAgreementRule(System.Data.DataTable BillData, System.Data.DataSet AgreementData, bool IsServiceStart, int EligibleBedTypeID, string EligibleBedTypeName, System.Data.DataSet dsCompDeductables, bool IsOPPackage) {
            return base.Channel.ApplyAgreementRule(BillData, AgreementData, IsServiceStart, EligibleBedTypeID, EligibleBedTypeName, dsCompDeductables, IsOPPackage);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> ApplyAgreementRuleAsync(System.Data.DataTable BillData, System.Data.DataSet AgreementData, bool IsServiceStart, int EligibleBedTypeID, string EligibleBedTypeName, System.Data.DataSet dsCompDeductables, bool IsOPPackage) {
            return base.Channel.ApplyAgreementRuleAsync(BillData, AgreementData, IsServiceStart, EligibleBedTypeID, EligibleBedTypeName, dsCompDeductables, IsOPPackage);
        }
        
        public System.Data.DataTable ApplyServiceDependencyConfig(System.Data.DataTable BillDetails, System.Data.DataTable ServiceConfig) {
            return base.Channel.ApplyServiceDependencyConfig(BillDetails, ServiceConfig);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> ApplyServiceDependencyConfigAsync(System.Data.DataTable BillDetails, System.Data.DataTable ServiceConfig) {
            return base.Channel.ApplyServiceDependencyConfigAsync(BillDetails, ServiceConfig);
        }
        
        public System.Data.DataSet SplitBedRentalsDataOld(System.Data.DataSet DsBillData, System.Data.DataSet DsBedRentBreakUpData, System.DateTime PackStartDate, System.DateTime PackEndDate) {
            return base.Channel.SplitBedRentalsDataOld(DsBillData, DsBedRentBreakUpData, PackStartDate, PackEndDate);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SplitBedRentalsDataOldAsync(System.Data.DataSet DsBillData, System.Data.DataSet DsBedRentBreakUpData, System.DateTime PackStartDate, System.DateTime PackEndDate) {
            return base.Channel.SplitBedRentalsDataOldAsync(DsBillData, DsBedRentBreakUpData, PackStartDate, PackEndDate);
        }
        
        public System.Data.DataSet SplitBedRentalsData(System.Data.DataSet DsBillData, System.Data.DataSet DsBedRentBreakUpData, System.DateTime PackStartDate, System.DateTime PackEndDate, bool blnFirst) {
            return base.Channel.SplitBedRentalsData(DsBillData, DsBedRentBreakUpData, PackStartDate, PackEndDate, blnFirst);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SplitBedRentalsDataAsync(System.Data.DataSet DsBillData, System.Data.DataSet DsBedRentBreakUpData, System.DateTime PackStartDate, System.DateTime PackEndDate, bool blnFirst) {
            return base.Channel.SplitBedRentalsDataAsync(DsBillData, DsBedRentBreakUpData, PackStartDate, PackEndDate, blnFirst);
        }
        
        public System.Data.DataSet ApplyPackageOnBill(System.Data.DataSet[] PackageData, System.Data.DataTable BillData, System.Data.DataSet PackageList, int EligibleBedTypeID, System.Data.DataSet DsBedsList, System.Data.DataSet DsBedRentBreakUp, System.Data.DataSet dsRoomRentConfig, string strDischargeDateTime, bool IsDischarged, int intPatientType) {
            return base.Channel.ApplyPackageOnBill(PackageData, BillData, PackageList, EligibleBedTypeID, DsBedsList, DsBedRentBreakUp, dsRoomRentConfig, strDischargeDateTime, IsDischarged, intPatientType);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> ApplyPackageOnBillAsync(System.Data.DataSet[] PackageData, System.Data.DataTable BillData, System.Data.DataSet PackageList, int EligibleBedTypeID, System.Data.DataSet DsBedsList, System.Data.DataSet DsBedRentBreakUp, System.Data.DataSet dsRoomRentConfig, string strDischargeDateTime, bool IsDischarged, int intPatientType) {
            return base.Channel.ApplyPackageOnBillAsync(PackageData, BillData, PackageList, EligibleBedTypeID, DsBedsList, DsBedRentBreakUp, dsRoomRentConfig, strDischargeDateTime, IsDischarged, intPatientType);
        }
        
        public System.Data.DataSet CalculateDeductibles(System.Data.DataTable OutPutTable, bool IsServiceStart, bool IsOPPackage, decimal DiscAmount) {
            return base.Channel.CalculateDeductibles(OutPutTable, IsServiceStart, IsOPPackage, DiscAmount);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> CalculateDeductiblesAsync(System.Data.DataTable OutPutTable, bool IsServiceStart, bool IsOPPackage, decimal DiscAmount) {
            return base.Channel.CalculateDeductiblesAsync(OutPutTable, IsServiceStart, IsOPPackage, DiscAmount);
        }
        
        public System.Data.DataSet ApplyPackageExclusionInclusionRule() {
            return base.Channel.ApplyPackageExclusionInclusionRule();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> ApplyPackageExclusionInclusionRuleAsync() {
            return base.Channel.ApplyPackageExclusionInclusionRuleAsync();
        }
    }
}
